/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Siphon.h"

namespace models {



Siphon::Siphon()
{
    m_ShipSymbol = utility::conversions::to_string_t("");
    m_ShipSymbolIsSet = false;
    m_YieldIsSet = false;
}

Siphon::~Siphon()
{
}

void Siphon::validate()
{
    // TODO: implement validation
}

web::json::value Siphon::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ShipSymbolIsSet)
    {
        val[utility::conversions::to_string_t(U("shipSymbol"))] = ModelBase::toJson(m_ShipSymbol);
    }
    if(m_YieldIsSet)
    {
        val[utility::conversions::to_string_t(U("yield"))] = ModelBase::toJson(m_Yield);
    }

    return val;
}

bool Siphon::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("shipSymbol"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("shipSymbol")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setShipSymbol;
            ok &= ModelBase::fromJson(fieldValue, refVal_setShipSymbol);
            setShipSymbol(refVal_setShipSymbol);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("yield"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("yield")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SiphonYield> refVal_setYield;
            ok &= ModelBase::fromJson(fieldValue, refVal_setYield);
            setYield(refVal_setYield);
        }
    }
    return ok;
}

void Siphon::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_ShipSymbolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("shipSymbol")), m_ShipSymbol));
    }
    if(m_YieldIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("yield")), m_Yield));
    }
}

bool Siphon::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("shipSymbol"))))
    {
        utility::string_t refVal_setShipSymbol;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("shipSymbol"))), refVal_setShipSymbol );
        setShipSymbol(refVal_setShipSymbol);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("yield"))))
    {
        std::shared_ptr<SiphonYield> refVal_setYield;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("yield"))), refVal_setYield );
        setYield(refVal_setYield);
    }
    return ok;
}

utility::string_t Siphon::getShipSymbol() const
{
    return m_ShipSymbol;
}

void Siphon::setShipSymbol(const utility::string_t& value)
{
    m_ShipSymbol = value;
    m_ShipSymbolIsSet = true;
}

bool Siphon::shipSymbolIsSet() const
{
    return m_ShipSymbolIsSet;
}

void Siphon::unsetShipSymbol()
{
    m_ShipSymbolIsSet = false;
}
std::shared_ptr<SiphonYield> Siphon::getYield() const
{
    return m_Yield;
}

void Siphon::setYield(const std::shared_ptr<SiphonYield>& value)
{
    m_Yield = value;
    m_YieldIsSet = true;
}

bool Siphon::yieldIsSet() const
{
    return m_YieldIsSet;
}

void Siphon::unsetYield()
{
    m_YieldIsSet = false;
}
}


