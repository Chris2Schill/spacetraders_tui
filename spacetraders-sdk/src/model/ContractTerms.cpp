/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ContractTerms.h"

namespace models {



ContractTerms::ContractTerms()
{
    m_Deadline = utility::datetime();
    m_DeadlineIsSet = false;
    m_PaymentIsSet = false;
    m_DeliverIsSet = false;
}

ContractTerms::~ContractTerms()
{
}

void ContractTerms::validate()
{
    // TODO: implement validation
}

web::json::value ContractTerms::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_DeadlineIsSet)
    {
        val[utility::conversions::to_string_t(U("deadline"))] = ModelBase::toJson(m_Deadline);
    }
    if(m_PaymentIsSet)
    {
        val[utility::conversions::to_string_t(U("payment"))] = ModelBase::toJson(m_Payment);
    }
    if(m_DeliverIsSet)
    {
        val[utility::conversions::to_string_t(U("deliver"))] = ModelBase::toJson(m_Deliver);
    }

    return val;
}

bool ContractTerms::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("deadline"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("deadline")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setDeadline;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDeadline);
            setDeadline(refVal_setDeadline);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("payment"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("payment")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ContractPayment> refVal_setPayment;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPayment);
            setPayment(refVal_setPayment);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("deliver"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("deliver")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<ContractDeliverGood>> refVal_setDeliver;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDeliver);
            setDeliver(refVal_setDeliver);
        }
    }
    return ok;
}

void ContractTerms::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_DeadlineIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("deadline")), m_Deadline));
    }
    if(m_PaymentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("payment")), m_Payment));
    }
    if(m_DeliverIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("deliver")), m_Deliver));
    }
}

bool ContractTerms::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("deadline"))))
    {
        utility::datetime refVal_setDeadline;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("deadline"))), refVal_setDeadline );
        setDeadline(refVal_setDeadline);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("payment"))))
    {
        std::shared_ptr<ContractPayment> refVal_setPayment;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("payment"))), refVal_setPayment );
        setPayment(refVal_setPayment);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("deliver"))))
    {
        std::vector<std::shared_ptr<ContractDeliverGood>> refVal_setDeliver;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("deliver"))), refVal_setDeliver );
        setDeliver(refVal_setDeliver);
    }
    return ok;
}

utility::datetime ContractTerms::getDeadline() const
{
    return m_Deadline;
}

void ContractTerms::setDeadline(const utility::datetime& value)
{
    m_Deadline = value;
    m_DeadlineIsSet = true;
}

bool ContractTerms::deadlineIsSet() const
{
    return m_DeadlineIsSet;
}

void ContractTerms::unsetDeadline()
{
    m_DeadlineIsSet = false;
}
std::shared_ptr<ContractPayment> ContractTerms::getPayment() const
{
    return m_Payment;
}

void ContractTerms::setPayment(const std::shared_ptr<ContractPayment>& value)
{
    m_Payment = value;
    m_PaymentIsSet = true;
}

bool ContractTerms::paymentIsSet() const
{
    return m_PaymentIsSet;
}

void ContractTerms::unsetPayment()
{
    m_PaymentIsSet = false;
}
std::vector<std::shared_ptr<ContractDeliverGood>>& ContractTerms::getDeliver()
{
    return m_Deliver;
}

void ContractTerms::setDeliver(const std::vector<std::shared_ptr<ContractDeliverGood>>& value)
{
    m_Deliver = value;
    m_DeliverIsSet = true;
}

bool ContractTerms::deliverIsSet() const
{
    return m_DeliverIsSet;
}

void ContractTerms::unsetDeliver()
{
    m_DeliverIsSet = false;
}
}


