/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/FactionTraitSymbol.h"

namespace models {


namespace
{
using EnumUnderlyingType = utility::string_t;

FactionTraitSymbol::eFactionTraitSymbol toEnum(const EnumUnderlyingType& val)
{
    if (val == utility::conversions::to_string_t(U("BUREAUCRATIC")))
        return FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_BUREAUCRATIC;
    if (val == utility::conversions::to_string_t(U("SECRETIVE")))
        return FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_SECRETIVE;
    if (val == utility::conversions::to_string_t(U("CAPITALISTIC")))
        return FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_CAPITALISTIC;
    if (val == utility::conversions::to_string_t(U("INDUSTRIOUS")))
        return FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_INDUSTRIOUS;
    if (val == utility::conversions::to_string_t(U("PEACEFUL")))
        return FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_PEACEFUL;
    if (val == utility::conversions::to_string_t(U("DISTRUSTFUL")))
        return FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_DISTRUSTFUL;
    if (val == utility::conversions::to_string_t(U("WELCOMING")))
        return FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_WELCOMING;
    if (val == utility::conversions::to_string_t(U("SMUGGLERS")))
        return FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_SMUGGLERS;
    if (val == utility::conversions::to_string_t(U("SCAVENGERS")))
        return FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_SCAVENGERS;
    if (val == utility::conversions::to_string_t(U("REBELLIOUS")))
        return FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_REBELLIOUS;
    if (val == utility::conversions::to_string_t(U("EXILES")))
        return FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_EXILES;
    if (val == utility::conversions::to_string_t(U("PIRATES")))
        return FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_PIRATES;
    if (val == utility::conversions::to_string_t(U("RAIDERS")))
        return FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_RAIDERS;
    if (val == utility::conversions::to_string_t(U("CLAN")))
        return FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_CLAN;
    if (val == utility::conversions::to_string_t(U("GUILD")))
        return FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_GUILD;
    if (val == utility::conversions::to_string_t(U("DOMINION")))
        return FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_DOMINION;
    if (val == utility::conversions::to_string_t(U("FRINGE")))
        return FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_FRINGE;
    if (val == utility::conversions::to_string_t(U("FORSAKEN")))
        return FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_FORSAKEN;
    if (val == utility::conversions::to_string_t(U("ISOLATED")))
        return FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_ISOLATED;
    if (val == utility::conversions::to_string_t(U("LOCALIZED")))
        return FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_LOCALIZED;
    if (val == utility::conversions::to_string_t(U("ESTABLISHED")))
        return FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_ESTABLISHED;
    if (val == utility::conversions::to_string_t(U("NOTABLE")))
        return FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_NOTABLE;
    if (val == utility::conversions::to_string_t(U("DOMINANT")))
        return FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_DOMINANT;
    if (val == utility::conversions::to_string_t(U("INESCAPABLE")))
        return FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_INESCAPABLE;
    if (val == utility::conversions::to_string_t(U("INNOVATIVE")))
        return FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_INNOVATIVE;
    if (val == utility::conversions::to_string_t(U("BOLD")))
        return FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_BOLD;
    if (val == utility::conversions::to_string_t(U("VISIONARY")))
        return FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_VISIONARY;
    if (val == utility::conversions::to_string_t(U("CURIOUS")))
        return FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_CURIOUS;
    if (val == utility::conversions::to_string_t(U("DARING")))
        return FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_DARING;
    if (val == utility::conversions::to_string_t(U("EXPLORATORY")))
        return FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_EXPLORATORY;
    if (val == utility::conversions::to_string_t(U("RESOURCEFUL")))
        return FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_RESOURCEFUL;
    if (val == utility::conversions::to_string_t(U("FLEXIBLE")))
        return FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_FLEXIBLE;
    if (val == utility::conversions::to_string_t(U("COOPERATIVE")))
        return FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_COOPERATIVE;
    if (val == utility::conversions::to_string_t(U("UNITED")))
        return FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_UNITED;
    if (val == utility::conversions::to_string_t(U("STRATEGIC")))
        return FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_STRATEGIC;
    if (val == utility::conversions::to_string_t(U("INTELLIGENT")))
        return FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_INTELLIGENT;
    if (val == utility::conversions::to_string_t(U("RESEARCH_FOCUSED")))
        return FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_RESEARCH_FOCUSED;
    if (val == utility::conversions::to_string_t(U("COLLABORATIVE")))
        return FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_COLLABORATIVE;
    if (val == utility::conversions::to_string_t(U("PROGRESSIVE")))
        return FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_PROGRESSIVE;
    if (val == utility::conversions::to_string_t(U("MILITARISTIC")))
        return FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_MILITARISTIC;
    if (val == utility::conversions::to_string_t(U("TECHNOLOGICALLY_ADVANCED")))
        return FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_TECHNOLOGICALLY_ADVANCED;
    if (val == utility::conversions::to_string_t(U("AGGRESSIVE")))
        return FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_AGGRESSIVE;
    if (val == utility::conversions::to_string_t(U("IMPERIALISTIC")))
        return FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_IMPERIALISTIC;
    if (val == utility::conversions::to_string_t(U("TREASURE_HUNTERS")))
        return FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_TREASURE_HUNTERS;
    if (val == utility::conversions::to_string_t(U("DEXTEROUS")))
        return FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_DEXTEROUS;
    if (val == utility::conversions::to_string_t(U("UNPREDICTABLE")))
        return FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_UNPREDICTABLE;
    if (val == utility::conversions::to_string_t(U("BRUTAL")))
        return FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_BRUTAL;
    if (val == utility::conversions::to_string_t(U("FLEETING")))
        return FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_FLEETING;
    if (val == utility::conversions::to_string_t(U("ADAPTABLE")))
        return FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_ADAPTABLE;
    if (val == utility::conversions::to_string_t(U("SELF_SUFFICIENT")))
        return FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_SELF_SUFFICIENT;
    if (val == utility::conversions::to_string_t(U("DEFENSIVE")))
        return FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_DEFENSIVE;
    if (val == utility::conversions::to_string_t(U("PROUD")))
        return FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_PROUD;
    if (val == utility::conversions::to_string_t(U("DIVERSE")))
        return FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_DIVERSE;
    if (val == utility::conversions::to_string_t(U("INDEPENDENT")))
        return FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_INDEPENDENT;
    if (val == utility::conversions::to_string_t(U("SELF_INTERESTED")))
        return FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_SELF_INTERESTED;
    if (val == utility::conversions::to_string_t(U("FRAGMENTED")))
        return FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_FRAGMENTED;
    if (val == utility::conversions::to_string_t(U("COMMERCIAL")))
        return FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_COMMERCIAL;
    if (val == utility::conversions::to_string_t(U("FREE_MARKETS")))
        return FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_FREE_MARKETS;
    if (val == utility::conversions::to_string_t(U("ENTREPRENEURIAL")))
        return FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_ENTREPRENEURIAL;
    return {};
}

EnumUnderlyingType fromEnum(FactionTraitSymbol::eFactionTraitSymbol e)
{
    switch (e)
    {
    case FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_BUREAUCRATIC:
        return U("BUREAUCRATIC");
    case FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_SECRETIVE:
        return U("SECRETIVE");
    case FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_CAPITALISTIC:
        return U("CAPITALISTIC");
    case FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_INDUSTRIOUS:
        return U("INDUSTRIOUS");
    case FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_PEACEFUL:
        return U("PEACEFUL");
    case FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_DISTRUSTFUL:
        return U("DISTRUSTFUL");
    case FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_WELCOMING:
        return U("WELCOMING");
    case FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_SMUGGLERS:
        return U("SMUGGLERS");
    case FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_SCAVENGERS:
        return U("SCAVENGERS");
    case FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_REBELLIOUS:
        return U("REBELLIOUS");
    case FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_EXILES:
        return U("EXILES");
    case FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_PIRATES:
        return U("PIRATES");
    case FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_RAIDERS:
        return U("RAIDERS");
    case FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_CLAN:
        return U("CLAN");
    case FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_GUILD:
        return U("GUILD");
    case FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_DOMINION:
        return U("DOMINION");
    case FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_FRINGE:
        return U("FRINGE");
    case FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_FORSAKEN:
        return U("FORSAKEN");
    case FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_ISOLATED:
        return U("ISOLATED");
    case FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_LOCALIZED:
        return U("LOCALIZED");
    case FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_ESTABLISHED:
        return U("ESTABLISHED");
    case FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_NOTABLE:
        return U("NOTABLE");
    case FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_DOMINANT:
        return U("DOMINANT");
    case FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_INESCAPABLE:
        return U("INESCAPABLE");
    case FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_INNOVATIVE:
        return U("INNOVATIVE");
    case FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_BOLD:
        return U("BOLD");
    case FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_VISIONARY:
        return U("VISIONARY");
    case FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_CURIOUS:
        return U("CURIOUS");
    case FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_DARING:
        return U("DARING");
    case FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_EXPLORATORY:
        return U("EXPLORATORY");
    case FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_RESOURCEFUL:
        return U("RESOURCEFUL");
    case FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_FLEXIBLE:
        return U("FLEXIBLE");
    case FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_COOPERATIVE:
        return U("COOPERATIVE");
    case FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_UNITED:
        return U("UNITED");
    case FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_STRATEGIC:
        return U("STRATEGIC");
    case FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_INTELLIGENT:
        return U("INTELLIGENT");
    case FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_RESEARCH_FOCUSED:
        return U("RESEARCH_FOCUSED");
    case FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_COLLABORATIVE:
        return U("COLLABORATIVE");
    case FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_PROGRESSIVE:
        return U("PROGRESSIVE");
    case FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_MILITARISTIC:
        return U("MILITARISTIC");
    case FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_TECHNOLOGICALLY_ADVANCED:
        return U("TECHNOLOGICALLY_ADVANCED");
    case FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_AGGRESSIVE:
        return U("AGGRESSIVE");
    case FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_IMPERIALISTIC:
        return U("IMPERIALISTIC");
    case FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_TREASURE_HUNTERS:
        return U("TREASURE_HUNTERS");
    case FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_DEXTEROUS:
        return U("DEXTEROUS");
    case FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_UNPREDICTABLE:
        return U("UNPREDICTABLE");
    case FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_BRUTAL:
        return U("BRUTAL");
    case FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_FLEETING:
        return U("FLEETING");
    case FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_ADAPTABLE:
        return U("ADAPTABLE");
    case FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_SELF_SUFFICIENT:
        return U("SELF_SUFFICIENT");
    case FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_DEFENSIVE:
        return U("DEFENSIVE");
    case FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_PROUD:
        return U("PROUD");
    case FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_DIVERSE:
        return U("DIVERSE");
    case FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_INDEPENDENT:
        return U("INDEPENDENT");
    case FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_SELF_INTERESTED:
        return U("SELF_INTERESTED");
    case FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_FRAGMENTED:
        return U("FRAGMENTED");
    case FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_COMMERCIAL:
        return U("COMMERCIAL");
    case FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_FREE_MARKETS:
        return U("FREE_MARKETS");
    case FactionTraitSymbol::eFactionTraitSymbol::FactionTraitSymbol_ENTREPRENEURIAL:
        return U("ENTREPRENEURIAL");
    default:
        break;
    }
    return {};
}
}

FactionTraitSymbol::FactionTraitSymbol()
{
}

FactionTraitSymbol::~FactionTraitSymbol()
{
}

void FactionTraitSymbol::validate()
{
    // TODO: implement validation
}

web::json::value FactionTraitSymbol::toJson() const
{
    auto val = fromEnum(m_value);
    return web::json::value(val);
}

bool FactionTraitSymbol::fromJson(const web::json::value& val)
{
    m_value = toEnum(val.as_string());
    return true;
}

void FactionTraitSymbol::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }

    auto e = fromEnum(m_value);
    multipart->add(ModelBase::toHttpContent(namePrefix, e));
}

bool FactionTraitSymbol::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }
    {
        EnumUnderlyingType e;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), e);
        if (ok)
        {
            auto v = toEnum(e);
            setValue(v);
        }
    }
    return ok;
}

FactionTraitSymbol::eFactionTraitSymbol FactionTraitSymbol::getValue() const
{
   return m_value;
}

void FactionTraitSymbol::setValue(FactionTraitSymbol::eFactionTraitSymbol const value)
{
   m_value = value;
}


}


