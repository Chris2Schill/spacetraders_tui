/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Get_status_200_response_leaderboards.h"

namespace models {



Get_status_200_response_leaderboards::Get_status_200_response_leaderboards()
{
    m_MostCreditsIsSet = false;
    m_MostSubmittedChartsIsSet = false;
}

Get_status_200_response_leaderboards::~Get_status_200_response_leaderboards()
{
}

void Get_status_200_response_leaderboards::validate()
{
    // TODO: implement validation
}

web::json::value Get_status_200_response_leaderboards::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_MostCreditsIsSet)
    {
        val[utility::conversions::to_string_t(U("mostCredits"))] = ModelBase::toJson(m_MostCredits);
    }
    if(m_MostSubmittedChartsIsSet)
    {
        val[utility::conversions::to_string_t(U("mostSubmittedCharts"))] = ModelBase::toJson(m_MostSubmittedCharts);
    }

    return val;
}

bool Get_status_200_response_leaderboards::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("mostCredits"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("mostCredits")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Get_status_200_response_leaderboards_mostCredits_inner>> refVal_setMostCredits;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMostCredits);
            setMostCredits(refVal_setMostCredits);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("mostSubmittedCharts"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("mostSubmittedCharts")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Get_status_200_response_leaderboards_mostSubmittedCharts_inner>> refVal_setMostSubmittedCharts;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMostSubmittedCharts);
            setMostSubmittedCharts(refVal_setMostSubmittedCharts);
        }
    }
    return ok;
}

void Get_status_200_response_leaderboards::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_MostCreditsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("mostCredits")), m_MostCredits));
    }
    if(m_MostSubmittedChartsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("mostSubmittedCharts")), m_MostSubmittedCharts));
    }
}

bool Get_status_200_response_leaderboards::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("mostCredits"))))
    {
        std::vector<std::shared_ptr<Get_status_200_response_leaderboards_mostCredits_inner>> refVal_setMostCredits;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("mostCredits"))), refVal_setMostCredits );
        setMostCredits(refVal_setMostCredits);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("mostSubmittedCharts"))))
    {
        std::vector<std::shared_ptr<Get_status_200_response_leaderboards_mostSubmittedCharts_inner>> refVal_setMostSubmittedCharts;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("mostSubmittedCharts"))), refVal_setMostSubmittedCharts );
        setMostSubmittedCharts(refVal_setMostSubmittedCharts);
    }
    return ok;
}

std::vector<std::shared_ptr<Get_status_200_response_leaderboards_mostCredits_inner>>& Get_status_200_response_leaderboards::getMostCredits()
{
    return m_MostCredits;
}

void Get_status_200_response_leaderboards::setMostCredits(const std::vector<std::shared_ptr<Get_status_200_response_leaderboards_mostCredits_inner>>& value)
{
    m_MostCredits = value;
    m_MostCreditsIsSet = true;
}

bool Get_status_200_response_leaderboards::mostCreditsIsSet() const
{
    return m_MostCreditsIsSet;
}

void Get_status_200_response_leaderboards::unsetMostCredits()
{
    m_MostCreditsIsSet = false;
}
std::vector<std::shared_ptr<Get_status_200_response_leaderboards_mostSubmittedCharts_inner>>& Get_status_200_response_leaderboards::getMostSubmittedCharts()
{
    return m_MostSubmittedCharts;
}

void Get_status_200_response_leaderboards::setMostSubmittedCharts(const std::vector<std::shared_ptr<Get_status_200_response_leaderboards_mostSubmittedCharts_inner>>& value)
{
    m_MostSubmittedCharts = value;
    m_MostSubmittedChartsIsSet = true;
}

bool Get_status_200_response_leaderboards::mostSubmittedChartsIsSet() const
{
    return m_MostSubmittedChartsIsSet;
}

void Get_status_200_response_leaderboards::unsetMostSubmittedCharts()
{
    m_MostSubmittedChartsIsSet = false;
}
}


