/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/WaypointTraitSymbol.h"

namespace models {


namespace
{
using EnumUnderlyingType = utility::string_t;

WaypointTraitSymbol::eWaypointTraitSymbol toEnum(const EnumUnderlyingType& val)
{
    if (val == utility::conversions::to_string_t(U("UNCHARTED")))
        return WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_UNCHARTED;
    if (val == utility::conversions::to_string_t(U("UNDER_CONSTRUCTION")))
        return WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_UNDER_CONSTRUCTION;
    if (val == utility::conversions::to_string_t(U("MARKETPLACE")))
        return WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_MARKETPLACE;
    if (val == utility::conversions::to_string_t(U("SHIPYARD")))
        return WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_SHIPYARD;
    if (val == utility::conversions::to_string_t(U("OUTPOST")))
        return WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_OUTPOST;
    if (val == utility::conversions::to_string_t(U("SCATTERED_SETTLEMENTS")))
        return WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_SCATTERED_SETTLEMENTS;
    if (val == utility::conversions::to_string_t(U("SPRAWLING_CITIES")))
        return WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_SPRAWLING_CITIES;
    if (val == utility::conversions::to_string_t(U("MEGA_STRUCTURES")))
        return WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_MEGA_STRUCTURES;
    if (val == utility::conversions::to_string_t(U("PIRATE_BASE")))
        return WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_PIRATE_BASE;
    if (val == utility::conversions::to_string_t(U("OVERCROWDED")))
        return WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_OVERCROWDED;
    if (val == utility::conversions::to_string_t(U("HIGH_TECH")))
        return WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_HIGH_TECH;
    if (val == utility::conversions::to_string_t(U("CORRUPT")))
        return WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_CORRUPT;
    if (val == utility::conversions::to_string_t(U("BUREAUCRATIC")))
        return WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_BUREAUCRATIC;
    if (val == utility::conversions::to_string_t(U("TRADING_HUB")))
        return WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_TRADING_HUB;
    if (val == utility::conversions::to_string_t(U("INDUSTRIAL")))
        return WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_INDUSTRIAL;
    if (val == utility::conversions::to_string_t(U("BLACK_MARKET")))
        return WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_BLACK_MARKET;
    if (val == utility::conversions::to_string_t(U("RESEARCH_FACILITY")))
        return WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_RESEARCH_FACILITY;
    if (val == utility::conversions::to_string_t(U("MILITARY_BASE")))
        return WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_MILITARY_BASE;
    if (val == utility::conversions::to_string_t(U("SURVEILLANCE_OUTPOST")))
        return WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_SURVEILLANCE_OUTPOST;
    if (val == utility::conversions::to_string_t(U("EXPLORATION_OUTPOST")))
        return WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_EXPLORATION_OUTPOST;
    if (val == utility::conversions::to_string_t(U("MINERAL_DEPOSITS")))
        return WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_MINERAL_DEPOSITS;
    if (val == utility::conversions::to_string_t(U("COMMON_METAL_DEPOSITS")))
        return WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_COMMON_METAL_DEPOSITS;
    if (val == utility::conversions::to_string_t(U("PRECIOUS_METAL_DEPOSITS")))
        return WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_PRECIOUS_METAL_DEPOSITS;
    if (val == utility::conversions::to_string_t(U("RARE_METAL_DEPOSITS")))
        return WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_RARE_METAL_DEPOSITS;
    if (val == utility::conversions::to_string_t(U("METHANE_POOLS")))
        return WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_METHANE_POOLS;
    if (val == utility::conversions::to_string_t(U("ICE_CRYSTALS")))
        return WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_ICE_CRYSTALS;
    if (val == utility::conversions::to_string_t(U("EXPLOSIVE_GASES")))
        return WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_EXPLOSIVE_GASES;
    if (val == utility::conversions::to_string_t(U("STRONG_MAGNETOSPHERE")))
        return WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_STRONG_MAGNETOSPHERE;
    if (val == utility::conversions::to_string_t(U("VIBRANT_AURORAS")))
        return WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_VIBRANT_AURORAS;
    if (val == utility::conversions::to_string_t(U("SALT_FLATS")))
        return WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_SALT_FLATS;
    if (val == utility::conversions::to_string_t(U("CANYONS")))
        return WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_CANYONS;
    if (val == utility::conversions::to_string_t(U("PERPETUAL_DAYLIGHT")))
        return WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_PERPETUAL_DAYLIGHT;
    if (val == utility::conversions::to_string_t(U("PERPETUAL_OVERCAST")))
        return WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_PERPETUAL_OVERCAST;
    if (val == utility::conversions::to_string_t(U("DRY_SEABEDS")))
        return WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_DRY_SEABEDS;
    if (val == utility::conversions::to_string_t(U("MAGMA_SEAS")))
        return WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_MAGMA_SEAS;
    if (val == utility::conversions::to_string_t(U("SUPERVOLCANOES")))
        return WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_SUPERVOLCANOES;
    if (val == utility::conversions::to_string_t(U("ASH_CLOUDS")))
        return WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_ASH_CLOUDS;
    if (val == utility::conversions::to_string_t(U("VAST_RUINS")))
        return WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_VAST_RUINS;
    if (val == utility::conversions::to_string_t(U("MUTATED_FLORA")))
        return WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_MUTATED_FLORA;
    if (val == utility::conversions::to_string_t(U("TERRAFORMED")))
        return WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_TERRAFORMED;
    if (val == utility::conversions::to_string_t(U("EXTREME_TEMPERATURES")))
        return WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_EXTREME_TEMPERATURES;
    if (val == utility::conversions::to_string_t(U("EXTREME_PRESSURE")))
        return WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_EXTREME_PRESSURE;
    if (val == utility::conversions::to_string_t(U("DIVERSE_LIFE")))
        return WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_DIVERSE_LIFE;
    if (val == utility::conversions::to_string_t(U("SCARCE_LIFE")))
        return WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_SCARCE_LIFE;
    if (val == utility::conversions::to_string_t(U("FOSSILS")))
        return WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_FOSSILS;
    if (val == utility::conversions::to_string_t(U("WEAK_GRAVITY")))
        return WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_WEAK_GRAVITY;
    if (val == utility::conversions::to_string_t(U("STRONG_GRAVITY")))
        return WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_STRONG_GRAVITY;
    if (val == utility::conversions::to_string_t(U("CRUSHING_GRAVITY")))
        return WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_CRUSHING_GRAVITY;
    if (val == utility::conversions::to_string_t(U("TOXIC_ATMOSPHERE")))
        return WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_TOXIC_ATMOSPHERE;
    if (val == utility::conversions::to_string_t(U("CORROSIVE_ATMOSPHERE")))
        return WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_CORROSIVE_ATMOSPHERE;
    if (val == utility::conversions::to_string_t(U("BREATHABLE_ATMOSPHERE")))
        return WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_BREATHABLE_ATMOSPHERE;
    if (val == utility::conversions::to_string_t(U("THIN_ATMOSPHERE")))
        return WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_THIN_ATMOSPHERE;
    if (val == utility::conversions::to_string_t(U("JOVIAN")))
        return WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_JOVIAN;
    if (val == utility::conversions::to_string_t(U("ROCKY")))
        return WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_ROCKY;
    if (val == utility::conversions::to_string_t(U("VOLCANIC")))
        return WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_VOLCANIC;
    if (val == utility::conversions::to_string_t(U("FROZEN")))
        return WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_FROZEN;
    if (val == utility::conversions::to_string_t(U("SWAMP")))
        return WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_SWAMP;
    if (val == utility::conversions::to_string_t(U("BARREN")))
        return WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_BARREN;
    if (val == utility::conversions::to_string_t(U("TEMPERATE")))
        return WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_TEMPERATE;
    if (val == utility::conversions::to_string_t(U("JUNGLE")))
        return WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_JUNGLE;
    if (val == utility::conversions::to_string_t(U("OCEAN")))
        return WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_OCEAN;
    if (val == utility::conversions::to_string_t(U("RADIOACTIVE")))
        return WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_RADIOACTIVE;
    if (val == utility::conversions::to_string_t(U("MICRO_GRAVITY_ANOMALIES")))
        return WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_MICRO_GRAVITY_ANOMALIES;
    if (val == utility::conversions::to_string_t(U("DEBRIS_CLUSTER")))
        return WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_DEBRIS_CLUSTER;
    if (val == utility::conversions::to_string_t(U("DEEP_CRATERS")))
        return WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_DEEP_CRATERS;
    if (val == utility::conversions::to_string_t(U("SHALLOW_CRATERS")))
        return WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_SHALLOW_CRATERS;
    if (val == utility::conversions::to_string_t(U("UNSTABLE_COMPOSITION")))
        return WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_UNSTABLE_COMPOSITION;
    if (val == utility::conversions::to_string_t(U("HOLLOWED_INTERIOR")))
        return WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_HOLLOWED_INTERIOR;
    if (val == utility::conversions::to_string_t(U("STRIPPED")))
        return WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_STRIPPED;
    return {};
}

EnumUnderlyingType fromEnum(WaypointTraitSymbol::eWaypointTraitSymbol e)
{
    switch (e)
    {
    case WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_UNCHARTED:
        return U("UNCHARTED");
    case WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_UNDER_CONSTRUCTION:
        return U("UNDER_CONSTRUCTION");
    case WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_MARKETPLACE:
        return U("MARKETPLACE");
    case WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_SHIPYARD:
        return U("SHIPYARD");
    case WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_OUTPOST:
        return U("OUTPOST");
    case WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_SCATTERED_SETTLEMENTS:
        return U("SCATTERED_SETTLEMENTS");
    case WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_SPRAWLING_CITIES:
        return U("SPRAWLING_CITIES");
    case WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_MEGA_STRUCTURES:
        return U("MEGA_STRUCTURES");
    case WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_PIRATE_BASE:
        return U("PIRATE_BASE");
    case WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_OVERCROWDED:
        return U("OVERCROWDED");
    case WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_HIGH_TECH:
        return U("HIGH_TECH");
    case WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_CORRUPT:
        return U("CORRUPT");
    case WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_BUREAUCRATIC:
        return U("BUREAUCRATIC");
    case WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_TRADING_HUB:
        return U("TRADING_HUB");
    case WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_INDUSTRIAL:
        return U("INDUSTRIAL");
    case WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_BLACK_MARKET:
        return U("BLACK_MARKET");
    case WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_RESEARCH_FACILITY:
        return U("RESEARCH_FACILITY");
    case WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_MILITARY_BASE:
        return U("MILITARY_BASE");
    case WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_SURVEILLANCE_OUTPOST:
        return U("SURVEILLANCE_OUTPOST");
    case WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_EXPLORATION_OUTPOST:
        return U("EXPLORATION_OUTPOST");
    case WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_MINERAL_DEPOSITS:
        return U("MINERAL_DEPOSITS");
    case WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_COMMON_METAL_DEPOSITS:
        return U("COMMON_METAL_DEPOSITS");
    case WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_PRECIOUS_METAL_DEPOSITS:
        return U("PRECIOUS_METAL_DEPOSITS");
    case WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_RARE_METAL_DEPOSITS:
        return U("RARE_METAL_DEPOSITS");
    case WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_METHANE_POOLS:
        return U("METHANE_POOLS");
    case WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_ICE_CRYSTALS:
        return U("ICE_CRYSTALS");
    case WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_EXPLOSIVE_GASES:
        return U("EXPLOSIVE_GASES");
    case WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_STRONG_MAGNETOSPHERE:
        return U("STRONG_MAGNETOSPHERE");
    case WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_VIBRANT_AURORAS:
        return U("VIBRANT_AURORAS");
    case WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_SALT_FLATS:
        return U("SALT_FLATS");
    case WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_CANYONS:
        return U("CANYONS");
    case WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_PERPETUAL_DAYLIGHT:
        return U("PERPETUAL_DAYLIGHT");
    case WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_PERPETUAL_OVERCAST:
        return U("PERPETUAL_OVERCAST");
    case WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_DRY_SEABEDS:
        return U("DRY_SEABEDS");
    case WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_MAGMA_SEAS:
        return U("MAGMA_SEAS");
    case WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_SUPERVOLCANOES:
        return U("SUPERVOLCANOES");
    case WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_ASH_CLOUDS:
        return U("ASH_CLOUDS");
    case WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_VAST_RUINS:
        return U("VAST_RUINS");
    case WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_MUTATED_FLORA:
        return U("MUTATED_FLORA");
    case WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_TERRAFORMED:
        return U("TERRAFORMED");
    case WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_EXTREME_TEMPERATURES:
        return U("EXTREME_TEMPERATURES");
    case WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_EXTREME_PRESSURE:
        return U("EXTREME_PRESSURE");
    case WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_DIVERSE_LIFE:
        return U("DIVERSE_LIFE");
    case WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_SCARCE_LIFE:
        return U("SCARCE_LIFE");
    case WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_FOSSILS:
        return U("FOSSILS");
    case WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_WEAK_GRAVITY:
        return U("WEAK_GRAVITY");
    case WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_STRONG_GRAVITY:
        return U("STRONG_GRAVITY");
    case WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_CRUSHING_GRAVITY:
        return U("CRUSHING_GRAVITY");
    case WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_TOXIC_ATMOSPHERE:
        return U("TOXIC_ATMOSPHERE");
    case WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_CORROSIVE_ATMOSPHERE:
        return U("CORROSIVE_ATMOSPHERE");
    case WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_BREATHABLE_ATMOSPHERE:
        return U("BREATHABLE_ATMOSPHERE");
    case WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_THIN_ATMOSPHERE:
        return U("THIN_ATMOSPHERE");
    case WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_JOVIAN:
        return U("JOVIAN");
    case WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_ROCKY:
        return U("ROCKY");
    case WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_VOLCANIC:
        return U("VOLCANIC");
    case WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_FROZEN:
        return U("FROZEN");
    case WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_SWAMP:
        return U("SWAMP");
    case WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_BARREN:
        return U("BARREN");
    case WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_TEMPERATE:
        return U("TEMPERATE");
    case WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_JUNGLE:
        return U("JUNGLE");
    case WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_OCEAN:
        return U("OCEAN");
    case WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_RADIOACTIVE:
        return U("RADIOACTIVE");
    case WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_MICRO_GRAVITY_ANOMALIES:
        return U("MICRO_GRAVITY_ANOMALIES");
    case WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_DEBRIS_CLUSTER:
        return U("DEBRIS_CLUSTER");
    case WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_DEEP_CRATERS:
        return U("DEEP_CRATERS");
    case WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_SHALLOW_CRATERS:
        return U("SHALLOW_CRATERS");
    case WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_UNSTABLE_COMPOSITION:
        return U("UNSTABLE_COMPOSITION");
    case WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_HOLLOWED_INTERIOR:
        return U("HOLLOWED_INTERIOR");
    case WaypointTraitSymbol::eWaypointTraitSymbol::WaypointTraitSymbol_STRIPPED:
        return U("STRIPPED");
    default:
        break;
    }
    return {};
}
}

WaypointTraitSymbol::WaypointTraitSymbol()
{
}

WaypointTraitSymbol::~WaypointTraitSymbol()
{
}

void WaypointTraitSymbol::validate()
{
    // TODO: implement validation
}

web::json::value WaypointTraitSymbol::toJson() const
{
    auto val = fromEnum(m_value);
    return web::json::value(val);
}

bool WaypointTraitSymbol::fromJson(const web::json::value& val)
{
    m_value = toEnum(val.as_string());
    return true;
}

void WaypointTraitSymbol::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }

    auto e = fromEnum(m_value);
    multipart->add(ModelBase::toHttpContent(namePrefix, e));
}

bool WaypointTraitSymbol::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }
    {
        EnumUnderlyingType e;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), e);
        if (ok)
        {
            auto v = toEnum(e);
            setValue(v);
        }
    }
    return ok;
}

WaypointTraitSymbol::eWaypointTraitSymbol WaypointTraitSymbol::getValue() const
{
   return m_value;
}

void WaypointTraitSymbol::setValue(WaypointTraitSymbol::eWaypointTraitSymbol const value)
{
   m_value = value;
}


}


