/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ShipFuel.h"

namespace models {



ShipFuel::ShipFuel()
{
    m_Current = 0;
    m_CurrentIsSet = false;
    m_Capacity = 0;
    m_CapacityIsSet = false;
    m_ConsumedIsSet = false;
}

ShipFuel::~ShipFuel()
{
}

void ShipFuel::validate()
{
    // TODO: implement validation
}

web::json::value ShipFuel::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_CurrentIsSet)
    {
        val[utility::conversions::to_string_t(U("current"))] = ModelBase::toJson(m_Current);
    }
    if(m_CapacityIsSet)
    {
        val[utility::conversions::to_string_t(U("capacity"))] = ModelBase::toJson(m_Capacity);
    }
    if(m_ConsumedIsSet)
    {
        val[utility::conversions::to_string_t(U("consumed"))] = ModelBase::toJson(m_Consumed);
    }

    return val;
}

bool ShipFuel::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("current"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("current")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCurrent;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCurrent);
            setCurrent(refVal_setCurrent);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("capacity"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("capacity")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCapacity;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCapacity);
            setCapacity(refVal_setCapacity);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("consumed"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("consumed")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ShipFuel_consumed> refVal_setConsumed;
            ok &= ModelBase::fromJson(fieldValue, refVal_setConsumed);
            setConsumed(refVal_setConsumed);
        }
    }
    return ok;
}

void ShipFuel::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_CurrentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("current")), m_Current));
    }
    if(m_CapacityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("capacity")), m_Capacity));
    }
    if(m_ConsumedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("consumed")), m_Consumed));
    }
}

bool ShipFuel::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("current"))))
    {
        int32_t refVal_setCurrent;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("current"))), refVal_setCurrent );
        setCurrent(refVal_setCurrent);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("capacity"))))
    {
        int32_t refVal_setCapacity;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("capacity"))), refVal_setCapacity );
        setCapacity(refVal_setCapacity);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("consumed"))))
    {
        std::shared_ptr<ShipFuel_consumed> refVal_setConsumed;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("consumed"))), refVal_setConsumed );
        setConsumed(refVal_setConsumed);
    }
    return ok;
}

int32_t ShipFuel::getCurrent() const
{
    return m_Current;
}

void ShipFuel::setCurrent(int32_t value)
{
    m_Current = value;
    m_CurrentIsSet = true;
}

bool ShipFuel::currentIsSet() const
{
    return m_CurrentIsSet;
}

void ShipFuel::unsetCurrent()
{
    m_CurrentIsSet = false;
}
int32_t ShipFuel::getCapacity() const
{
    return m_Capacity;
}

void ShipFuel::setCapacity(int32_t value)
{
    m_Capacity = value;
    m_CapacityIsSet = true;
}

bool ShipFuel::capacityIsSet() const
{
    return m_CapacityIsSet;
}

void ShipFuel::unsetCapacity()
{
    m_CapacityIsSet = false;
}
std::shared_ptr<ShipFuel_consumed> ShipFuel::getConsumed() const
{
    return m_Consumed;
}

void ShipFuel::setConsumed(const std::shared_ptr<ShipFuel_consumed>& value)
{
    m_Consumed = value;
    m_ConsumedIsSet = true;
}

bool ShipFuel::consumedIsSet() const
{
    return m_ConsumedIsSet;
}

void ShipFuel::unsetConsumed()
{
    m_ConsumedIsSet = false;
}
}


