/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ScannedShip.h"

namespace models {



ScannedShip::ScannedShip()
{
    m_Symbol = utility::conversions::to_string_t("");
    m_SymbolIsSet = false;
    m_RegistrationIsSet = false;
    m_NavIsSet = false;
    m_FrameIsSet = false;
    m_ReactorIsSet = false;
    m_EngineIsSet = false;
    m_MountsIsSet = false;
}

ScannedShip::~ScannedShip()
{
}

void ScannedShip::validate()
{
    // TODO: implement validation
}

web::json::value ScannedShip::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_SymbolIsSet)
    {
        val[utility::conversions::to_string_t(U("symbol"))] = ModelBase::toJson(m_Symbol);
    }
    if(m_RegistrationIsSet)
    {
        val[utility::conversions::to_string_t(U("registration"))] = ModelBase::toJson(m_Registration);
    }
    if(m_NavIsSet)
    {
        val[utility::conversions::to_string_t(U("nav"))] = ModelBase::toJson(m_Nav);
    }
    if(m_FrameIsSet)
    {
        val[utility::conversions::to_string_t(U("frame"))] = ModelBase::toJson(m_Frame);
    }
    if(m_ReactorIsSet)
    {
        val[utility::conversions::to_string_t(U("reactor"))] = ModelBase::toJson(m_Reactor);
    }
    if(m_EngineIsSet)
    {
        val[utility::conversions::to_string_t(U("engine"))] = ModelBase::toJson(m_Engine);
    }
    if(m_MountsIsSet)
    {
        val[utility::conversions::to_string_t(U("mounts"))] = ModelBase::toJson(m_Mounts);
    }

    return val;
}

bool ScannedShip::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("symbol"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("symbol")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSymbol;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSymbol);
            setSymbol(refVal_setSymbol);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("registration"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("registration")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ShipRegistration> refVal_setRegistration;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRegistration);
            setRegistration(refVal_setRegistration);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("nav"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("nav")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ShipNav> refVal_setNav;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNav);
            setNav(refVal_setNav);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("frame"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("frame")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ScannedShip_frame> refVal_setFrame;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFrame);
            setFrame(refVal_setFrame);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("reactor"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("reactor")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ScannedShip_reactor> refVal_setReactor;
            ok &= ModelBase::fromJson(fieldValue, refVal_setReactor);
            setReactor(refVal_setReactor);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("engine"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("engine")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ScannedShip_engine> refVal_setEngine;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEngine);
            setEngine(refVal_setEngine);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("mounts"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("mounts")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<ScannedShip_mounts_inner>> refVal_setMounts;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMounts);
            setMounts(refVal_setMounts);
        }
    }
    return ok;
}

void ScannedShip::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_SymbolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("symbol")), m_Symbol));
    }
    if(m_RegistrationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("registration")), m_Registration));
    }
    if(m_NavIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("nav")), m_Nav));
    }
    if(m_FrameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("frame")), m_Frame));
    }
    if(m_ReactorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("reactor")), m_Reactor));
    }
    if(m_EngineIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("engine")), m_Engine));
    }
    if(m_MountsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("mounts")), m_Mounts));
    }
}

bool ScannedShip::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("symbol"))))
    {
        utility::string_t refVal_setSymbol;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("symbol"))), refVal_setSymbol );
        setSymbol(refVal_setSymbol);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("registration"))))
    {
        std::shared_ptr<ShipRegistration> refVal_setRegistration;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("registration"))), refVal_setRegistration );
        setRegistration(refVal_setRegistration);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("nav"))))
    {
        std::shared_ptr<ShipNav> refVal_setNav;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("nav"))), refVal_setNav );
        setNav(refVal_setNav);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("frame"))))
    {
        std::shared_ptr<ScannedShip_frame> refVal_setFrame;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("frame"))), refVal_setFrame );
        setFrame(refVal_setFrame);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("reactor"))))
    {
        std::shared_ptr<ScannedShip_reactor> refVal_setReactor;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("reactor"))), refVal_setReactor );
        setReactor(refVal_setReactor);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("engine"))))
    {
        std::shared_ptr<ScannedShip_engine> refVal_setEngine;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("engine"))), refVal_setEngine );
        setEngine(refVal_setEngine);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("mounts"))))
    {
        std::vector<std::shared_ptr<ScannedShip_mounts_inner>> refVal_setMounts;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("mounts"))), refVal_setMounts );
        setMounts(refVal_setMounts);
    }
    return ok;
}

utility::string_t ScannedShip::getSymbol() const
{
    return m_Symbol;
}

void ScannedShip::setSymbol(const utility::string_t& value)
{
    m_Symbol = value;
    m_SymbolIsSet = true;
}

bool ScannedShip::symbolIsSet() const
{
    return m_SymbolIsSet;
}

void ScannedShip::unsetSymbol()
{
    m_SymbolIsSet = false;
}
std::shared_ptr<ShipRegistration> ScannedShip::getRegistration() const
{
    return m_Registration;
}

void ScannedShip::setRegistration(const std::shared_ptr<ShipRegistration>& value)
{
    m_Registration = value;
    m_RegistrationIsSet = true;
}

bool ScannedShip::registrationIsSet() const
{
    return m_RegistrationIsSet;
}

void ScannedShip::unsetRegistration()
{
    m_RegistrationIsSet = false;
}
std::shared_ptr<ShipNav> ScannedShip::getNav() const
{
    return m_Nav;
}

void ScannedShip::setNav(const std::shared_ptr<ShipNav>& value)
{
    m_Nav = value;
    m_NavIsSet = true;
}

bool ScannedShip::navIsSet() const
{
    return m_NavIsSet;
}

void ScannedShip::unsetNav()
{
    m_NavIsSet = false;
}
std::shared_ptr<ScannedShip_frame> ScannedShip::getFrame() const
{
    return m_Frame;
}

void ScannedShip::setFrame(const std::shared_ptr<ScannedShip_frame>& value)
{
    m_Frame = value;
    m_FrameIsSet = true;
}

bool ScannedShip::frameIsSet() const
{
    return m_FrameIsSet;
}

void ScannedShip::unsetFrame()
{
    m_FrameIsSet = false;
}
std::shared_ptr<ScannedShip_reactor> ScannedShip::getReactor() const
{
    return m_Reactor;
}

void ScannedShip::setReactor(const std::shared_ptr<ScannedShip_reactor>& value)
{
    m_Reactor = value;
    m_ReactorIsSet = true;
}

bool ScannedShip::reactorIsSet() const
{
    return m_ReactorIsSet;
}

void ScannedShip::unsetReactor()
{
    m_ReactorIsSet = false;
}
std::shared_ptr<ScannedShip_engine> ScannedShip::getEngine() const
{
    return m_Engine;
}

void ScannedShip::setEngine(const std::shared_ptr<ScannedShip_engine>& value)
{
    m_Engine = value;
    m_EngineIsSet = true;
}

bool ScannedShip::engineIsSet() const
{
    return m_EngineIsSet;
}

void ScannedShip::unsetEngine()
{
    m_EngineIsSet = false;
}
std::vector<std::shared_ptr<ScannedShip_mounts_inner>>& ScannedShip::getMounts()
{
    return m_Mounts;
}

void ScannedShip::setMounts(const std::vector<std::shared_ptr<ScannedShip_mounts_inner>>& value)
{
    m_Mounts = value;
    m_MountsIsSet = true;
}

bool ScannedShip::mountsIsSet() const
{
    return m_MountsIsSet;
}

void ScannedShip::unsetMounts()
{
    m_MountsIsSet = false;
}
}


