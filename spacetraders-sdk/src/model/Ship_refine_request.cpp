/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Ship_refine_request.h"

namespace models {



Ship_refine_request::Ship_refine_request()
{
    m_Produce = utility::conversions::to_string_t("");
    m_ProduceIsSet = false;
}

Ship_refine_request::~Ship_refine_request()
{
}

void Ship_refine_request::validate()
{
    // TODO: implement validation
}

web::json::value Ship_refine_request::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ProduceIsSet)
    {
        val[utility::conversions::to_string_t(U("produce"))] = ModelBase::toJson(m_Produce);
    }

    return val;
}

bool Ship_refine_request::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("produce"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("produce")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setProduce;
            ok &= ModelBase::fromJson(fieldValue, refVal_setProduce);
            setProduce(refVal_setProduce);
        }
    }
    return ok;
}

void Ship_refine_request::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_ProduceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("produce")), m_Produce));
    }
}

bool Ship_refine_request::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("produce"))))
    {
        utility::string_t refVal_setProduce;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("produce"))), refVal_setProduce );
        setProduce(refVal_setProduce);
    }
    return ok;
}

utility::string_t Ship_refine_request::getProduce() const
{
    return m_Produce;
}

void Ship_refine_request::setProduce(const utility::string_t& value)
{
    m_Produce = value;
    m_ProduceIsSet = true;
}

bool Ship_refine_request::produceIsSet() const
{
    return m_ProduceIsSet;
}

void Ship_refine_request::unsetProduce()
{
    m_ProduceIsSet = false;
}
}


