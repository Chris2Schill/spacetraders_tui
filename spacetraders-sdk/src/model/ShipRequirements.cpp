/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ShipRequirements.h"

namespace models {



ShipRequirements::ShipRequirements()
{
    m_Power = 0;
    m_PowerIsSet = false;
    m_Crew = 0;
    m_CrewIsSet = false;
    m_Slots = 0;
    m_SlotsIsSet = false;
}

ShipRequirements::~ShipRequirements()
{
}

void ShipRequirements::validate()
{
    // TODO: implement validation
}

web::json::value ShipRequirements::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_PowerIsSet)
    {
        val[utility::conversions::to_string_t(U("power"))] = ModelBase::toJson(m_Power);
    }
    if(m_CrewIsSet)
    {
        val[utility::conversions::to_string_t(U("crew"))] = ModelBase::toJson(m_Crew);
    }
    if(m_SlotsIsSet)
    {
        val[utility::conversions::to_string_t(U("slots"))] = ModelBase::toJson(m_Slots);
    }

    return val;
}

bool ShipRequirements::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("power"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("power")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setPower;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPower);
            setPower(refVal_setPower);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("crew"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("crew")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCrew;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCrew);
            setCrew(refVal_setCrew);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("slots"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("slots")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setSlots;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSlots);
            setSlots(refVal_setSlots);
        }
    }
    return ok;
}

void ShipRequirements::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_PowerIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("power")), m_Power));
    }
    if(m_CrewIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("crew")), m_Crew));
    }
    if(m_SlotsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("slots")), m_Slots));
    }
}

bool ShipRequirements::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("power"))))
    {
        int32_t refVal_setPower;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("power"))), refVal_setPower );
        setPower(refVal_setPower);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("crew"))))
    {
        int32_t refVal_setCrew;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("crew"))), refVal_setCrew );
        setCrew(refVal_setCrew);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("slots"))))
    {
        int32_t refVal_setSlots;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("slots"))), refVal_setSlots );
        setSlots(refVal_setSlots);
    }
    return ok;
}

int32_t ShipRequirements::getPower() const
{
    return m_Power;
}

void ShipRequirements::setPower(int32_t value)
{
    m_Power = value;
    m_PowerIsSet = true;
}

bool ShipRequirements::powerIsSet() const
{
    return m_PowerIsSet;
}

void ShipRequirements::unsetPower()
{
    m_PowerIsSet = false;
}
int32_t ShipRequirements::getCrew() const
{
    return m_Crew;
}

void ShipRequirements::setCrew(int32_t value)
{
    m_Crew = value;
    m_CrewIsSet = true;
}

bool ShipRequirements::crewIsSet() const
{
    return m_CrewIsSet;
}

void ShipRequirements::unsetCrew()
{
    m_CrewIsSet = false;
}
int32_t ShipRequirements::getSlots() const
{
    return m_Slots;
}

void ShipRequirements::setSlots(int32_t value)
{
    m_Slots = value;
    m_SlotsIsSet = true;
}

bool ShipRequirements::slotsIsSet() const
{
    return m_SlotsIsSet;
}

void ShipRequirements::unsetSlots()
{
    m_SlotsIsSet = false;
}
}


