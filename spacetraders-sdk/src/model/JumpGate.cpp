/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/JumpGate.h"

namespace models {



JumpGate::JumpGate()
{
    m_Symbol = utility::conversions::to_string_t("");
    m_SymbolIsSet = false;
    m_ConnectionsIsSet = false;
}

JumpGate::~JumpGate()
{
}

void JumpGate::validate()
{
    // TODO: implement validation
}

web::json::value JumpGate::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_SymbolIsSet)
    {
        val[utility::conversions::to_string_t(U("symbol"))] = ModelBase::toJson(m_Symbol);
    }
    if(m_ConnectionsIsSet)
    {
        val[utility::conversions::to_string_t(U("connections"))] = ModelBase::toJson(m_Connections);
    }

    return val;
}

bool JumpGate::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("symbol"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("symbol")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSymbol;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSymbol);
            setSymbol(refVal_setSymbol);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("connections"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("connections")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setConnections;
            ok &= ModelBase::fromJson(fieldValue, refVal_setConnections);
            setConnections(refVal_setConnections);
        }
    }
    return ok;
}

void JumpGate::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_SymbolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("symbol")), m_Symbol));
    }
    if(m_ConnectionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("connections")), m_Connections));
    }
}

bool JumpGate::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("symbol"))))
    {
        utility::string_t refVal_setSymbol;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("symbol"))), refVal_setSymbol );
        setSymbol(refVal_setSymbol);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("connections"))))
    {
        std::vector<utility::string_t> refVal_setConnections;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("connections"))), refVal_setConnections );
        setConnections(refVal_setConnections);
    }
    return ok;
}

utility::string_t JumpGate::getSymbol() const
{
    return m_Symbol;
}

void JumpGate::setSymbol(const utility::string_t& value)
{
    m_Symbol = value;
    m_SymbolIsSet = true;
}

bool JumpGate::symbolIsSet() const
{
    return m_SymbolIsSet;
}

void JumpGate::unsetSymbol()
{
    m_SymbolIsSet = false;
}
std::vector<utility::string_t>& JumpGate::getConnections()
{
    return m_Connections;
}

void JumpGate::setConnections(const std::vector<utility::string_t>& value)
{
    m_Connections = value;
    m_ConnectionsIsSet = true;
}

bool JumpGate::connectionsIsSet() const
{
    return m_ConnectionsIsSet;
}

void JumpGate::unsetConnections()
{
    m_ConnectionsIsSet = false;
}
}


