/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Get_status_200_response_stats.h"

namespace models {



Get_status_200_response_stats::Get_status_200_response_stats()
{
    m_Agents = 0;
    m_AgentsIsSet = false;
    m_Ships = 0;
    m_ShipsIsSet = false;
    m_Systems = 0;
    m_SystemsIsSet = false;
    m_Waypoints = 0;
    m_WaypointsIsSet = false;
}

Get_status_200_response_stats::~Get_status_200_response_stats()
{
}

void Get_status_200_response_stats::validate()
{
    // TODO: implement validation
}

web::json::value Get_status_200_response_stats::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_AgentsIsSet)
    {
        val[utility::conversions::to_string_t(U("agents"))] = ModelBase::toJson(m_Agents);
    }
    if(m_ShipsIsSet)
    {
        val[utility::conversions::to_string_t(U("ships"))] = ModelBase::toJson(m_Ships);
    }
    if(m_SystemsIsSet)
    {
        val[utility::conversions::to_string_t(U("systems"))] = ModelBase::toJson(m_Systems);
    }
    if(m_WaypointsIsSet)
    {
        val[utility::conversions::to_string_t(U("waypoints"))] = ModelBase::toJson(m_Waypoints);
    }

    return val;
}

bool Get_status_200_response_stats::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("agents"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("agents")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setAgents;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAgents);
            setAgents(refVal_setAgents);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ships"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ships")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setShips;
            ok &= ModelBase::fromJson(fieldValue, refVal_setShips);
            setShips(refVal_setShips);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("systems"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("systems")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setSystems;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSystems);
            setSystems(refVal_setSystems);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("waypoints"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("waypoints")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setWaypoints;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWaypoints);
            setWaypoints(refVal_setWaypoints);
        }
    }
    return ok;
}

void Get_status_200_response_stats::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_AgentsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("agents")), m_Agents));
    }
    if(m_ShipsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ships")), m_Ships));
    }
    if(m_SystemsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("systems")), m_Systems));
    }
    if(m_WaypointsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("waypoints")), m_Waypoints));
    }
}

bool Get_status_200_response_stats::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("agents"))))
    {
        int32_t refVal_setAgents;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("agents"))), refVal_setAgents );
        setAgents(refVal_setAgents);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ships"))))
    {
        int32_t refVal_setShips;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ships"))), refVal_setShips );
        setShips(refVal_setShips);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("systems"))))
    {
        int32_t refVal_setSystems;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("systems"))), refVal_setSystems );
        setSystems(refVal_setSystems);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("waypoints"))))
    {
        int32_t refVal_setWaypoints;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("waypoints"))), refVal_setWaypoints );
        setWaypoints(refVal_setWaypoints);
    }
    return ok;
}

int32_t Get_status_200_response_stats::getAgents() const
{
    return m_Agents;
}

void Get_status_200_response_stats::setAgents(int32_t value)
{
    m_Agents = value;
    m_AgentsIsSet = true;
}

bool Get_status_200_response_stats::agentsIsSet() const
{
    return m_AgentsIsSet;
}

void Get_status_200_response_stats::unsetAgents()
{
    m_AgentsIsSet = false;
}
int32_t Get_status_200_response_stats::getShips() const
{
    return m_Ships;
}

void Get_status_200_response_stats::setShips(int32_t value)
{
    m_Ships = value;
    m_ShipsIsSet = true;
}

bool Get_status_200_response_stats::shipsIsSet() const
{
    return m_ShipsIsSet;
}

void Get_status_200_response_stats::unsetShips()
{
    m_ShipsIsSet = false;
}
int32_t Get_status_200_response_stats::getSystems() const
{
    return m_Systems;
}

void Get_status_200_response_stats::setSystems(int32_t value)
{
    m_Systems = value;
    m_SystemsIsSet = true;
}

bool Get_status_200_response_stats::systemsIsSet() const
{
    return m_SystemsIsSet;
}

void Get_status_200_response_stats::unsetSystems()
{
    m_SystemsIsSet = false;
}
int32_t Get_status_200_response_stats::getWaypoints() const
{
    return m_Waypoints;
}

void Get_status_200_response_stats::setWaypoints(int32_t value)
{
    m_Waypoints = value;
    m_WaypointsIsSet = true;
}

bool Get_status_200_response_stats::waypointsIsSet() const
{
    return m_WaypointsIsSet;
}

void Get_status_200_response_stats::unsetWaypoints()
{
    m_WaypointsIsSet = false;
}
}


