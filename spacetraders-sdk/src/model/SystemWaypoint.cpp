/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/SystemWaypoint.h"

namespace models {



SystemWaypoint::SystemWaypoint()
{
    m_Symbol = utility::conversions::to_string_t("");
    m_SymbolIsSet = false;
    m_TypeIsSet = false;
    m_x = 0;
    m_xIsSet = false;
    m_y = 0;
    m_yIsSet = false;
    m_OrbitalsIsSet = false;
    m_Orbits = utility::conversions::to_string_t("");
    m_OrbitsIsSet = false;
}

SystemWaypoint::~SystemWaypoint()
{
}

void SystemWaypoint::validate()
{
    // TODO: implement validation
}

web::json::value SystemWaypoint::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_SymbolIsSet)
    {
        val[utility::conversions::to_string_t(U("symbol"))] = ModelBase::toJson(m_Symbol);
    }
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t(U("type"))] = ModelBase::toJson(m_Type);
    }
    if(m_xIsSet)
    {
        val[utility::conversions::to_string_t(U("x"))] = ModelBase::toJson(m_x);
    }
    if(m_yIsSet)
    {
        val[utility::conversions::to_string_t(U("y"))] = ModelBase::toJson(m_y);
    }
    if(m_OrbitalsIsSet)
    {
        val[utility::conversions::to_string_t(U("orbitals"))] = ModelBase::toJson(m_Orbitals);
    }
    if(m_OrbitsIsSet)
    {
        val[utility::conversions::to_string_t(U("orbits"))] = ModelBase::toJson(m_Orbits);
    }

    return val;
}

bool SystemWaypoint::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("symbol"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("symbol")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSymbol;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSymbol);
            setSymbol(refVal_setSymbol);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("type")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<WaypointType> refVal_setType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setType);
            setType(refVal_setType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("x"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("x")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setX;
            ok &= ModelBase::fromJson(fieldValue, refVal_setX);
            setX(refVal_setX);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("y"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("y")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setY;
            ok &= ModelBase::fromJson(fieldValue, refVal_setY);
            setY(refVal_setY);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("orbitals"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("orbitals")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<WaypointOrbital>> refVal_setOrbitals;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOrbitals);
            setOrbitals(refVal_setOrbitals);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("orbits"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("orbits")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setOrbits;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOrbits);
            setOrbits(refVal_setOrbits);
        }
    }
    return ok;
}

void SystemWaypoint::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_SymbolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("symbol")), m_Symbol));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("type")), m_Type));
    }
    if(m_xIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("x")), m_x));
    }
    if(m_yIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("y")), m_y));
    }
    if(m_OrbitalsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("orbitals")), m_Orbitals));
    }
    if(m_OrbitsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("orbits")), m_Orbits));
    }
}

bool SystemWaypoint::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("symbol"))))
    {
        utility::string_t refVal_setSymbol;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("symbol"))), refVal_setSymbol );
        setSymbol(refVal_setSymbol);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("type"))))
    {
        std::shared_ptr<WaypointType> refVal_setType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("type"))), refVal_setType );
        setType(refVal_setType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("x"))))
    {
        int32_t refVal_setX;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("x"))), refVal_setX );
        setX(refVal_setX);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("y"))))
    {
        int32_t refVal_setY;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("y"))), refVal_setY );
        setY(refVal_setY);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("orbitals"))))
    {
        std::vector<std::shared_ptr<WaypointOrbital>> refVal_setOrbitals;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("orbitals"))), refVal_setOrbitals );
        setOrbitals(refVal_setOrbitals);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("orbits"))))
    {
        utility::string_t refVal_setOrbits;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("orbits"))), refVal_setOrbits );
        setOrbits(refVal_setOrbits);
    }
    return ok;
}

utility::string_t SystemWaypoint::getSymbol() const
{
    return m_Symbol;
}

void SystemWaypoint::setSymbol(const utility::string_t& value)
{
    m_Symbol = value;
    m_SymbolIsSet = true;
}

bool SystemWaypoint::symbolIsSet() const
{
    return m_SymbolIsSet;
}

void SystemWaypoint::unsetSymbol()
{
    m_SymbolIsSet = false;
}
std::shared_ptr<WaypointType> SystemWaypoint::getType() const
{
    return m_Type;
}

void SystemWaypoint::setType(const std::shared_ptr<WaypointType>& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool SystemWaypoint::typeIsSet() const
{
    return m_TypeIsSet;
}

void SystemWaypoint::unsetType()
{
    m_TypeIsSet = false;
}
int32_t SystemWaypoint::getX() const
{
    return m_x;
}

void SystemWaypoint::setX(int32_t value)
{
    m_x = value;
    m_xIsSet = true;
}

bool SystemWaypoint::XIsSet() const
{
    return m_xIsSet;
}

void SystemWaypoint::unsetx()
{
    m_xIsSet = false;
}
int32_t SystemWaypoint::getY() const
{
    return m_y;
}

void SystemWaypoint::setY(int32_t value)
{
    m_y = value;
    m_yIsSet = true;
}

bool SystemWaypoint::YIsSet() const
{
    return m_yIsSet;
}

void SystemWaypoint::unsety()
{
    m_yIsSet = false;
}
std::vector<std::shared_ptr<WaypointOrbital>>& SystemWaypoint::getOrbitals()
{
    return m_Orbitals;
}

void SystemWaypoint::setOrbitals(const std::vector<std::shared_ptr<WaypointOrbital>>& value)
{
    m_Orbitals = value;
    m_OrbitalsIsSet = true;
}

bool SystemWaypoint::orbitalsIsSet() const
{
    return m_OrbitalsIsSet;
}

void SystemWaypoint::unsetOrbitals()
{
    m_OrbitalsIsSet = false;
}
utility::string_t SystemWaypoint::getOrbits() const
{
    return m_Orbits;
}

void SystemWaypoint::setOrbits(const utility::string_t& value)
{
    m_Orbits = value;
    m_OrbitsIsSet = true;
}

bool SystemWaypoint::orbitsIsSet() const
{
    return m_OrbitsIsSet;
}

void SystemWaypoint::unsetOrbits()
{
    m_OrbitsIsSet = false;
}
}


