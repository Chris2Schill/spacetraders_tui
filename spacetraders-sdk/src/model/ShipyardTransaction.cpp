/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ShipyardTransaction.h"

namespace models {



ShipyardTransaction::ShipyardTransaction()
{
    m_WaypointSymbol = utility::conversions::to_string_t("");
    m_WaypointSymbolIsSet = false;
    m_ShipSymbol = utility::conversions::to_string_t("");
    m_ShipSymbolIsSet = false;
    m_ShipType = utility::conversions::to_string_t("");
    m_ShipTypeIsSet = false;
    m_Price = 0;
    m_PriceIsSet = false;
    m_AgentSymbol = utility::conversions::to_string_t("");
    m_AgentSymbolIsSet = false;
    m_Timestamp = utility::datetime();
    m_TimestampIsSet = false;
}

ShipyardTransaction::~ShipyardTransaction()
{
}

void ShipyardTransaction::validate()
{
    // TODO: implement validation
}

web::json::value ShipyardTransaction::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_WaypointSymbolIsSet)
    {
        val[utility::conversions::to_string_t(U("waypointSymbol"))] = ModelBase::toJson(m_WaypointSymbol);
    }
    if(m_ShipSymbolIsSet)
    {
        val[utility::conversions::to_string_t(U("shipSymbol"))] = ModelBase::toJson(m_ShipSymbol);
    }
    if(m_ShipTypeIsSet)
    {
        val[utility::conversions::to_string_t(U("shipType"))] = ModelBase::toJson(m_ShipType);
    }
    if(m_PriceIsSet)
    {
        val[utility::conversions::to_string_t(U("price"))] = ModelBase::toJson(m_Price);
    }
    if(m_AgentSymbolIsSet)
    {
        val[utility::conversions::to_string_t(U("agentSymbol"))] = ModelBase::toJson(m_AgentSymbol);
    }
    if(m_TimestampIsSet)
    {
        val[utility::conversions::to_string_t(U("timestamp"))] = ModelBase::toJson(m_Timestamp);
    }

    return val;
}

bool ShipyardTransaction::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("waypointSymbol"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("waypointSymbol")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setWaypointSymbol;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWaypointSymbol);
            setWaypointSymbol(refVal_setWaypointSymbol);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("shipSymbol"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("shipSymbol")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setShipSymbol;
            ok &= ModelBase::fromJson(fieldValue, refVal_setShipSymbol);
            setShipSymbol(refVal_setShipSymbol);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("shipType"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("shipType")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setShipType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setShipType);
            setShipType(refVal_setShipType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("price"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("price")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setPrice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPrice);
            setPrice(refVal_setPrice);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("agentSymbol"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("agentSymbol")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAgentSymbol;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAgentSymbol);
            setAgentSymbol(refVal_setAgentSymbol);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("timestamp"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("timestamp")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setTimestamp;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimestamp);
            setTimestamp(refVal_setTimestamp);
        }
    }
    return ok;
}

void ShipyardTransaction::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_WaypointSymbolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("waypointSymbol")), m_WaypointSymbol));
    }
    if(m_ShipSymbolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("shipSymbol")), m_ShipSymbol));
    }
    if(m_ShipTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("shipType")), m_ShipType));
    }
    if(m_PriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("price")), m_Price));
    }
    if(m_AgentSymbolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("agentSymbol")), m_AgentSymbol));
    }
    if(m_TimestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("timestamp")), m_Timestamp));
    }
}

bool ShipyardTransaction::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("waypointSymbol"))))
    {
        utility::string_t refVal_setWaypointSymbol;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("waypointSymbol"))), refVal_setWaypointSymbol );
        setWaypointSymbol(refVal_setWaypointSymbol);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("shipSymbol"))))
    {
        utility::string_t refVal_setShipSymbol;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("shipSymbol"))), refVal_setShipSymbol );
        setShipSymbol(refVal_setShipSymbol);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("shipType"))))
    {
        utility::string_t refVal_setShipType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("shipType"))), refVal_setShipType );
        setShipType(refVal_setShipType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("price"))))
    {
        int32_t refVal_setPrice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("price"))), refVal_setPrice );
        setPrice(refVal_setPrice);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("agentSymbol"))))
    {
        utility::string_t refVal_setAgentSymbol;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("agentSymbol"))), refVal_setAgentSymbol );
        setAgentSymbol(refVal_setAgentSymbol);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("timestamp"))))
    {
        utility::datetime refVal_setTimestamp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("timestamp"))), refVal_setTimestamp );
        setTimestamp(refVal_setTimestamp);
    }
    return ok;
}

utility::string_t ShipyardTransaction::getWaypointSymbol() const
{
    return m_WaypointSymbol;
}

void ShipyardTransaction::setWaypointSymbol(const utility::string_t& value)
{
    m_WaypointSymbol = value;
    m_WaypointSymbolIsSet = true;
}

bool ShipyardTransaction::waypointSymbolIsSet() const
{
    return m_WaypointSymbolIsSet;
}

void ShipyardTransaction::unsetWaypointSymbol()
{
    m_WaypointSymbolIsSet = false;
}
utility::string_t ShipyardTransaction::getShipSymbol() const
{
    return m_ShipSymbol;
}

void ShipyardTransaction::setShipSymbol(const utility::string_t& value)
{
    m_ShipSymbol = value;
    m_ShipSymbolIsSet = true;
}

bool ShipyardTransaction::shipSymbolIsSet() const
{
    return m_ShipSymbolIsSet;
}

void ShipyardTransaction::unsetShipSymbol()
{
    m_ShipSymbolIsSet = false;
}
utility::string_t ShipyardTransaction::getShipType() const
{
    return m_ShipType;
}

void ShipyardTransaction::setShipType(const utility::string_t& value)
{
    m_ShipType = value;
    m_ShipTypeIsSet = true;
}

bool ShipyardTransaction::shipTypeIsSet() const
{
    return m_ShipTypeIsSet;
}

void ShipyardTransaction::unsetShipType()
{
    m_ShipTypeIsSet = false;
}
int32_t ShipyardTransaction::getPrice() const
{
    return m_Price;
}

void ShipyardTransaction::setPrice(int32_t value)
{
    m_Price = value;
    m_PriceIsSet = true;
}

bool ShipyardTransaction::priceIsSet() const
{
    return m_PriceIsSet;
}

void ShipyardTransaction::unsetPrice()
{
    m_PriceIsSet = false;
}
utility::string_t ShipyardTransaction::getAgentSymbol() const
{
    return m_AgentSymbol;
}

void ShipyardTransaction::setAgentSymbol(const utility::string_t& value)
{
    m_AgentSymbol = value;
    m_AgentSymbolIsSet = true;
}

bool ShipyardTransaction::agentSymbolIsSet() const
{
    return m_AgentSymbolIsSet;
}

void ShipyardTransaction::unsetAgentSymbol()
{
    m_AgentSymbolIsSet = false;
}
utility::datetime ShipyardTransaction::getTimestamp() const
{
    return m_Timestamp;
}

void ShipyardTransaction::setTimestamp(const utility::datetime& value)
{
    m_Timestamp = value;
    m_TimestampIsSet = true;
}

bool ShipyardTransaction::timestampIsSet() const
{
    return m_TimestampIsSet;
}

void ShipyardTransaction::unsetTimestamp()
{
    m_TimestampIsSet = false;
}
}


