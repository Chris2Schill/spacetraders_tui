/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Construction.h"

namespace models {



Construction::Construction()
{
    m_Symbol = utility::conversions::to_string_t("");
    m_SymbolIsSet = false;
    m_MaterialsIsSet = false;
    m_IsComplete = false;
    m_IsCompleteIsSet = false;
}

Construction::~Construction()
{
}

void Construction::validate()
{
    // TODO: implement validation
}

web::json::value Construction::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_SymbolIsSet)
    {
        val[utility::conversions::to_string_t(U("symbol"))] = ModelBase::toJson(m_Symbol);
    }
    if(m_MaterialsIsSet)
    {
        val[utility::conversions::to_string_t(U("materials"))] = ModelBase::toJson(m_Materials);
    }
    if(m_IsCompleteIsSet)
    {
        val[utility::conversions::to_string_t(U("isComplete"))] = ModelBase::toJson(m_IsComplete);
    }

    return val;
}

bool Construction::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("symbol"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("symbol")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSymbol;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSymbol);
            setSymbol(refVal_setSymbol);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("materials"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("materials")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<ConstructionMaterial>> refVal_setMaterials;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMaterials);
            setMaterials(refVal_setMaterials);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("isComplete"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("isComplete")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsComplete;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsComplete);
            setIsComplete(refVal_setIsComplete);
        }
    }
    return ok;
}

void Construction::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_SymbolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("symbol")), m_Symbol));
    }
    if(m_MaterialsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("materials")), m_Materials));
    }
    if(m_IsCompleteIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("isComplete")), m_IsComplete));
    }
}

bool Construction::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("symbol"))))
    {
        utility::string_t refVal_setSymbol;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("symbol"))), refVal_setSymbol );
        setSymbol(refVal_setSymbol);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("materials"))))
    {
        std::vector<std::shared_ptr<ConstructionMaterial>> refVal_setMaterials;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("materials"))), refVal_setMaterials );
        setMaterials(refVal_setMaterials);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("isComplete"))))
    {
        bool refVal_setIsComplete;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("isComplete"))), refVal_setIsComplete );
        setIsComplete(refVal_setIsComplete);
    }
    return ok;
}

utility::string_t Construction::getSymbol() const
{
    return m_Symbol;
}

void Construction::setSymbol(const utility::string_t& value)
{
    m_Symbol = value;
    m_SymbolIsSet = true;
}

bool Construction::symbolIsSet() const
{
    return m_SymbolIsSet;
}

void Construction::unsetSymbol()
{
    m_SymbolIsSet = false;
}
std::vector<std::shared_ptr<ConstructionMaterial>>& Construction::getMaterials()
{
    return m_Materials;
}

void Construction::setMaterials(const std::vector<std::shared_ptr<ConstructionMaterial>>& value)
{
    m_Materials = value;
    m_MaterialsIsSet = true;
}

bool Construction::materialsIsSet() const
{
    return m_MaterialsIsSet;
}

void Construction::unsetMaterials()
{
    m_MaterialsIsSet = false;
}
bool Construction::isIsComplete() const
{
    return m_IsComplete;
}

void Construction::setIsComplete(bool value)
{
    m_IsComplete = value;
    m_IsCompleteIsSet = true;
}

bool Construction::isCompleteIsSet() const
{
    return m_IsCompleteIsSet;
}

void Construction::unsetIsComplete()
{
    m_IsCompleteIsSet = false;
}
}


