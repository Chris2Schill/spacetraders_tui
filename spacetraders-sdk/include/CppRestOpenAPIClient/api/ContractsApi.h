/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ContractsApi.h
 *
 * 
 */

#ifndef API_ContractsApi_H_
#define API_ContractsApi_H_



#include "CppRestOpenAPIClient/ApiClient.h"

#include "CppRestOpenAPIClient/model/Accept_contract_200_response.h"
#include "CppRestOpenAPIClient/model/Deliver_contract_200_response.h"
#include "CppRestOpenAPIClient/model/Deliver_contract_request.h"
#include "CppRestOpenAPIClient/model/Fulfill_contract_200_response.h"
#include "CppRestOpenAPIClient/model/Get_contract_200_response.h"
#include "CppRestOpenAPIClient/model/Get_contracts_200_response.h"
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace api {

using namespace models;



class  ContractsApi 
{
public:

    explicit ContractsApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~ContractsApi();

    /// <summary>
    /// Accept Contract
    /// </summary>
    /// <remarks>
    /// Accept a contract by ID.   You can only accept contracts that were offered to you, were not accepted yet, and whose deadlines has not passed yet.
    /// </remarks>
    /// <param name="contractId">The contract ID to accept.</param>
    pplx::task<std::shared_ptr<Accept_contract_200_response>> acceptContract(
        utility::string_t contractId
    ) const;
    /// <summary>
    /// Deliver Cargo to Contract
    /// </summary>
    /// <remarks>
    /// Deliver cargo to a contract.  In order to use this API, a ship must be at the delivery location (denoted in the delivery terms as &#x60;destinationSymbol&#x60; of a contract) and must have a number of units of a good required by this contract in its cargo.  Cargo that was delivered will be removed from the ship&#39;s cargo.
    /// </remarks>
    /// <param name="contractId">The ID of the contract.</param>
    /// <param name="deliverContractRequest"> (optional)</param>
    pplx::task<std::shared_ptr<Deliver_contract_200_response>> deliverContract(
        utility::string_t contractId,
        boost::optional<std::shared_ptr<Deliver_contract_request>> deliverContractRequest
    ) const;
    /// <summary>
    /// Fulfill Contract
    /// </summary>
    /// <remarks>
    /// Fulfill a contract. Can only be used on contracts that have all of their delivery terms fulfilled.
    /// </remarks>
    /// <param name="contractId">The ID of the contract to fulfill.</param>
    pplx::task<std::shared_ptr<Fulfill_contract_200_response>> fulfillContract(
        utility::string_t contractId
    ) const;
    /// <summary>
    /// Get Contract
    /// </summary>
    /// <remarks>
    /// Get the details of a contract by ID.
    /// </remarks>
    /// <param name="contractId">The contract ID</param>
    pplx::task<std::shared_ptr<Get_contract_200_response>> getContract(
        utility::string_t contractId
    ) const;
    /// <summary>
    /// List Contracts
    /// </summary>
    /// <remarks>
    /// Return a paginated list of all your contracts.
    /// </remarks>
    /// <param name="page">What entry offset to request (optional, default to 0)</param>
    /// <param name="limit">How many entries to return per page (optional, default to 0)</param>
    pplx::task<std::shared_ptr<Get_contracts_200_response>> getContracts(
        boost::optional<int32_t> page,
        boost::optional<int32_t> limit
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}

#endif /* API_ContractsApi_H_ */

