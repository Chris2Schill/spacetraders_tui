/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Shipyard.h
 *
 * 
 */

#ifndef MODELS_Shipyard_H_
#define MODELS_Shipyard_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/ShipyardTransaction.h"
#include <cpprest/details/basic_types.h>
#include "CppRestOpenAPIClient/model/ShipyardShip.h"
#include "CppRestOpenAPIClient/model/Shipyard_shipTypes_inner.h"
#include <vector>

namespace models {

class Shipyard_shipTypes_inner;
class ShipyardTransaction;
class ShipyardShip;

/// <summary>
/// 
/// </summary>
class  Shipyard
    : public ModelBase
{
public:
    Shipyard();
    virtual ~Shipyard();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Shipyard members

    /// <summary>
    /// The symbol of the shipyard. The symbol is the same as the waypoint where the shipyard is located.
    /// </summary>
    utility::string_t getSymbol() const;
    bool symbolIsSet() const;
    void unsetSymbol();

    void setSymbol(const utility::string_t& value);

    /// <summary>
    /// The list of ship types available for purchase at this shipyard.
    /// </summary>
    std::vector<std::shared_ptr<Shipyard_shipTypes_inner>>& getShipTypes();
    bool shipTypesIsSet() const;
    void unsetShipTypes();

    void setShipTypes(const std::vector<std::shared_ptr<Shipyard_shipTypes_inner>>& value);

    /// <summary>
    /// The list of recent transactions at this shipyard.
    /// </summary>
    std::vector<std::shared_ptr<ShipyardTransaction>>& getTransactions();
    bool transactionsIsSet() const;
    void unsetTransactions();

    void setTransactions(const std::vector<std::shared_ptr<ShipyardTransaction>>& value);

    /// <summary>
    /// The ships that are currently available for purchase at the shipyard.
    /// </summary>
    std::vector<std::shared_ptr<ShipyardShip>>& getShips();
    bool shipsIsSet() const;
    void unsetShips();

    void setShips(const std::vector<std::shared_ptr<ShipyardShip>>& value);

    /// <summary>
    /// The fee to modify a ship at this shipyard. This includes installing or removing modules and mounts on a ship. In the case of mounts, the fee is a flat rate per mount. In the case of modules, the fee is per slot the module occupies.
    /// </summary>
    int32_t getModificationsFee() const;
    bool modificationsFeeIsSet() const;
    void unsetModificationsFee();

    void setModificationsFee(int32_t value);


protected:
    utility::string_t m_Symbol;
    bool m_SymbolIsSet;
    std::vector<std::shared_ptr<Shipyard_shipTypes_inner>> m_ShipTypes;
    bool m_ShipTypesIsSet;
    std::vector<std::shared_ptr<ShipyardTransaction>> m_Transactions;
    bool m_TransactionsIsSet;
    std::vector<std::shared_ptr<ShipyardShip>> m_Ships;
    bool m_ShipsIsSet;
    int32_t m_ModificationsFee;
    bool m_ModificationsFeeIsSet;
};


}

#endif /* MODELS_Shipyard_H_ */
