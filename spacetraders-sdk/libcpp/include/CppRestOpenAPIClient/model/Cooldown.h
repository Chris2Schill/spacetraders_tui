/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Cooldown.h
 *
 * A cooldown is a period of time in which a ship cannot perform certain actions.
 */

#ifndef MODELS_Cooldown_H_
#define MODELS_Cooldown_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace models {


/// <summary>
/// A cooldown is a period of time in which a ship cannot perform certain actions.
/// </summary>
class  Cooldown
    : public ModelBase
{
public:
    Cooldown();
    virtual ~Cooldown();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Cooldown members

    /// <summary>
    /// The symbol of the ship that is on cooldown
    /// </summary>
    utility::string_t getShipSymbol() const;
    bool shipSymbolIsSet() const;
    void unsetShipSymbol();

    void setShipSymbol(const utility::string_t& value);

    /// <summary>
    /// The total duration of the cooldown in seconds
    /// </summary>
    int32_t getTotalSeconds() const;
    bool totalSecondsIsSet() const;
    void unsetTotalSeconds();

    void setTotalSeconds(int32_t value);

    /// <summary>
    /// The remaining duration of the cooldown in seconds
    /// </summary>
    int32_t getRemainingSeconds() const;
    bool remainingSecondsIsSet() const;
    void unsetRemainingSeconds();

    void setRemainingSeconds(int32_t value);

    /// <summary>
    /// The date and time when the cooldown expires in ISO 8601 format
    /// </summary>
    utility::datetime getExpiration() const;
    bool expirationIsSet() const;
    void unsetExpiration();

    void setExpiration(const utility::datetime& value);


protected:
    utility::string_t m_ShipSymbol;
    bool m_ShipSymbolIsSet;
    int32_t m_TotalSeconds;
    bool m_TotalSecondsIsSet;
    int32_t m_RemainingSeconds;
    bool m_RemainingSecondsIsSet;
    utility::datetime m_Expiration;
    bool m_ExpirationIsSet;
};


}

#endif /* MODELS_Cooldown_H_ */
