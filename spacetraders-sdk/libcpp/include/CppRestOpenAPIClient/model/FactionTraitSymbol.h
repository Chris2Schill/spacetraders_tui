/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * FactionTraitSymbol.h
 *
 * The unique identifier of the trait.
 */

#ifndef MODELS_FactionTraitSymbol_H_
#define MODELS_FactionTraitSymbol_H_


#include "CppRestOpenAPIClient/ModelBase.h"


namespace models {

class  FactionTraitSymbol
    : public ModelBase
{
public:
    FactionTraitSymbol();
    virtual ~FactionTraitSymbol();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    enum class eFactionTraitSymbol
    {
        FactionTraitSymbol_BUREAUCRATIC,
        FactionTraitSymbol_SECRETIVE,
        FactionTraitSymbol_CAPITALISTIC,
        FactionTraitSymbol_INDUSTRIOUS,
        FactionTraitSymbol_PEACEFUL,
        FactionTraitSymbol_DISTRUSTFUL,
        FactionTraitSymbol_WELCOMING,
        FactionTraitSymbol_SMUGGLERS,
        FactionTraitSymbol_SCAVENGERS,
        FactionTraitSymbol_REBELLIOUS,
        FactionTraitSymbol_EXILES,
        FactionTraitSymbol_PIRATES,
        FactionTraitSymbol_RAIDERS,
        FactionTraitSymbol_CLAN,
        FactionTraitSymbol_GUILD,
        FactionTraitSymbol_DOMINION,
        FactionTraitSymbol_FRINGE,
        FactionTraitSymbol_FORSAKEN,
        FactionTraitSymbol_ISOLATED,
        FactionTraitSymbol_LOCALIZED,
        FactionTraitSymbol_ESTABLISHED,
        FactionTraitSymbol_NOTABLE,
        FactionTraitSymbol_DOMINANT,
        FactionTraitSymbol_INESCAPABLE,
        FactionTraitSymbol_INNOVATIVE,
        FactionTraitSymbol_BOLD,
        FactionTraitSymbol_VISIONARY,
        FactionTraitSymbol_CURIOUS,
        FactionTraitSymbol_DARING,
        FactionTraitSymbol_EXPLORATORY,
        FactionTraitSymbol_RESOURCEFUL,
        FactionTraitSymbol_FLEXIBLE,
        FactionTraitSymbol_COOPERATIVE,
        FactionTraitSymbol_UNITED,
        FactionTraitSymbol_STRATEGIC,
        FactionTraitSymbol_INTELLIGENT,
        FactionTraitSymbol_RESEARCH_FOCUSED,
        FactionTraitSymbol_COLLABORATIVE,
        FactionTraitSymbol_PROGRESSIVE,
        FactionTraitSymbol_MILITARISTIC,
        FactionTraitSymbol_TECHNOLOGICALLY_ADVANCED,
        FactionTraitSymbol_AGGRESSIVE,
        FactionTraitSymbol_IMPERIALISTIC,
        FactionTraitSymbol_TREASURE_HUNTERS,
        FactionTraitSymbol_DEXTEROUS,
        FactionTraitSymbol_UNPREDICTABLE,
        FactionTraitSymbol_BRUTAL,
        FactionTraitSymbol_FLEETING,
        FactionTraitSymbol_ADAPTABLE,
        FactionTraitSymbol_SELF_SUFFICIENT,
        FactionTraitSymbol_DEFENSIVE,
        FactionTraitSymbol_PROUD,
        FactionTraitSymbol_DIVERSE,
        FactionTraitSymbol_INDEPENDENT,
        FactionTraitSymbol_SELF_INTERESTED,
        FactionTraitSymbol_FRAGMENTED,
        FactionTraitSymbol_COMMERCIAL,
        FactionTraitSymbol_FREE_MARKETS,
        FactionTraitSymbol_ENTREPRENEURIAL,
    };

    eFactionTraitSymbol getValue() const;
    void setValue(eFactionTraitSymbol const value);

    protected:
        eFactionTraitSymbol m_value;
};

}

#endif /* MODELS_FactionTraitSymbol_H_ */
