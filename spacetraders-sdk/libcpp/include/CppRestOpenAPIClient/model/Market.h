/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * Market.h
 *
 * 
 */

#ifndef MODELS_Market_H_
#define MODELS_Market_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/MarketTradeGood.h"
#include <cpprest/details/basic_types.h>
#include "CppRestOpenAPIClient/model/MarketTransaction.h"
#include <vector>
#include "CppRestOpenAPIClient/model/TradeGood.h"

namespace models {

class TradeGood;
class MarketTransaction;
class MarketTradeGood;

/// <summary>
/// 
/// </summary>
class  Market
    : public ModelBase
{
public:
    Market();
    virtual ~Market();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Market members

    /// <summary>
    /// The symbol of the market. The symbol is the same as the waypoint where the market is located.
    /// </summary>
    utility::string_t getSymbol() const;
    bool symbolIsSet() const;
    void unsetSymbol();

    void setSymbol(const utility::string_t& value);

    /// <summary>
    /// The list of goods that are exported from this market.
    /// </summary>
    std::vector<std::shared_ptr<TradeGood>>& getExports();
    bool exportsIsSet() const;
    void unsetExports();

    void setExports(const std::vector<std::shared_ptr<TradeGood>>& value);

    /// <summary>
    /// The list of goods that are sought as imports in this market.
    /// </summary>
    std::vector<std::shared_ptr<TradeGood>>& getImports();
    bool importsIsSet() const;
    void unsetImports();

    void setImports(const std::vector<std::shared_ptr<TradeGood>>& value);

    /// <summary>
    /// The list of goods that are bought and sold between agents at this market.
    /// </summary>
    std::vector<std::shared_ptr<TradeGood>>& getExchange();
    bool exchangeIsSet() const;
    void unsetExchange();

    void setExchange(const std::vector<std::shared_ptr<TradeGood>>& value);

    /// <summary>
    /// The list of recent transactions at this market. Visible only when a ship is present at the market.
    /// </summary>
    std::vector<std::shared_ptr<MarketTransaction>>& getTransactions();
    bool transactionsIsSet() const;
    void unsetTransactions();

    void setTransactions(const std::vector<std::shared_ptr<MarketTransaction>>& value);

    /// <summary>
    /// The list of goods that are traded at this market. Visible only when a ship is present at the market.
    /// </summary>
    std::vector<std::shared_ptr<MarketTradeGood>>& getTradeGoods();
    bool tradeGoodsIsSet() const;
    void unsetTradeGoods();

    void setTradeGoods(const std::vector<std::shared_ptr<MarketTradeGood>>& value);


protected:
    utility::string_t m_Symbol;
    bool m_SymbolIsSet;
    std::vector<std::shared_ptr<TradeGood>> m_Exports;
    bool m_ExportsIsSet;
    std::vector<std::shared_ptr<TradeGood>> m_Imports;
    bool m_ImportsIsSet;
    std::vector<std::shared_ptr<TradeGood>> m_Exchange;
    bool m_ExchangeIsSet;
    std::vector<std::shared_ptr<MarketTransaction>> m_Transactions;
    bool m_TransactionsIsSet;
    std::vector<std::shared_ptr<MarketTradeGood>> m_TradeGoods;
    bool m_TradeGoodsIsSet;
};


}

#endif /* MODELS_Market_H_ */
