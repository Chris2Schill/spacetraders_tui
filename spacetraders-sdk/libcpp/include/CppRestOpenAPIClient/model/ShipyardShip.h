/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * ShipyardShip.h
 *
 * 
 */

#ifndef MODELS_ShipyardShip_H_
#define MODELS_ShipyardShip_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/ShipyardShip_crew.h"
#include "CppRestOpenAPIClient/model/ShipType.h"
#include "CppRestOpenAPIClient/model/ShipFrame.h"
#include "CppRestOpenAPIClient/model/ShipMount.h"
#include "CppRestOpenAPIClient/model/ShipModule.h"
#include "CppRestOpenAPIClient/model/ShipReactor.h"
#include "CppRestOpenAPIClient/model/SupplyLevel.h"
#include <cpprest/details/basic_types.h>
#include "CppRestOpenAPIClient/model/ActivityLevel.h"
#include <vector>
#include "CppRestOpenAPIClient/model/ShipEngine.h"

namespace models {

class ShipFrame;
class ShipReactor;
class ShipEngine;
class ShipModule;
class ShipMount;
class ShipyardShip_crew;

/// <summary>
/// 
/// </summary>
class  ShipyardShip
    : public ModelBase
{
public:
    ShipyardShip();
    virtual ~ShipyardShip();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// ShipyardShip members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ShipType> getType() const;
    bool typeIsSet() const;
    void unsetType();

    void setType(const std::shared_ptr<ShipType>& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getName() const;
    bool nameIsSet() const;
    void unsetName();

    void setName(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    utility::string_t getDescription() const;
    bool descriptionIsSet() const;
    void unsetDescription();

    void setDescription(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<SupplyLevel> getSupply() const;
    bool supplyIsSet() const;
    void unsetSupply();

    void setSupply(const std::shared_ptr<SupplyLevel>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ActivityLevel> getActivity() const;
    bool activityIsSet() const;
    void unsetActivity();

    void setActivity(const std::shared_ptr<ActivityLevel>& value);

    /// <summary>
    /// 
    /// </summary>
    int32_t getPurchasePrice() const;
    bool purchasePriceIsSet() const;
    void unsetPurchasePrice();

    void setPurchasePrice(int32_t value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ShipFrame> getFrame() const;
    bool frameIsSet() const;
    void unsetFrame();

    void setFrame(const std::shared_ptr<ShipFrame>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ShipReactor> getReactor() const;
    bool reactorIsSet() const;
    void unsetReactor();

    void setReactor(const std::shared_ptr<ShipReactor>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ShipEngine> getEngine() const;
    bool engineIsSet() const;
    void unsetEngine();

    void setEngine(const std::shared_ptr<ShipEngine>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<ShipModule>>& getModules();
    bool modulesIsSet() const;
    void unsetModules();

    void setModules(const std::vector<std::shared_ptr<ShipModule>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::vector<std::shared_ptr<ShipMount>>& getMounts();
    bool mountsIsSet() const;
    void unsetMounts();

    void setMounts(const std::vector<std::shared_ptr<ShipMount>>& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<ShipyardShip_crew> getCrew() const;
    bool crewIsSet() const;
    void unsetCrew();

    void setCrew(const std::shared_ptr<ShipyardShip_crew>& value);


protected:
    std::shared_ptr<ShipType> m_Type;
    bool m_TypeIsSet;
    utility::string_t m_Name;
    bool m_NameIsSet;
    utility::string_t m_Description;
    bool m_DescriptionIsSet;
    std::shared_ptr<SupplyLevel> m_Supply;
    bool m_SupplyIsSet;
    std::shared_ptr<ActivityLevel> m_Activity;
    bool m_ActivityIsSet;
    int32_t m_PurchasePrice;
    bool m_PurchasePriceIsSet;
    std::shared_ptr<ShipFrame> m_Frame;
    bool m_FrameIsSet;
    std::shared_ptr<ShipReactor> m_Reactor;
    bool m_ReactorIsSet;
    std::shared_ptr<ShipEngine> m_Engine;
    bool m_EngineIsSet;
    std::vector<std::shared_ptr<ShipModule>> m_Modules;
    bool m_ModulesIsSet;
    std::vector<std::shared_ptr<ShipMount>> m_Mounts;
    bool m_MountsIsSet;
    std::shared_ptr<ShipyardShip_crew> m_Crew;
    bool m_CrewIsSet;
};


}

#endif /* MODELS_ShipyardShip_H_ */
