/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ShipNav.h"

namespace models {



ShipNav::ShipNav()
{
    m_SystemSymbol = utility::conversions::to_string_t("");
    m_SystemSymbolIsSet = false;
    m_WaypointSymbol = utility::conversions::to_string_t("");
    m_WaypointSymbolIsSet = false;
    m_RouteIsSet = false;
    m_StatusIsSet = false;
    m_FlightModeIsSet = false;
}

ShipNav::~ShipNav()
{
}

void ShipNav::validate()
{
    // TODO: implement validation
}

web::json::value ShipNav::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_SystemSymbolIsSet)
    {
        val[utility::conversions::to_string_t(U("systemSymbol"))] = ModelBase::toJson(m_SystemSymbol);
    }
    if(m_WaypointSymbolIsSet)
    {
        val[utility::conversions::to_string_t(U("waypointSymbol"))] = ModelBase::toJson(m_WaypointSymbol);
    }
    if(m_RouteIsSet)
    {
        val[utility::conversions::to_string_t(U("route"))] = ModelBase::toJson(m_Route);
    }
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t(U("status"))] = ModelBase::toJson(m_Status);
    }
    if(m_FlightModeIsSet)
    {
        val[utility::conversions::to_string_t(U("flightMode"))] = ModelBase::toJson(m_FlightMode);
    }

    return val;
}

bool ShipNav::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("systemSymbol"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("systemSymbol")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSystemSymbol;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSystemSymbol);
            setSystemSymbol(refVal_setSystemSymbol);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("waypointSymbol"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("waypointSymbol")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setWaypointSymbol;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWaypointSymbol);
            setWaypointSymbol(refVal_setWaypointSymbol);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("route"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("route")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ShipNavRoute> refVal_setRoute;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRoute);
            setRoute(refVal_setRoute);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("status")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ShipNavStatus> refVal_setStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatus);
            setStatus(refVal_setStatus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("flightMode"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("flightMode")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ShipNavFlightMode> refVal_setFlightMode;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFlightMode);
            setFlightMode(refVal_setFlightMode);
        }
    }
    return ok;
}

void ShipNav::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_SystemSymbolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("systemSymbol")), m_SystemSymbol));
    }
    if(m_WaypointSymbolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("waypointSymbol")), m_WaypointSymbol));
    }
    if(m_RouteIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("route")), m_Route));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("status")), m_Status));
    }
    if(m_FlightModeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("flightMode")), m_FlightMode));
    }
}

bool ShipNav::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("systemSymbol"))))
    {
        utility::string_t refVal_setSystemSymbol;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("systemSymbol"))), refVal_setSystemSymbol );
        setSystemSymbol(refVal_setSystemSymbol);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("waypointSymbol"))))
    {
        utility::string_t refVal_setWaypointSymbol;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("waypointSymbol"))), refVal_setWaypointSymbol );
        setWaypointSymbol(refVal_setWaypointSymbol);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("route"))))
    {
        std::shared_ptr<ShipNavRoute> refVal_setRoute;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("route"))), refVal_setRoute );
        setRoute(refVal_setRoute);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("status"))))
    {
        std::shared_ptr<ShipNavStatus> refVal_setStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("status"))), refVal_setStatus );
        setStatus(refVal_setStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("flightMode"))))
    {
        std::shared_ptr<ShipNavFlightMode> refVal_setFlightMode;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("flightMode"))), refVal_setFlightMode );
        setFlightMode(refVal_setFlightMode);
    }
    return ok;
}

utility::string_t ShipNav::getSystemSymbol() const
{
    return m_SystemSymbol;
}

void ShipNav::setSystemSymbol(const utility::string_t& value)
{
    m_SystemSymbol = value;
    m_SystemSymbolIsSet = true;
}

bool ShipNav::systemSymbolIsSet() const
{
    return m_SystemSymbolIsSet;
}

void ShipNav::unsetSystemSymbol()
{
    m_SystemSymbolIsSet = false;
}
utility::string_t ShipNav::getWaypointSymbol() const
{
    return m_WaypointSymbol;
}

void ShipNav::setWaypointSymbol(const utility::string_t& value)
{
    m_WaypointSymbol = value;
    m_WaypointSymbolIsSet = true;
}

bool ShipNav::waypointSymbolIsSet() const
{
    return m_WaypointSymbolIsSet;
}

void ShipNav::unsetWaypointSymbol()
{
    m_WaypointSymbolIsSet = false;
}
std::shared_ptr<ShipNavRoute> ShipNav::getRoute() const
{
    return m_Route;
}

void ShipNav::setRoute(const std::shared_ptr<ShipNavRoute>& value)
{
    m_Route = value;
    m_RouteIsSet = true;
}

bool ShipNav::routeIsSet() const
{
    return m_RouteIsSet;
}

void ShipNav::unsetRoute()
{
    m_RouteIsSet = false;
}
std::shared_ptr<ShipNavStatus> ShipNav::getStatus() const
{
    return m_Status;
}

void ShipNav::setStatus(const std::shared_ptr<ShipNavStatus>& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}

bool ShipNav::statusIsSet() const
{
    return m_StatusIsSet;
}

void ShipNav::unsetStatus()
{
    m_StatusIsSet = false;
}
std::shared_ptr<ShipNavFlightMode> ShipNav::getFlightMode() const
{
    return m_FlightMode;
}

void ShipNav::setFlightMode(const std::shared_ptr<ShipNavFlightMode>& value)
{
    m_FlightMode = value;
    m_FlightModeIsSet = true;
}

bool ShipNav::flightModeIsSet() const
{
    return m_FlightModeIsSet;
}

void ShipNav::unsetFlightMode()
{
    m_FlightModeIsSet = false;
}
}


