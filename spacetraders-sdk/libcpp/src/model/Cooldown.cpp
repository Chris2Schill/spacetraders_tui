/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Cooldown.h"

namespace models {



Cooldown::Cooldown()
{
    m_ShipSymbol = utility::conversions::to_string_t("");
    m_ShipSymbolIsSet = false;
    m_TotalSeconds = 0;
    m_TotalSecondsIsSet = false;
    m_RemainingSeconds = 0;
    m_RemainingSecondsIsSet = false;
    m_Expiration = utility::datetime();
    m_ExpirationIsSet = false;
}

Cooldown::~Cooldown()
{
}

void Cooldown::validate()
{
    // TODO: implement validation
}

web::json::value Cooldown::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ShipSymbolIsSet)
    {
        val[utility::conversions::to_string_t(U("shipSymbol"))] = ModelBase::toJson(m_ShipSymbol);
    }
    if(m_TotalSecondsIsSet)
    {
        val[utility::conversions::to_string_t(U("totalSeconds"))] = ModelBase::toJson(m_TotalSeconds);
    }
    if(m_RemainingSecondsIsSet)
    {
        val[utility::conversions::to_string_t(U("remainingSeconds"))] = ModelBase::toJson(m_RemainingSeconds);
    }
    if(m_ExpirationIsSet)
    {
        val[utility::conversions::to_string_t(U("expiration"))] = ModelBase::toJson(m_Expiration);
    }

    return val;
}

bool Cooldown::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("shipSymbol"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("shipSymbol")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setShipSymbol;
            ok &= ModelBase::fromJson(fieldValue, refVal_setShipSymbol);
            setShipSymbol(refVal_setShipSymbol);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("totalSeconds"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("totalSeconds")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTotalSeconds;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTotalSeconds);
            setTotalSeconds(refVal_setTotalSeconds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("remainingSeconds"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("remainingSeconds")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setRemainingSeconds;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRemainingSeconds);
            setRemainingSeconds(refVal_setRemainingSeconds);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("expiration"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("expiration")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setExpiration;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExpiration);
            setExpiration(refVal_setExpiration);
        }
    }
    return ok;
}

void Cooldown::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_ShipSymbolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("shipSymbol")), m_ShipSymbol));
    }
    if(m_TotalSecondsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("totalSeconds")), m_TotalSeconds));
    }
    if(m_RemainingSecondsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("remainingSeconds")), m_RemainingSeconds));
    }
    if(m_ExpirationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("expiration")), m_Expiration));
    }
}

bool Cooldown::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("shipSymbol"))))
    {
        utility::string_t refVal_setShipSymbol;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("shipSymbol"))), refVal_setShipSymbol );
        setShipSymbol(refVal_setShipSymbol);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("totalSeconds"))))
    {
        int32_t refVal_setTotalSeconds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("totalSeconds"))), refVal_setTotalSeconds );
        setTotalSeconds(refVal_setTotalSeconds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("remainingSeconds"))))
    {
        int32_t refVal_setRemainingSeconds;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("remainingSeconds"))), refVal_setRemainingSeconds );
        setRemainingSeconds(refVal_setRemainingSeconds);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("expiration"))))
    {
        utility::datetime refVal_setExpiration;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("expiration"))), refVal_setExpiration );
        setExpiration(refVal_setExpiration);
    }
    return ok;
}

utility::string_t Cooldown::getShipSymbol() const
{
    return m_ShipSymbol;
}

void Cooldown::setShipSymbol(const utility::string_t& value)
{
    m_ShipSymbol = value;
    m_ShipSymbolIsSet = true;
}

bool Cooldown::shipSymbolIsSet() const
{
    return m_ShipSymbolIsSet;
}

void Cooldown::unsetShipSymbol()
{
    m_ShipSymbolIsSet = false;
}
int32_t Cooldown::getTotalSeconds() const
{
    return m_TotalSeconds;
}

void Cooldown::setTotalSeconds(int32_t value)
{
    m_TotalSeconds = value;
    m_TotalSecondsIsSet = true;
}

bool Cooldown::totalSecondsIsSet() const
{
    return m_TotalSecondsIsSet;
}

void Cooldown::unsetTotalSeconds()
{
    m_TotalSecondsIsSet = false;
}
int32_t Cooldown::getRemainingSeconds() const
{
    return m_RemainingSeconds;
}

void Cooldown::setRemainingSeconds(int32_t value)
{
    m_RemainingSeconds = value;
    m_RemainingSecondsIsSet = true;
}

bool Cooldown::remainingSecondsIsSet() const
{
    return m_RemainingSecondsIsSet;
}

void Cooldown::unsetRemainingSeconds()
{
    m_RemainingSecondsIsSet = false;
}
utility::datetime Cooldown::getExpiration() const
{
    return m_Expiration;
}

void Cooldown::setExpiration(const utility::datetime& value)
{
    m_Expiration = value;
    m_ExpirationIsSet = true;
}

bool Cooldown::expirationIsSet() const
{
    return m_ExpirationIsSet;
}

void Cooldown::unsetExpiration()
{
    m_ExpirationIsSet = false;
}
}


