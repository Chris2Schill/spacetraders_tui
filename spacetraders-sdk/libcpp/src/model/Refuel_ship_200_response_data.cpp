/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Refuel_ship_200_response_data.h"

namespace models {



Refuel_ship_200_response_data::Refuel_ship_200_response_data()
{
    m_AgentIsSet = false;
    m_FuelIsSet = false;
    m_TransactionIsSet = false;
}

Refuel_ship_200_response_data::~Refuel_ship_200_response_data()
{
}

void Refuel_ship_200_response_data::validate()
{
    // TODO: implement validation
}

web::json::value Refuel_ship_200_response_data::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_AgentIsSet)
    {
        val[utility::conversions::to_string_t(U("agent"))] = ModelBase::toJson(m_Agent);
    }
    if(m_FuelIsSet)
    {
        val[utility::conversions::to_string_t(U("fuel"))] = ModelBase::toJson(m_Fuel);
    }
    if(m_TransactionIsSet)
    {
        val[utility::conversions::to_string_t(U("transaction"))] = ModelBase::toJson(m_Transaction);
    }

    return val;
}

bool Refuel_ship_200_response_data::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("agent"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("agent")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Agent> refVal_setAgent;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAgent);
            setAgent(refVal_setAgent);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("fuel"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fuel")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ShipFuel> refVal_setFuel;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFuel);
            setFuel(refVal_setFuel);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("transaction"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("transaction")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<MarketTransaction> refVal_setTransaction;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTransaction);
            setTransaction(refVal_setTransaction);
        }
    }
    return ok;
}

void Refuel_ship_200_response_data::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_AgentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("agent")), m_Agent));
    }
    if(m_FuelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fuel")), m_Fuel));
    }
    if(m_TransactionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("transaction")), m_Transaction));
    }
}

bool Refuel_ship_200_response_data::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("agent"))))
    {
        std::shared_ptr<Agent> refVal_setAgent;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("agent"))), refVal_setAgent );
        setAgent(refVal_setAgent);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("fuel"))))
    {
        std::shared_ptr<ShipFuel> refVal_setFuel;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fuel"))), refVal_setFuel );
        setFuel(refVal_setFuel);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("transaction"))))
    {
        std::shared_ptr<MarketTransaction> refVal_setTransaction;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("transaction"))), refVal_setTransaction );
        setTransaction(refVal_setTransaction);
    }
    return ok;
}

std::shared_ptr<Agent> Refuel_ship_200_response_data::getAgent() const
{
    return m_Agent;
}

void Refuel_ship_200_response_data::setAgent(const std::shared_ptr<Agent>& value)
{
    m_Agent = value;
    m_AgentIsSet = true;
}

bool Refuel_ship_200_response_data::agentIsSet() const
{
    return m_AgentIsSet;
}

void Refuel_ship_200_response_data::unsetAgent()
{
    m_AgentIsSet = false;
}
std::shared_ptr<ShipFuel> Refuel_ship_200_response_data::getFuel() const
{
    return m_Fuel;
}

void Refuel_ship_200_response_data::setFuel(const std::shared_ptr<ShipFuel>& value)
{
    m_Fuel = value;
    m_FuelIsSet = true;
}

bool Refuel_ship_200_response_data::fuelIsSet() const
{
    return m_FuelIsSet;
}

void Refuel_ship_200_response_data::unsetFuel()
{
    m_FuelIsSet = false;
}
std::shared_ptr<MarketTransaction> Refuel_ship_200_response_data::getTransaction() const
{
    return m_Transaction;
}

void Refuel_ship_200_response_data::setTransaction(const std::shared_ptr<MarketTransaction>& value)
{
    m_Transaction = value;
    m_TransactionIsSet = true;
}

bool Refuel_ship_200_response_data::transactionIsSet() const
{
    return m_TransactionIsSet;
}

void Refuel_ship_200_response_data::unsetTransaction()
{
    m_TransactionIsSet = false;
}
}


