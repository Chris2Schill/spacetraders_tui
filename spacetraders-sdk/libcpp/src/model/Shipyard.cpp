/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Shipyard.h"

namespace models {



Shipyard::Shipyard()
{
    m_Symbol = utility::conversions::to_string_t("");
    m_SymbolIsSet = false;
    m_ShipTypesIsSet = false;
    m_TransactionsIsSet = false;
    m_ShipsIsSet = false;
    m_ModificationsFee = 0;
    m_ModificationsFeeIsSet = false;
}

Shipyard::~Shipyard()
{
}

void Shipyard::validate()
{
    // TODO: implement validation
}

web::json::value Shipyard::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_SymbolIsSet)
    {
        val[utility::conversions::to_string_t(U("symbol"))] = ModelBase::toJson(m_Symbol);
    }
    if(m_ShipTypesIsSet)
    {
        val[utility::conversions::to_string_t(U("shipTypes"))] = ModelBase::toJson(m_ShipTypes);
    }
    if(m_TransactionsIsSet)
    {
        val[utility::conversions::to_string_t(U("transactions"))] = ModelBase::toJson(m_Transactions);
    }
    if(m_ShipsIsSet)
    {
        val[utility::conversions::to_string_t(U("ships"))] = ModelBase::toJson(m_Ships);
    }
    if(m_ModificationsFeeIsSet)
    {
        val[utility::conversions::to_string_t(U("modificationsFee"))] = ModelBase::toJson(m_ModificationsFee);
    }

    return val;
}

bool Shipyard::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("symbol"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("symbol")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSymbol;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSymbol);
            setSymbol(refVal_setSymbol);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("shipTypes"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("shipTypes")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Shipyard_shipTypes_inner>> refVal_setShipTypes;
            ok &= ModelBase::fromJson(fieldValue, refVal_setShipTypes);
            setShipTypes(refVal_setShipTypes);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("transactions"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("transactions")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<ShipyardTransaction>> refVal_setTransactions;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTransactions);
            setTransactions(refVal_setTransactions);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("ships"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("ships")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<ShipyardShip>> refVal_setShips;
            ok &= ModelBase::fromJson(fieldValue, refVal_setShips);
            setShips(refVal_setShips);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("modificationsFee"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("modificationsFee")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setModificationsFee;
            ok &= ModelBase::fromJson(fieldValue, refVal_setModificationsFee);
            setModificationsFee(refVal_setModificationsFee);
        }
    }
    return ok;
}

void Shipyard::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_SymbolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("symbol")), m_Symbol));
    }
    if(m_ShipTypesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("shipTypes")), m_ShipTypes));
    }
    if(m_TransactionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("transactions")), m_Transactions));
    }
    if(m_ShipsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("ships")), m_Ships));
    }
    if(m_ModificationsFeeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("modificationsFee")), m_ModificationsFee));
    }
}

bool Shipyard::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("symbol"))))
    {
        utility::string_t refVal_setSymbol;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("symbol"))), refVal_setSymbol );
        setSymbol(refVal_setSymbol);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("shipTypes"))))
    {
        std::vector<std::shared_ptr<Shipyard_shipTypes_inner>> refVal_setShipTypes;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("shipTypes"))), refVal_setShipTypes );
        setShipTypes(refVal_setShipTypes);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("transactions"))))
    {
        std::vector<std::shared_ptr<ShipyardTransaction>> refVal_setTransactions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("transactions"))), refVal_setTransactions );
        setTransactions(refVal_setTransactions);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("ships"))))
    {
        std::vector<std::shared_ptr<ShipyardShip>> refVal_setShips;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("ships"))), refVal_setShips );
        setShips(refVal_setShips);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("modificationsFee"))))
    {
        int32_t refVal_setModificationsFee;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("modificationsFee"))), refVal_setModificationsFee );
        setModificationsFee(refVal_setModificationsFee);
    }
    return ok;
}

utility::string_t Shipyard::getSymbol() const
{
    return m_Symbol;
}

void Shipyard::setSymbol(const utility::string_t& value)
{
    m_Symbol = value;
    m_SymbolIsSet = true;
}

bool Shipyard::symbolIsSet() const
{
    return m_SymbolIsSet;
}

void Shipyard::unsetSymbol()
{
    m_SymbolIsSet = false;
}
std::vector<std::shared_ptr<Shipyard_shipTypes_inner>>& Shipyard::getShipTypes()
{
    return m_ShipTypes;
}

void Shipyard::setShipTypes(const std::vector<std::shared_ptr<Shipyard_shipTypes_inner>>& value)
{
    m_ShipTypes = value;
    m_ShipTypesIsSet = true;
}

bool Shipyard::shipTypesIsSet() const
{
    return m_ShipTypesIsSet;
}

void Shipyard::unsetShipTypes()
{
    m_ShipTypesIsSet = false;
}
std::vector<std::shared_ptr<ShipyardTransaction>>& Shipyard::getTransactions()
{
    return m_Transactions;
}

void Shipyard::setTransactions(const std::vector<std::shared_ptr<ShipyardTransaction>>& value)
{
    m_Transactions = value;
    m_TransactionsIsSet = true;
}

bool Shipyard::transactionsIsSet() const
{
    return m_TransactionsIsSet;
}

void Shipyard::unsetTransactions()
{
    m_TransactionsIsSet = false;
}
std::vector<std::shared_ptr<ShipyardShip>>& Shipyard::getShips()
{
    return m_Ships;
}

void Shipyard::setShips(const std::vector<std::shared_ptr<ShipyardShip>>& value)
{
    m_Ships = value;
    m_ShipsIsSet = true;
}

bool Shipyard::shipsIsSet() const
{
    return m_ShipsIsSet;
}

void Shipyard::unsetShips()
{
    m_ShipsIsSet = false;
}
int32_t Shipyard::getModificationsFee() const
{
    return m_ModificationsFee;
}

void Shipyard::setModificationsFee(int32_t value)
{
    m_ModificationsFee = value;
    m_ModificationsFeeIsSet = true;
}

bool Shipyard::modificationsFeeIsSet() const
{
    return m_ModificationsFeeIsSet;
}

void Shipyard::unsetModificationsFee()
{
    m_ModificationsFeeIsSet = false;
}
}


