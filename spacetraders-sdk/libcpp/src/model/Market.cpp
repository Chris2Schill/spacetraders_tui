/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Market.h"

namespace models {



Market::Market()
{
    m_Symbol = utility::conversions::to_string_t("");
    m_SymbolIsSet = false;
    m_ExportsIsSet = false;
    m_ImportsIsSet = false;
    m_ExchangeIsSet = false;
    m_TransactionsIsSet = false;
    m_TradeGoodsIsSet = false;
}

Market::~Market()
{
}

void Market::validate()
{
    // TODO: implement validation
}

web::json::value Market::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_SymbolIsSet)
    {
        val[utility::conversions::to_string_t(U("symbol"))] = ModelBase::toJson(m_Symbol);
    }
    if(m_ExportsIsSet)
    {
        val[utility::conversions::to_string_t(U("exports"))] = ModelBase::toJson(m_Exports);
    }
    if(m_ImportsIsSet)
    {
        val[utility::conversions::to_string_t(U("imports"))] = ModelBase::toJson(m_Imports);
    }
    if(m_ExchangeIsSet)
    {
        val[utility::conversions::to_string_t(U("exchange"))] = ModelBase::toJson(m_Exchange);
    }
    if(m_TransactionsIsSet)
    {
        val[utility::conversions::to_string_t(U("transactions"))] = ModelBase::toJson(m_Transactions);
    }
    if(m_TradeGoodsIsSet)
    {
        val[utility::conversions::to_string_t(U("tradeGoods"))] = ModelBase::toJson(m_TradeGoods);
    }

    return val;
}

bool Market::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("symbol"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("symbol")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSymbol;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSymbol);
            setSymbol(refVal_setSymbol);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("exports"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("exports")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<TradeGood>> refVal_setExports;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExports);
            setExports(refVal_setExports);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("imports"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("imports")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<TradeGood>> refVal_setImports;
            ok &= ModelBase::fromJson(fieldValue, refVal_setImports);
            setImports(refVal_setImports);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("exchange"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("exchange")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<TradeGood>> refVal_setExchange;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExchange);
            setExchange(refVal_setExchange);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("transactions"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("transactions")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<MarketTransaction>> refVal_setTransactions;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTransactions);
            setTransactions(refVal_setTransactions);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tradeGoods"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tradeGoods")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<MarketTradeGood>> refVal_setTradeGoods;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTradeGoods);
            setTradeGoods(refVal_setTradeGoods);
        }
    }
    return ok;
}

void Market::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_SymbolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("symbol")), m_Symbol));
    }
    if(m_ExportsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("exports")), m_Exports));
    }
    if(m_ImportsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("imports")), m_Imports));
    }
    if(m_ExchangeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("exchange")), m_Exchange));
    }
    if(m_TransactionsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("transactions")), m_Transactions));
    }
    if(m_TradeGoodsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tradeGoods")), m_TradeGoods));
    }
}

bool Market::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("symbol"))))
    {
        utility::string_t refVal_setSymbol;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("symbol"))), refVal_setSymbol );
        setSymbol(refVal_setSymbol);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("exports"))))
    {
        std::vector<std::shared_ptr<TradeGood>> refVal_setExports;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("exports"))), refVal_setExports );
        setExports(refVal_setExports);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("imports"))))
    {
        std::vector<std::shared_ptr<TradeGood>> refVal_setImports;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("imports"))), refVal_setImports );
        setImports(refVal_setImports);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("exchange"))))
    {
        std::vector<std::shared_ptr<TradeGood>> refVal_setExchange;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("exchange"))), refVal_setExchange );
        setExchange(refVal_setExchange);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("transactions"))))
    {
        std::vector<std::shared_ptr<MarketTransaction>> refVal_setTransactions;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("transactions"))), refVal_setTransactions );
        setTransactions(refVal_setTransactions);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tradeGoods"))))
    {
        std::vector<std::shared_ptr<MarketTradeGood>> refVal_setTradeGoods;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tradeGoods"))), refVal_setTradeGoods );
        setTradeGoods(refVal_setTradeGoods);
    }
    return ok;
}

utility::string_t Market::getSymbol() const
{
    return m_Symbol;
}

void Market::setSymbol(const utility::string_t& value)
{
    m_Symbol = value;
    m_SymbolIsSet = true;
}

bool Market::symbolIsSet() const
{
    return m_SymbolIsSet;
}

void Market::unsetSymbol()
{
    m_SymbolIsSet = false;
}
std::vector<std::shared_ptr<TradeGood>>& Market::getExports()
{
    return m_Exports;
}

void Market::setExports(const std::vector<std::shared_ptr<TradeGood>>& value)
{
    m_Exports = value;
    m_ExportsIsSet = true;
}

bool Market::exportsIsSet() const
{
    return m_ExportsIsSet;
}

void Market::unsetExports()
{
    m_ExportsIsSet = false;
}
std::vector<std::shared_ptr<TradeGood>>& Market::getImports()
{
    return m_Imports;
}

void Market::setImports(const std::vector<std::shared_ptr<TradeGood>>& value)
{
    m_Imports = value;
    m_ImportsIsSet = true;
}

bool Market::importsIsSet() const
{
    return m_ImportsIsSet;
}

void Market::unsetImports()
{
    m_ImportsIsSet = false;
}
std::vector<std::shared_ptr<TradeGood>>& Market::getExchange()
{
    return m_Exchange;
}

void Market::setExchange(const std::vector<std::shared_ptr<TradeGood>>& value)
{
    m_Exchange = value;
    m_ExchangeIsSet = true;
}

bool Market::exchangeIsSet() const
{
    return m_ExchangeIsSet;
}

void Market::unsetExchange()
{
    m_ExchangeIsSet = false;
}
std::vector<std::shared_ptr<MarketTransaction>>& Market::getTransactions()
{
    return m_Transactions;
}

void Market::setTransactions(const std::vector<std::shared_ptr<MarketTransaction>>& value)
{
    m_Transactions = value;
    m_TransactionsIsSet = true;
}

bool Market::transactionsIsSet() const
{
    return m_TransactionsIsSet;
}

void Market::unsetTransactions()
{
    m_TransactionsIsSet = false;
}
std::vector<std::shared_ptr<MarketTradeGood>>& Market::getTradeGoods()
{
    return m_TradeGoods;
}

void Market::setTradeGoods(const std::vector<std::shared_ptr<MarketTradeGood>>& value)
{
    m_TradeGoods = value;
    m_TradeGoodsIsSet = true;
}

bool Market::tradeGoodsIsSet() const
{
    return m_TradeGoodsIsSet;
}

void Market::unsetTradeGoods()
{
    m_TradeGoodsIsSet = false;
}
}


