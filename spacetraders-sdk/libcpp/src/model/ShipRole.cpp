/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ShipRole.h"

namespace models {


namespace
{
using EnumUnderlyingType = utility::string_t;

ShipRole::eShipRole toEnum(const EnumUnderlyingType& val)
{
    if (val == utility::conversions::to_string_t(U("FABRICATOR")))
        return ShipRole::eShipRole::ShipRole_FABRICATOR;
    if (val == utility::conversions::to_string_t(U("HARVESTER")))
        return ShipRole::eShipRole::ShipRole_HARVESTER;
    if (val == utility::conversions::to_string_t(U("HAULER")))
        return ShipRole::eShipRole::ShipRole_HAULER;
    if (val == utility::conversions::to_string_t(U("INTERCEPTOR")))
        return ShipRole::eShipRole::ShipRole_INTERCEPTOR;
    if (val == utility::conversions::to_string_t(U("EXCAVATOR")))
        return ShipRole::eShipRole::ShipRole_EXCAVATOR;
    if (val == utility::conversions::to_string_t(U("TRANSPORT")))
        return ShipRole::eShipRole::ShipRole_TRANSPORT;
    if (val == utility::conversions::to_string_t(U("REPAIR")))
        return ShipRole::eShipRole::ShipRole_REPAIR;
    if (val == utility::conversions::to_string_t(U("SURVEYOR")))
        return ShipRole::eShipRole::ShipRole_SURVEYOR;
    if (val == utility::conversions::to_string_t(U("COMMAND")))
        return ShipRole::eShipRole::ShipRole_COMMAND;
    if (val == utility::conversions::to_string_t(U("CARRIER")))
        return ShipRole::eShipRole::ShipRole_CARRIER;
    if (val == utility::conversions::to_string_t(U("PATROL")))
        return ShipRole::eShipRole::ShipRole_PATROL;
    if (val == utility::conversions::to_string_t(U("SATELLITE")))
        return ShipRole::eShipRole::ShipRole_SATELLITE;
    if (val == utility::conversions::to_string_t(U("EXPLORER")))
        return ShipRole::eShipRole::ShipRole_EXPLORER;
    if (val == utility::conversions::to_string_t(U("REFINERY")))
        return ShipRole::eShipRole::ShipRole_REFINERY;
    return {};
}

EnumUnderlyingType fromEnum(ShipRole::eShipRole e)
{
    switch (e)
    {
    case ShipRole::eShipRole::ShipRole_FABRICATOR:
        return U("FABRICATOR");
    case ShipRole::eShipRole::ShipRole_HARVESTER:
        return U("HARVESTER");
    case ShipRole::eShipRole::ShipRole_HAULER:
        return U("HAULER");
    case ShipRole::eShipRole::ShipRole_INTERCEPTOR:
        return U("INTERCEPTOR");
    case ShipRole::eShipRole::ShipRole_EXCAVATOR:
        return U("EXCAVATOR");
    case ShipRole::eShipRole::ShipRole_TRANSPORT:
        return U("TRANSPORT");
    case ShipRole::eShipRole::ShipRole_REPAIR:
        return U("REPAIR");
    case ShipRole::eShipRole::ShipRole_SURVEYOR:
        return U("SURVEYOR");
    case ShipRole::eShipRole::ShipRole_COMMAND:
        return U("COMMAND");
    case ShipRole::eShipRole::ShipRole_CARRIER:
        return U("CARRIER");
    case ShipRole::eShipRole::ShipRole_PATROL:
        return U("PATROL");
    case ShipRole::eShipRole::ShipRole_SATELLITE:
        return U("SATELLITE");
    case ShipRole::eShipRole::ShipRole_EXPLORER:
        return U("EXPLORER");
    case ShipRole::eShipRole::ShipRole_REFINERY:
        return U("REFINERY");
    default:
        break;
    }
    return {};
}
}

ShipRole::ShipRole()
{
}

ShipRole::~ShipRole()
{
}

void ShipRole::validate()
{
    // TODO: implement validation
}

web::json::value ShipRole::toJson() const
{
    auto val = fromEnum(m_value);
    return web::json::value(val);
}

bool ShipRole::fromJson(const web::json::value& val)
{
    m_value = toEnum(val.as_string());
    return true;
}

void ShipRole::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }

    auto e = fromEnum(m_value);
    multipart->add(ModelBase::toHttpContent(namePrefix, e));
}

bool ShipRole::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }
    {
        EnumUnderlyingType e;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), e);
        if (ok)
        {
            auto v = toEnum(e);
            setValue(v);
        }
    }
    return ok;
}

ShipRole::eShipRole ShipRole::getValue() const
{
   return m_value;
}

void ShipRole::setValue(ShipRole::eShipRole const value)
{
   m_value = value;
}


}


