/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/MarketTradeGood.h"

namespace models {



MarketTradeGood::MarketTradeGood()
{
    m_SymbolIsSet = false;
    m_Type = utility::conversions::to_string_t("");
    m_TypeIsSet = false;
    m_TradeVolume = 0;
    m_TradeVolumeIsSet = false;
    m_SupplyIsSet = false;
    m_ActivityIsSet = false;
    m_PurchasePrice = 0;
    m_PurchasePriceIsSet = false;
    m_SellPrice = 0;
    m_SellPriceIsSet = false;
}

MarketTradeGood::~MarketTradeGood()
{
}

void MarketTradeGood::validate()
{
    // TODO: implement validation
}

web::json::value MarketTradeGood::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_SymbolIsSet)
    {
        val[utility::conversions::to_string_t(U("symbol"))] = ModelBase::toJson(m_Symbol);
    }
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t(U("type"))] = ModelBase::toJson(m_Type);
    }
    if(m_TradeVolumeIsSet)
    {
        val[utility::conversions::to_string_t(U("tradeVolume"))] = ModelBase::toJson(m_TradeVolume);
    }
    if(m_SupplyIsSet)
    {
        val[utility::conversions::to_string_t(U("supply"))] = ModelBase::toJson(m_Supply);
    }
    if(m_ActivityIsSet)
    {
        val[utility::conversions::to_string_t(U("activity"))] = ModelBase::toJson(m_Activity);
    }
    if(m_PurchasePriceIsSet)
    {
        val[utility::conversions::to_string_t(U("purchasePrice"))] = ModelBase::toJson(m_PurchasePrice);
    }
    if(m_SellPriceIsSet)
    {
        val[utility::conversions::to_string_t(U("sellPrice"))] = ModelBase::toJson(m_SellPrice);
    }

    return val;
}

bool MarketTradeGood::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("symbol"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("symbol")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<TradeSymbol> refVal_setSymbol;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSymbol);
            setSymbol(refVal_setSymbol);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setType);
            setType(refVal_setType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tradeVolume"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tradeVolume")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setTradeVolume;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTradeVolume);
            setTradeVolume(refVal_setTradeVolume);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("supply"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("supply")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<SupplyLevel> refVal_setSupply;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSupply);
            setSupply(refVal_setSupply);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("activity"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("activity")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ActivityLevel> refVal_setActivity;
            ok &= ModelBase::fromJson(fieldValue, refVal_setActivity);
            setActivity(refVal_setActivity);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("purchasePrice"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("purchasePrice")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setPurchasePrice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPurchasePrice);
            setPurchasePrice(refVal_setPurchasePrice);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("sellPrice"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("sellPrice")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setSellPrice;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSellPrice);
            setSellPrice(refVal_setSellPrice);
        }
    }
    return ok;
}

void MarketTradeGood::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_SymbolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("symbol")), m_Symbol));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("type")), m_Type));
    }
    if(m_TradeVolumeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tradeVolume")), m_TradeVolume));
    }
    if(m_SupplyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("supply")), m_Supply));
    }
    if(m_ActivityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("activity")), m_Activity));
    }
    if(m_PurchasePriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("purchasePrice")), m_PurchasePrice));
    }
    if(m_SellPriceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("sellPrice")), m_SellPrice));
    }
}

bool MarketTradeGood::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("symbol"))))
    {
        std::shared_ptr<TradeSymbol> refVal_setSymbol;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("symbol"))), refVal_setSymbol );
        setSymbol(refVal_setSymbol);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("type"))))
    {
        utility::string_t refVal_setType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("type"))), refVal_setType );
        setType(refVal_setType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tradeVolume"))))
    {
        int32_t refVal_setTradeVolume;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tradeVolume"))), refVal_setTradeVolume );
        setTradeVolume(refVal_setTradeVolume);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("supply"))))
    {
        std::shared_ptr<SupplyLevel> refVal_setSupply;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("supply"))), refVal_setSupply );
        setSupply(refVal_setSupply);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("activity"))))
    {
        std::shared_ptr<ActivityLevel> refVal_setActivity;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("activity"))), refVal_setActivity );
        setActivity(refVal_setActivity);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("purchasePrice"))))
    {
        int32_t refVal_setPurchasePrice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("purchasePrice"))), refVal_setPurchasePrice );
        setPurchasePrice(refVal_setPurchasePrice);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("sellPrice"))))
    {
        int32_t refVal_setSellPrice;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("sellPrice"))), refVal_setSellPrice );
        setSellPrice(refVal_setSellPrice);
    }
    return ok;
}

std::shared_ptr<TradeSymbol> MarketTradeGood::getSymbol() const
{
    return m_Symbol;
}

void MarketTradeGood::setSymbol(const std::shared_ptr<TradeSymbol>& value)
{
    m_Symbol = value;
    m_SymbolIsSet = true;
}

bool MarketTradeGood::symbolIsSet() const
{
    return m_SymbolIsSet;
}

void MarketTradeGood::unsetSymbol()
{
    m_SymbolIsSet = false;
}
utility::string_t MarketTradeGood::getType() const
{
    return m_Type;
}

void MarketTradeGood::setType(const utility::string_t& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool MarketTradeGood::typeIsSet() const
{
    return m_TypeIsSet;
}

void MarketTradeGood::unsetType()
{
    m_TypeIsSet = false;
}
int32_t MarketTradeGood::getTradeVolume() const
{
    return m_TradeVolume;
}

void MarketTradeGood::setTradeVolume(int32_t value)
{
    m_TradeVolume = value;
    m_TradeVolumeIsSet = true;
}

bool MarketTradeGood::tradeVolumeIsSet() const
{
    return m_TradeVolumeIsSet;
}

void MarketTradeGood::unsetTradeVolume()
{
    m_TradeVolumeIsSet = false;
}
std::shared_ptr<SupplyLevel> MarketTradeGood::getSupply() const
{
    return m_Supply;
}

void MarketTradeGood::setSupply(const std::shared_ptr<SupplyLevel>& value)
{
    m_Supply = value;
    m_SupplyIsSet = true;
}

bool MarketTradeGood::supplyIsSet() const
{
    return m_SupplyIsSet;
}

void MarketTradeGood::unsetSupply()
{
    m_SupplyIsSet = false;
}
std::shared_ptr<ActivityLevel> MarketTradeGood::getActivity() const
{
    return m_Activity;
}

void MarketTradeGood::setActivity(const std::shared_ptr<ActivityLevel>& value)
{
    m_Activity = value;
    m_ActivityIsSet = true;
}

bool MarketTradeGood::activityIsSet() const
{
    return m_ActivityIsSet;
}

void MarketTradeGood::unsetActivity()
{
    m_ActivityIsSet = false;
}
int32_t MarketTradeGood::getPurchasePrice() const
{
    return m_PurchasePrice;
}

void MarketTradeGood::setPurchasePrice(int32_t value)
{
    m_PurchasePrice = value;
    m_PurchasePriceIsSet = true;
}

bool MarketTradeGood::purchasePriceIsSet() const
{
    return m_PurchasePriceIsSet;
}

void MarketTradeGood::unsetPurchasePrice()
{
    m_PurchasePriceIsSet = false;
}
int32_t MarketTradeGood::getSellPrice() const
{
    return m_SellPrice;
}

void MarketTradeGood::setSellPrice(int32_t value)
{
    m_SellPrice = value;
    m_SellPriceIsSet = true;
}

bool MarketTradeGood::sellPriceIsSet() const
{
    return m_SellPriceIsSet;
}

void MarketTradeGood::unsetSellPrice()
{
    m_SellPriceIsSet = false;
}
}


