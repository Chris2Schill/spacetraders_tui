/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Ship_Refine_201_Response_data.h"

namespace models {



Ship_Refine_201_Response_data::Ship_Refine_201_Response_data()
{
    m_CargoIsSet = false;
    m_CooldownIsSet = false;
    m_ProducedIsSet = false;
    m_ConsumedIsSet = false;
}

Ship_Refine_201_Response_data::~Ship_Refine_201_Response_data()
{
}

void Ship_Refine_201_Response_data::validate()
{
    // TODO: implement validation
}

web::json::value Ship_Refine_201_Response_data::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_CargoIsSet)
    {
        val[utility::conversions::to_string_t(U("cargo"))] = ModelBase::toJson(m_Cargo);
    }
    if(m_CooldownIsSet)
    {
        val[utility::conversions::to_string_t(U("cooldown"))] = ModelBase::toJson(m_Cooldown);
    }
    if(m_ProducedIsSet)
    {
        val[utility::conversions::to_string_t(U("produced"))] = ModelBase::toJson(m_Produced);
    }
    if(m_ConsumedIsSet)
    {
        val[utility::conversions::to_string_t(U("consumed"))] = ModelBase::toJson(m_Consumed);
    }

    return val;
}

bool Ship_Refine_201_Response_data::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("cargo"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cargo")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ShipCargo> refVal_setCargo;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCargo);
            setCargo(refVal_setCargo);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cooldown"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cooldown")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Cooldown> refVal_setCooldown;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCooldown);
            setCooldown(refVal_setCooldown);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("produced"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("produced")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Ship_Refine_201_Response_data_produced_inner>> refVal_setProduced;
            ok &= ModelBase::fromJson(fieldValue, refVal_setProduced);
            setProduced(refVal_setProduced);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("consumed"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("consumed")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Ship_Refine_201_Response_data_produced_inner>> refVal_setConsumed;
            ok &= ModelBase::fromJson(fieldValue, refVal_setConsumed);
            setConsumed(refVal_setConsumed);
        }
    }
    return ok;
}

void Ship_Refine_201_Response_data::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_CargoIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cargo")), m_Cargo));
    }
    if(m_CooldownIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cooldown")), m_Cooldown));
    }
    if(m_ProducedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("produced")), m_Produced));
    }
    if(m_ConsumedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("consumed")), m_Consumed));
    }
}

bool Ship_Refine_201_Response_data::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("cargo"))))
    {
        std::shared_ptr<ShipCargo> refVal_setCargo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cargo"))), refVal_setCargo );
        setCargo(refVal_setCargo);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cooldown"))))
    {
        std::shared_ptr<Cooldown> refVal_setCooldown;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cooldown"))), refVal_setCooldown );
        setCooldown(refVal_setCooldown);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("produced"))))
    {
        std::vector<std::shared_ptr<Ship_Refine_201_Response_data_produced_inner>> refVal_setProduced;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("produced"))), refVal_setProduced );
        setProduced(refVal_setProduced);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("consumed"))))
    {
        std::vector<std::shared_ptr<Ship_Refine_201_Response_data_produced_inner>> refVal_setConsumed;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("consumed"))), refVal_setConsumed );
        setConsumed(refVal_setConsumed);
    }
    return ok;
}

std::shared_ptr<ShipCargo> Ship_Refine_201_Response_data::getCargo() const
{
    return m_Cargo;
}

void Ship_Refine_201_Response_data::setCargo(const std::shared_ptr<ShipCargo>& value)
{
    m_Cargo = value;
    m_CargoIsSet = true;
}

bool Ship_Refine_201_Response_data::cargoIsSet() const
{
    return m_CargoIsSet;
}

void Ship_Refine_201_Response_data::unsetCargo()
{
    m_CargoIsSet = false;
}
std::shared_ptr<Cooldown> Ship_Refine_201_Response_data::getCooldown() const
{
    return m_Cooldown;
}

void Ship_Refine_201_Response_data::setCooldown(const std::shared_ptr<Cooldown>& value)
{
    m_Cooldown = value;
    m_CooldownIsSet = true;
}

bool Ship_Refine_201_Response_data::cooldownIsSet() const
{
    return m_CooldownIsSet;
}

void Ship_Refine_201_Response_data::unsetCooldown()
{
    m_CooldownIsSet = false;
}
std::vector<std::shared_ptr<Ship_Refine_201_Response_data_produced_inner>>& Ship_Refine_201_Response_data::getProduced()
{
    return m_Produced;
}

void Ship_Refine_201_Response_data::setProduced(const std::vector<std::shared_ptr<Ship_Refine_201_Response_data_produced_inner>>& value)
{
    m_Produced = value;
    m_ProducedIsSet = true;
}

bool Ship_Refine_201_Response_data::producedIsSet() const
{
    return m_ProducedIsSet;
}

void Ship_Refine_201_Response_data::unsetProduced()
{
    m_ProducedIsSet = false;
}
std::vector<std::shared_ptr<Ship_Refine_201_Response_data_produced_inner>>& Ship_Refine_201_Response_data::getConsumed()
{
    return m_Consumed;
}

void Ship_Refine_201_Response_data::setConsumed(const std::vector<std::shared_ptr<Ship_Refine_201_Response_data_produced_inner>>& value)
{
    m_Consumed = value;
    m_ConsumedIsSet = true;
}

bool Ship_Refine_201_Response_data::consumedIsSet() const
{
    return m_ConsumedIsSet;
}

void Ship_Refine_201_Response_data::unsetConsumed()
{
    m_ConsumedIsSet = false;
}
}


