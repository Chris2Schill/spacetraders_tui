/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Create_chart_201_response_data.h"

namespace models {



Create_chart_201_response_data::Create_chart_201_response_data()
{
    m_ChartIsSet = false;
    m_WaypointIsSet = false;
}

Create_chart_201_response_data::~Create_chart_201_response_data()
{
}

void Create_chart_201_response_data::validate()
{
    // TODO: implement validation
}

web::json::value Create_chart_201_response_data::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ChartIsSet)
    {
        val[utility::conversions::to_string_t(U("chart"))] = ModelBase::toJson(m_Chart);
    }
    if(m_WaypointIsSet)
    {
        val[utility::conversions::to_string_t(U("waypoint"))] = ModelBase::toJson(m_Waypoint);
    }

    return val;
}

bool Create_chart_201_response_data::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("chart"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("chart")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Chart> refVal_setChart;
            ok &= ModelBase::fromJson(fieldValue, refVal_setChart);
            setChart(refVal_setChart);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("waypoint"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("waypoint")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Waypoint> refVal_setWaypoint;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWaypoint);
            setWaypoint(refVal_setWaypoint);
        }
    }
    return ok;
}

void Create_chart_201_response_data::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_ChartIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("chart")), m_Chart));
    }
    if(m_WaypointIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("waypoint")), m_Waypoint));
    }
}

bool Create_chart_201_response_data::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("chart"))))
    {
        std::shared_ptr<Chart> refVal_setChart;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("chart"))), refVal_setChart );
        setChart(refVal_setChart);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("waypoint"))))
    {
        std::shared_ptr<Waypoint> refVal_setWaypoint;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("waypoint"))), refVal_setWaypoint );
        setWaypoint(refVal_setWaypoint);
    }
    return ok;
}

std::shared_ptr<Chart> Create_chart_201_response_data::getChart() const
{
    return m_Chart;
}

void Create_chart_201_response_data::setChart(const std::shared_ptr<Chart>& value)
{
    m_Chart = value;
    m_ChartIsSet = true;
}

bool Create_chart_201_response_data::chartIsSet() const
{
    return m_ChartIsSet;
}

void Create_chart_201_response_data::unsetChart()
{
    m_ChartIsSet = false;
}
std::shared_ptr<Waypoint> Create_chart_201_response_data::getWaypoint() const
{
    return m_Waypoint;
}

void Create_chart_201_response_data::setWaypoint(const std::shared_ptr<Waypoint>& value)
{
    m_Waypoint = value;
    m_WaypointIsSet = true;
}

bool Create_chart_201_response_data::waypointIsSet() const
{
    return m_WaypointIsSet;
}

void Create_chart_201_response_data::unsetWaypoint()
{
    m_WaypointIsSet = false;
}
}


