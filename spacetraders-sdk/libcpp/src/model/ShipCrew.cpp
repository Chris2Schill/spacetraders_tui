/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ShipCrew.h"

namespace models {



ShipCrew::ShipCrew()
{
    m_Current = 0;
    m_CurrentIsSet = false;
    m_Required = 0;
    m_RequiredIsSet = false;
    m_Capacity = 0;
    m_CapacityIsSet = false;
    m_Rotation = utility::conversions::to_string_t("");
    m_RotationIsSet = false;
    m_Morale = 0;
    m_MoraleIsSet = false;
    m_Wages = 0;
    m_WagesIsSet = false;
}

ShipCrew::~ShipCrew()
{
}

void ShipCrew::validate()
{
    // TODO: implement validation
}

web::json::value ShipCrew::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_CurrentIsSet)
    {
        val[utility::conversions::to_string_t(U("current"))] = ModelBase::toJson(m_Current);
    }
    if(m_RequiredIsSet)
    {
        val[utility::conversions::to_string_t(U("required"))] = ModelBase::toJson(m_Required);
    }
    if(m_CapacityIsSet)
    {
        val[utility::conversions::to_string_t(U("capacity"))] = ModelBase::toJson(m_Capacity);
    }
    if(m_RotationIsSet)
    {
        val[utility::conversions::to_string_t(U("rotation"))] = ModelBase::toJson(m_Rotation);
    }
    if(m_MoraleIsSet)
    {
        val[utility::conversions::to_string_t(U("morale"))] = ModelBase::toJson(m_Morale);
    }
    if(m_WagesIsSet)
    {
        val[utility::conversions::to_string_t(U("wages"))] = ModelBase::toJson(m_Wages);
    }

    return val;
}

bool ShipCrew::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("current"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("current")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCurrent;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCurrent);
            setCurrent(refVal_setCurrent);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("required"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("required")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setRequired;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRequired);
            setRequired(refVal_setRequired);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("capacity"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("capacity")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCapacity;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCapacity);
            setCapacity(refVal_setCapacity);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("rotation"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("rotation")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setRotation;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRotation);
            setRotation(refVal_setRotation);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("morale"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("morale")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setMorale;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMorale);
            setMorale(refVal_setMorale);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("wages"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("wages")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setWages;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWages);
            setWages(refVal_setWages);
        }
    }
    return ok;
}

void ShipCrew::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_CurrentIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("current")), m_Current));
    }
    if(m_RequiredIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("required")), m_Required));
    }
    if(m_CapacityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("capacity")), m_Capacity));
    }
    if(m_RotationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("rotation")), m_Rotation));
    }
    if(m_MoraleIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("morale")), m_Morale));
    }
    if(m_WagesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("wages")), m_Wages));
    }
}

bool ShipCrew::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("current"))))
    {
        int32_t refVal_setCurrent;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("current"))), refVal_setCurrent );
        setCurrent(refVal_setCurrent);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("required"))))
    {
        int32_t refVal_setRequired;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("required"))), refVal_setRequired );
        setRequired(refVal_setRequired);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("capacity"))))
    {
        int32_t refVal_setCapacity;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("capacity"))), refVal_setCapacity );
        setCapacity(refVal_setCapacity);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("rotation"))))
    {
        utility::string_t refVal_setRotation;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("rotation"))), refVal_setRotation );
        setRotation(refVal_setRotation);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("morale"))))
    {
        int32_t refVal_setMorale;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("morale"))), refVal_setMorale );
        setMorale(refVal_setMorale);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("wages"))))
    {
        int32_t refVal_setWages;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("wages"))), refVal_setWages );
        setWages(refVal_setWages);
    }
    return ok;
}

int32_t ShipCrew::getCurrent() const
{
    return m_Current;
}

void ShipCrew::setCurrent(int32_t value)
{
    m_Current = value;
    m_CurrentIsSet = true;
}

bool ShipCrew::currentIsSet() const
{
    return m_CurrentIsSet;
}

void ShipCrew::unsetCurrent()
{
    m_CurrentIsSet = false;
}
int32_t ShipCrew::getRequired() const
{
    return m_Required;
}

void ShipCrew::setRequired(int32_t value)
{
    m_Required = value;
    m_RequiredIsSet = true;
}

bool ShipCrew::requiredIsSet() const
{
    return m_RequiredIsSet;
}

void ShipCrew::unsetRequired()
{
    m_RequiredIsSet = false;
}
int32_t ShipCrew::getCapacity() const
{
    return m_Capacity;
}

void ShipCrew::setCapacity(int32_t value)
{
    m_Capacity = value;
    m_CapacityIsSet = true;
}

bool ShipCrew::capacityIsSet() const
{
    return m_CapacityIsSet;
}

void ShipCrew::unsetCapacity()
{
    m_CapacityIsSet = false;
}
utility::string_t ShipCrew::getRotation() const
{
    return m_Rotation;
}

void ShipCrew::setRotation(const utility::string_t& value)
{
    m_Rotation = value;
    m_RotationIsSet = true;
}

bool ShipCrew::rotationIsSet() const
{
    return m_RotationIsSet;
}

void ShipCrew::unsetRotation()
{
    m_RotationIsSet = false;
}
int32_t ShipCrew::getMorale() const
{
    return m_Morale;
}

void ShipCrew::setMorale(int32_t value)
{
    m_Morale = value;
    m_MoraleIsSet = true;
}

bool ShipCrew::moraleIsSet() const
{
    return m_MoraleIsSet;
}

void ShipCrew::unsetMorale()
{
    m_MoraleIsSet = false;
}
int32_t ShipCrew::getWages() const
{
    return m_Wages;
}

void ShipCrew::setWages(int32_t value)
{
    m_Wages = value;
    m_WagesIsSet = true;
}

bool ShipCrew::wagesIsSet() const
{
    return m_WagesIsSet;
}

void ShipCrew::unsetWages()
{
    m_WagesIsSet = false;
}
}


