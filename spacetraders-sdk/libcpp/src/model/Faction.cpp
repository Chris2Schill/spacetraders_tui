/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Faction.h"

namespace models {



Faction::Faction()
{
    m_SymbolIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_Headquarters = utility::conversions::to_string_t("");
    m_HeadquartersIsSet = false;
    m_TraitsIsSet = false;
    m_IsRecruiting = false;
    m_IsRecruitingIsSet = false;
}

Faction::~Faction()
{
}

void Faction::validate()
{
    // TODO: implement validation
}

web::json::value Faction::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_SymbolIsSet)
    {
        val[utility::conversions::to_string_t(U("symbol"))] = ModelBase::toJson(m_Symbol);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t(U("description"))] = ModelBase::toJson(m_Description);
    }
    if(m_HeadquartersIsSet)
    {
        val[utility::conversions::to_string_t(U("headquarters"))] = ModelBase::toJson(m_Headquarters);
    }
    if(m_TraitsIsSet)
    {
        val[utility::conversions::to_string_t(U("traits"))] = ModelBase::toJson(m_Traits);
    }
    if(m_IsRecruitingIsSet)
    {
        val[utility::conversions::to_string_t(U("isRecruiting"))] = ModelBase::toJson(m_IsRecruiting);
    }

    return val;
}

bool Faction::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("symbol"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("symbol")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<FactionSymbol> refVal_setSymbol;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSymbol);
            setSymbol(refVal_setSymbol);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDescription);
            setDescription(refVal_setDescription);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("headquarters"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("headquarters")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setHeadquarters;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHeadquarters);
            setHeadquarters(refVal_setHeadquarters);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("traits"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("traits")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<FactionTrait>> refVal_setTraits;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTraits);
            setTraits(refVal_setTraits);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("isRecruiting"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("isRecruiting")));
        if(!fieldValue.is_null())
        {
            bool refVal_setIsRecruiting;
            ok &= ModelBase::fromJson(fieldValue, refVal_setIsRecruiting);
            setIsRecruiting(refVal_setIsRecruiting);
        }
    }
    return ok;
}

void Faction::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_SymbolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("symbol")), m_Symbol));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("description")), m_Description));
    }
    if(m_HeadquartersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("headquarters")), m_Headquarters));
    }
    if(m_TraitsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("traits")), m_Traits));
    }
    if(m_IsRecruitingIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("isRecruiting")), m_IsRecruiting));
    }
}

bool Faction::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("symbol"))))
    {
        std::shared_ptr<FactionSymbol> refVal_setSymbol;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("symbol"))), refVal_setSymbol );
        setSymbol(refVal_setSymbol);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("description"))))
    {
        utility::string_t refVal_setDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("description"))), refVal_setDescription );
        setDescription(refVal_setDescription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("headquarters"))))
    {
        utility::string_t refVal_setHeadquarters;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("headquarters"))), refVal_setHeadquarters );
        setHeadquarters(refVal_setHeadquarters);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("traits"))))
    {
        std::vector<std::shared_ptr<FactionTrait>> refVal_setTraits;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("traits"))), refVal_setTraits );
        setTraits(refVal_setTraits);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("isRecruiting"))))
    {
        bool refVal_setIsRecruiting;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("isRecruiting"))), refVal_setIsRecruiting );
        setIsRecruiting(refVal_setIsRecruiting);
    }
    return ok;
}

std::shared_ptr<FactionSymbol> Faction::getSymbol() const
{
    return m_Symbol;
}

void Faction::setSymbol(const std::shared_ptr<FactionSymbol>& value)
{
    m_Symbol = value;
    m_SymbolIsSet = true;
}

bool Faction::symbolIsSet() const
{
    return m_SymbolIsSet;
}

void Faction::unsetSymbol()
{
    m_SymbolIsSet = false;
}
utility::string_t Faction::getName() const
{
    return m_Name;
}

void Faction::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool Faction::nameIsSet() const
{
    return m_NameIsSet;
}

void Faction::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t Faction::getDescription() const
{
    return m_Description;
}

void Faction::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool Faction::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void Faction::unsetDescription()
{
    m_DescriptionIsSet = false;
}
utility::string_t Faction::getHeadquarters() const
{
    return m_Headquarters;
}

void Faction::setHeadquarters(const utility::string_t& value)
{
    m_Headquarters = value;
    m_HeadquartersIsSet = true;
}

bool Faction::headquartersIsSet() const
{
    return m_HeadquartersIsSet;
}

void Faction::unsetHeadquarters()
{
    m_HeadquartersIsSet = false;
}
std::vector<std::shared_ptr<FactionTrait>>& Faction::getTraits()
{
    return m_Traits;
}

void Faction::setTraits(const std::vector<std::shared_ptr<FactionTrait>>& value)
{
    m_Traits = value;
    m_TraitsIsSet = true;
}

bool Faction::traitsIsSet() const
{
    return m_TraitsIsSet;
}

void Faction::unsetTraits()
{
    m_TraitsIsSet = false;
}
bool Faction::isIsRecruiting() const
{
    return m_IsRecruiting;
}

void Faction::setIsRecruiting(bool value)
{
    m_IsRecruiting = value;
    m_IsRecruitingIsSet = true;
}

bool Faction::isRecruitingIsSet() const
{
    return m_IsRecruitingIsSet;
}

void Faction::unsetIsRecruiting()
{
    m_IsRecruitingIsSet = false;
}
}


