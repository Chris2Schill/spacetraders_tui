/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ShipNavFlightMode.h"

namespace models {


namespace
{
using EnumUnderlyingType = utility::string_t;

ShipNavFlightMode::eShipNavFlightMode toEnum(const EnumUnderlyingType& val)
{
    if (val == utility::conversions::to_string_t(U("DRIFT")))
        return ShipNavFlightMode::eShipNavFlightMode::ShipNavFlightMode_DRIFT;
    if (val == utility::conversions::to_string_t(U("STEALTH")))
        return ShipNavFlightMode::eShipNavFlightMode::ShipNavFlightMode_STEALTH;
    if (val == utility::conversions::to_string_t(U("CRUISE")))
        return ShipNavFlightMode::eShipNavFlightMode::ShipNavFlightMode_CRUISE;
    if (val == utility::conversions::to_string_t(U("BURN")))
        return ShipNavFlightMode::eShipNavFlightMode::ShipNavFlightMode_BURN;
    return {};
}

EnumUnderlyingType fromEnum(ShipNavFlightMode::eShipNavFlightMode e)
{
    switch (e)
    {
    case ShipNavFlightMode::eShipNavFlightMode::ShipNavFlightMode_DRIFT:
        return U("DRIFT");
    case ShipNavFlightMode::eShipNavFlightMode::ShipNavFlightMode_STEALTH:
        return U("STEALTH");
    case ShipNavFlightMode::eShipNavFlightMode::ShipNavFlightMode_CRUISE:
        return U("CRUISE");
    case ShipNavFlightMode::eShipNavFlightMode::ShipNavFlightMode_BURN:
        return U("BURN");
    default:
        break;
    }
    return {};
}
}

ShipNavFlightMode::ShipNavFlightMode()
{
}

ShipNavFlightMode::~ShipNavFlightMode()
{
}

void ShipNavFlightMode::validate()
{
    // TODO: implement validation
}

web::json::value ShipNavFlightMode::toJson() const
{
    auto val = fromEnum(m_value);
    return web::json::value(val);
}

bool ShipNavFlightMode::fromJson(const web::json::value& val)
{
    m_value = toEnum(val.as_string());
    return true;
}

void ShipNavFlightMode::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }

    auto e = fromEnum(m_value);
    multipart->add(ModelBase::toHttpContent(namePrefix, e));
}

bool ShipNavFlightMode::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }
    {
        EnumUnderlyingType e;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), e);
        if (ok)
        {
            auto v = toEnum(e);
            setValue(v);
        }
    }
    return ok;
}

ShipNavFlightMode::eShipNavFlightMode ShipNavFlightMode::getValue() const
{
   return m_value;
}

void ShipNavFlightMode::setValue(ShipNavFlightMode::eShipNavFlightMode const value)
{
   m_value = value;
}


}


