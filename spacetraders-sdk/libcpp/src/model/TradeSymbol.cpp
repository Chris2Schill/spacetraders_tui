/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/TradeSymbol.h"

namespace models {


namespace
{
using EnumUnderlyingType = utility::string_t;

TradeSymbol::eTradeSymbol toEnum(const EnumUnderlyingType& val)
{
    if (val == utility::conversions::to_string_t(U("PRECIOUS_STONES")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_PRECIOUS_STONES;
    if (val == utility::conversions::to_string_t(U("QUARTZ_SAND")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_QUARTZ_SAND;
    if (val == utility::conversions::to_string_t(U("SILICON_CRYSTALS")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_SILICON_CRYSTALS;
    if (val == utility::conversions::to_string_t(U("AMMONIA_ICE")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_AMMONIA_ICE;
    if (val == utility::conversions::to_string_t(U("LIQUID_HYDROGEN")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_LIQUID_HYDROGEN;
    if (val == utility::conversions::to_string_t(U("LIQUID_NITROGEN")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_LIQUID_NITROGEN;
    if (val == utility::conversions::to_string_t(U("ICE_WATER")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_ICE_WATER;
    if (val == utility::conversions::to_string_t(U("EXOTIC_MATTER")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_EXOTIC_MATTER;
    if (val == utility::conversions::to_string_t(U("ADVANCED_CIRCUITRY")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_ADVANCED_CIRCUITRY;
    if (val == utility::conversions::to_string_t(U("GRAVITON_EMITTERS")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_GRAVITON_EMITTERS;
    if (val == utility::conversions::to_string_t(U("IRON")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_IRON;
    if (val == utility::conversions::to_string_t(U("IRON_ORE")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_IRON_ORE;
    if (val == utility::conversions::to_string_t(U("COPPER")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_COPPER;
    if (val == utility::conversions::to_string_t(U("COPPER_ORE")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_COPPER_ORE;
    if (val == utility::conversions::to_string_t(U("ALUMINUM")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_ALUMINUM;
    if (val == utility::conversions::to_string_t(U("ALUMINUM_ORE")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_ALUMINUM_ORE;
    if (val == utility::conversions::to_string_t(U("SILVER")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_SILVER;
    if (val == utility::conversions::to_string_t(U("SILVER_ORE")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_SILVER_ORE;
    if (val == utility::conversions::to_string_t(U("GOLD")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_GOLD;
    if (val == utility::conversions::to_string_t(U("GOLD_ORE")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_GOLD_ORE;
    if (val == utility::conversions::to_string_t(U("PLATINUM")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_PLATINUM;
    if (val == utility::conversions::to_string_t(U("PLATINUM_ORE")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_PLATINUM_ORE;
    if (val == utility::conversions::to_string_t(U("DIAMONDS")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_DIAMONDS;
    if (val == utility::conversions::to_string_t(U("URANITE")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_URANITE;
    if (val == utility::conversions::to_string_t(U("URANITE_ORE")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_URANITE_ORE;
    if (val == utility::conversions::to_string_t(U("MERITIUM")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_MERITIUM;
    if (val == utility::conversions::to_string_t(U("MERITIUM_ORE")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_MERITIUM_ORE;
    if (val == utility::conversions::to_string_t(U("HYDROCARBON")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_HYDROCARBON;
    if (val == utility::conversions::to_string_t(U("ANTIMATTER")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_ANTIMATTER;
    if (val == utility::conversions::to_string_t(U("FAB_MATS")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_FAB_MATS;
    if (val == utility::conversions::to_string_t(U("FERTILIZERS")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_FERTILIZERS;
    if (val == utility::conversions::to_string_t(U("FABRICS")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_FABRICS;
    if (val == utility::conversions::to_string_t(U("FOOD")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_FOOD;
    if (val == utility::conversions::to_string_t(U("JEWELRY")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_JEWELRY;
    if (val == utility::conversions::to_string_t(U("MACHINERY")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_MACHINERY;
    if (val == utility::conversions::to_string_t(U("FIREARMS")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_FIREARMS;
    if (val == utility::conversions::to_string_t(U("ASSAULT_RIFLES")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_ASSAULT_RIFLES;
    if (val == utility::conversions::to_string_t(U("MILITARY_EQUIPMENT")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_MILITARY_EQUIPMENT;
    if (val == utility::conversions::to_string_t(U("EXPLOSIVES")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_EXPLOSIVES;
    if (val == utility::conversions::to_string_t(U("LAB_INSTRUMENTS")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_LAB_INSTRUMENTS;
    if (val == utility::conversions::to_string_t(U("AMMUNITION")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_AMMUNITION;
    if (val == utility::conversions::to_string_t(U("ELECTRONICS")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_ELECTRONICS;
    if (val == utility::conversions::to_string_t(U("SHIP_PLATING")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_SHIP_PLATING;
    if (val == utility::conversions::to_string_t(U("SHIP_PARTS")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_SHIP_PARTS;
    if (val == utility::conversions::to_string_t(U("EQUIPMENT")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_EQUIPMENT;
    if (val == utility::conversions::to_string_t(U("FUEL")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_FUEL;
    if (val == utility::conversions::to_string_t(U("MEDICINE")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_MEDICINE;
    if (val == utility::conversions::to_string_t(U("DRUGS")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_DRUGS;
    if (val == utility::conversions::to_string_t(U("CLOTHING")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_CLOTHING;
    if (val == utility::conversions::to_string_t(U("MICROPROCESSORS")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_MICROPROCESSORS;
    if (val == utility::conversions::to_string_t(U("PLASTICS")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_PLASTICS;
    if (val == utility::conversions::to_string_t(U("POLYNUCLEOTIDES")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_POLYNUCLEOTIDES;
    if (val == utility::conversions::to_string_t(U("BIOCOMPOSITES")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_BIOCOMPOSITES;
    if (val == utility::conversions::to_string_t(U("QUANTUM_STABILIZERS")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_QUANTUM_STABILIZERS;
    if (val == utility::conversions::to_string_t(U("NANOBOTS")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_NANOBOTS;
    if (val == utility::conversions::to_string_t(U("AI_MAINFRAMES")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_AI_MAINFRAMES;
    if (val == utility::conversions::to_string_t(U("QUANTUM_DRIVES")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_QUANTUM_DRIVES;
    if (val == utility::conversions::to_string_t(U("ROBOTIC_DRONES")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_ROBOTIC_DRONES;
    if (val == utility::conversions::to_string_t(U("CYBER_IMPLANTS")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_CYBER_IMPLANTS;
    if (val == utility::conversions::to_string_t(U("GENE_THERAPEUTICS")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_GENE_THERAPEUTICS;
    if (val == utility::conversions::to_string_t(U("NEURAL_CHIPS")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_NEURAL_CHIPS;
    if (val == utility::conversions::to_string_t(U("MOOD_REGULATORS")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_MOOD_REGULATORS;
    if (val == utility::conversions::to_string_t(U("VIRAL_AGENTS")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_VIRAL_AGENTS;
    if (val == utility::conversions::to_string_t(U("MICRO_FUSION_GENERATORS")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_MICRO_FUSION_GENERATORS;
    if (val == utility::conversions::to_string_t(U("SUPERGRAINS")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_SUPERGRAINS;
    if (val == utility::conversions::to_string_t(U("LASER_RIFLES")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_LASER_RIFLES;
    if (val == utility::conversions::to_string_t(U("HOLOGRAPHICS")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_HOLOGRAPHICS;
    if (val == utility::conversions::to_string_t(U("SHIP_SALVAGE")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_SHIP_SALVAGE;
    if (val == utility::conversions::to_string_t(U("RELIC_TECH")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_RELIC_TECH;
    if (val == utility::conversions::to_string_t(U("NOVEL_LIFEFORMS")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_NOVEL_LIFEFORMS;
    if (val == utility::conversions::to_string_t(U("BOTANICAL_SPECIMENS")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_BOTANICAL_SPECIMENS;
    if (val == utility::conversions::to_string_t(U("CULTURAL_ARTIFACTS")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_CULTURAL_ARTIFACTS;
    if (val == utility::conversions::to_string_t(U("FRAME_PROBE")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_FRAME_PROBE;
    if (val == utility::conversions::to_string_t(U("FRAME_DRONE")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_FRAME_DRONE;
    if (val == utility::conversions::to_string_t(U("FRAME_INTERCEPTOR")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_FRAME_INTERCEPTOR;
    if (val == utility::conversions::to_string_t(U("FRAME_RACER")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_FRAME_RACER;
    if (val == utility::conversions::to_string_t(U("FRAME_FIGHTER")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_FRAME_FIGHTER;
    if (val == utility::conversions::to_string_t(U("FRAME_FRIGATE")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_FRAME_FRIGATE;
    if (val == utility::conversions::to_string_t(U("FRAME_SHUTTLE")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_FRAME_SHUTTLE;
    if (val == utility::conversions::to_string_t(U("FRAME_EXPLORER")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_FRAME_EXPLORER;
    if (val == utility::conversions::to_string_t(U("FRAME_MINER")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_FRAME_MINER;
    if (val == utility::conversions::to_string_t(U("FRAME_LIGHT_FREIGHTER")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_FRAME_LIGHT_FREIGHTER;
    if (val == utility::conversions::to_string_t(U("FRAME_HEAVY_FREIGHTER")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_FRAME_HEAVY_FREIGHTER;
    if (val == utility::conversions::to_string_t(U("FRAME_TRANSPORT")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_FRAME_TRANSPORT;
    if (val == utility::conversions::to_string_t(U("FRAME_DESTROYER")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_FRAME_DESTROYER;
    if (val == utility::conversions::to_string_t(U("FRAME_CRUISER")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_FRAME_CRUISER;
    if (val == utility::conversions::to_string_t(U("FRAME_CARRIER")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_FRAME_CARRIER;
    if (val == utility::conversions::to_string_t(U("REACTOR_SOLAR_I")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_REACTOR_SOLAR_I;
    if (val == utility::conversions::to_string_t(U("REACTOR_FUSION_I")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_REACTOR_FUSION_I;
    if (val == utility::conversions::to_string_t(U("REACTOR_FISSION_I")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_REACTOR_FISSION_I;
    if (val == utility::conversions::to_string_t(U("REACTOR_CHEMICAL_I")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_REACTOR_CHEMICAL_I;
    if (val == utility::conversions::to_string_t(U("REACTOR_ANTIMATTER_I")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_REACTOR_ANTIMATTER_I;
    if (val == utility::conversions::to_string_t(U("ENGINE_IMPULSE_DRIVE_I")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_ENGINE_IMPULSE_DRIVE_I;
    if (val == utility::conversions::to_string_t(U("ENGINE_ION_DRIVE_I")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_ENGINE_ION_DRIVE_I;
    if (val == utility::conversions::to_string_t(U("ENGINE_ION_DRIVE_II")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_ENGINE_ION_DRIVE_II;
    if (val == utility::conversions::to_string_t(U("ENGINE_HYPER_DRIVE_I")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_ENGINE_HYPER_DRIVE_I;
    if (val == utility::conversions::to_string_t(U("MODULE_MINERAL_PROCESSOR_I")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_MODULE_MINERAL_PROCESSOR_I;
    if (val == utility::conversions::to_string_t(U("MODULE_GAS_PROCESSOR_I")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_MODULE_GAS_PROCESSOR_I;
    if (val == utility::conversions::to_string_t(U("MODULE_CARGO_HOLD_I")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_MODULE_CARGO_HOLD_I;
    if (val == utility::conversions::to_string_t(U("MODULE_CARGO_HOLD_II")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_MODULE_CARGO_HOLD_II;
    if (val == utility::conversions::to_string_t(U("MODULE_CARGO_HOLD_III")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_MODULE_CARGO_HOLD_III;
    if (val == utility::conversions::to_string_t(U("MODULE_CREW_QUARTERS_I")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_MODULE_CREW_QUARTERS_I;
    if (val == utility::conversions::to_string_t(U("MODULE_ENVOY_QUARTERS_I")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_MODULE_ENVOY_QUARTERS_I;
    if (val == utility::conversions::to_string_t(U("MODULE_PASSENGER_CABIN_I")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_MODULE_PASSENGER_CABIN_I;
    if (val == utility::conversions::to_string_t(U("MODULE_MICRO_REFINERY_I")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_MODULE_MICRO_REFINERY_I;
    if (val == utility::conversions::to_string_t(U("MODULE_SCIENCE_LAB_I")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_MODULE_SCIENCE_LAB_I;
    if (val == utility::conversions::to_string_t(U("MODULE_JUMP_DRIVE_I")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_MODULE_JUMP_DRIVE_I;
    if (val == utility::conversions::to_string_t(U("MODULE_JUMP_DRIVE_II")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_MODULE_JUMP_DRIVE_II;
    if (val == utility::conversions::to_string_t(U("MODULE_JUMP_DRIVE_III")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_MODULE_JUMP_DRIVE_III;
    if (val == utility::conversions::to_string_t(U("MODULE_WARP_DRIVE_I")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_MODULE_WARP_DRIVE_I;
    if (val == utility::conversions::to_string_t(U("MODULE_WARP_DRIVE_II")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_MODULE_WARP_DRIVE_II;
    if (val == utility::conversions::to_string_t(U("MODULE_WARP_DRIVE_III")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_MODULE_WARP_DRIVE_III;
    if (val == utility::conversions::to_string_t(U("MODULE_SHIELD_GENERATOR_I")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_MODULE_SHIELD_GENERATOR_I;
    if (val == utility::conversions::to_string_t(U("MODULE_SHIELD_GENERATOR_II")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_MODULE_SHIELD_GENERATOR_II;
    if (val == utility::conversions::to_string_t(U("MODULE_ORE_REFINERY_I")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_MODULE_ORE_REFINERY_I;
    if (val == utility::conversions::to_string_t(U("MODULE_FUEL_REFINERY_I")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_MODULE_FUEL_REFINERY_I;
    if (val == utility::conversions::to_string_t(U("MOUNT_GAS_SIPHON_I")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_MOUNT_GAS_SIPHON_I;
    if (val == utility::conversions::to_string_t(U("MOUNT_GAS_SIPHON_II")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_MOUNT_GAS_SIPHON_II;
    if (val == utility::conversions::to_string_t(U("MOUNT_GAS_SIPHON_III")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_MOUNT_GAS_SIPHON_III;
    if (val == utility::conversions::to_string_t(U("MOUNT_SURVEYOR_I")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_MOUNT_SURVEYOR_I;
    if (val == utility::conversions::to_string_t(U("MOUNT_SURVEYOR_II")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_MOUNT_SURVEYOR_II;
    if (val == utility::conversions::to_string_t(U("MOUNT_SURVEYOR_III")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_MOUNT_SURVEYOR_III;
    if (val == utility::conversions::to_string_t(U("MOUNT_SENSOR_ARRAY_I")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_MOUNT_SENSOR_ARRAY_I;
    if (val == utility::conversions::to_string_t(U("MOUNT_SENSOR_ARRAY_II")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_MOUNT_SENSOR_ARRAY_II;
    if (val == utility::conversions::to_string_t(U("MOUNT_SENSOR_ARRAY_III")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_MOUNT_SENSOR_ARRAY_III;
    if (val == utility::conversions::to_string_t(U("MOUNT_MINING_LASER_I")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_MOUNT_MINING_LASER_I;
    if (val == utility::conversions::to_string_t(U("MOUNT_MINING_LASER_II")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_MOUNT_MINING_LASER_II;
    if (val == utility::conversions::to_string_t(U("MOUNT_MINING_LASER_III")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_MOUNT_MINING_LASER_III;
    if (val == utility::conversions::to_string_t(U("MOUNT_LASER_CANNON_I")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_MOUNT_LASER_CANNON_I;
    if (val == utility::conversions::to_string_t(U("MOUNT_MISSILE_LAUNCHER_I")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_MOUNT_MISSILE_LAUNCHER_I;
    if (val == utility::conversions::to_string_t(U("MOUNT_TURRET_I")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_MOUNT_TURRET_I;
    if (val == utility::conversions::to_string_t(U("SHIP_PROBE")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_SHIP_PROBE;
    if (val == utility::conversions::to_string_t(U("SHIP_MINING_DRONE")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_SHIP_MINING_DRONE;
    if (val == utility::conversions::to_string_t(U("SHIP_SIPHON_DRONE")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_SHIP_SIPHON_DRONE;
    if (val == utility::conversions::to_string_t(U("SHIP_INTERCEPTOR")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_SHIP_INTERCEPTOR;
    if (val == utility::conversions::to_string_t(U("SHIP_LIGHT_HAULER")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_SHIP_LIGHT_HAULER;
    if (val == utility::conversions::to_string_t(U("SHIP_COMMAND_FRIGATE")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_SHIP_COMMAND_FRIGATE;
    if (val == utility::conversions::to_string_t(U("SHIP_EXPLORER")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_SHIP_EXPLORER;
    if (val == utility::conversions::to_string_t(U("SHIP_HEAVY_FREIGHTER")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_SHIP_HEAVY_FREIGHTER;
    if (val == utility::conversions::to_string_t(U("SHIP_LIGHT_SHUTTLE")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_SHIP_LIGHT_SHUTTLE;
    if (val == utility::conversions::to_string_t(U("SHIP_ORE_HOUND")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_SHIP_ORE_HOUND;
    if (val == utility::conversions::to_string_t(U("SHIP_REFINING_FREIGHTER")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_SHIP_REFINING_FREIGHTER;
    if (val == utility::conversions::to_string_t(U("SHIP_SURVEYOR")))
        return TradeSymbol::eTradeSymbol::TradeSymbol_SHIP_SURVEYOR;
    return {};
}

EnumUnderlyingType fromEnum(TradeSymbol::eTradeSymbol e)
{
    switch (e)
    {
    case TradeSymbol::eTradeSymbol::TradeSymbol_PRECIOUS_STONES:
        return U("PRECIOUS_STONES");
    case TradeSymbol::eTradeSymbol::TradeSymbol_QUARTZ_SAND:
        return U("QUARTZ_SAND");
    case TradeSymbol::eTradeSymbol::TradeSymbol_SILICON_CRYSTALS:
        return U("SILICON_CRYSTALS");
    case TradeSymbol::eTradeSymbol::TradeSymbol_AMMONIA_ICE:
        return U("AMMONIA_ICE");
    case TradeSymbol::eTradeSymbol::TradeSymbol_LIQUID_HYDROGEN:
        return U("LIQUID_HYDROGEN");
    case TradeSymbol::eTradeSymbol::TradeSymbol_LIQUID_NITROGEN:
        return U("LIQUID_NITROGEN");
    case TradeSymbol::eTradeSymbol::TradeSymbol_ICE_WATER:
        return U("ICE_WATER");
    case TradeSymbol::eTradeSymbol::TradeSymbol_EXOTIC_MATTER:
        return U("EXOTIC_MATTER");
    case TradeSymbol::eTradeSymbol::TradeSymbol_ADVANCED_CIRCUITRY:
        return U("ADVANCED_CIRCUITRY");
    case TradeSymbol::eTradeSymbol::TradeSymbol_GRAVITON_EMITTERS:
        return U("GRAVITON_EMITTERS");
    case TradeSymbol::eTradeSymbol::TradeSymbol_IRON:
        return U("IRON");
    case TradeSymbol::eTradeSymbol::TradeSymbol_IRON_ORE:
        return U("IRON_ORE");
    case TradeSymbol::eTradeSymbol::TradeSymbol_COPPER:
        return U("COPPER");
    case TradeSymbol::eTradeSymbol::TradeSymbol_COPPER_ORE:
        return U("COPPER_ORE");
    case TradeSymbol::eTradeSymbol::TradeSymbol_ALUMINUM:
        return U("ALUMINUM");
    case TradeSymbol::eTradeSymbol::TradeSymbol_ALUMINUM_ORE:
        return U("ALUMINUM_ORE");
    case TradeSymbol::eTradeSymbol::TradeSymbol_SILVER:
        return U("SILVER");
    case TradeSymbol::eTradeSymbol::TradeSymbol_SILVER_ORE:
        return U("SILVER_ORE");
    case TradeSymbol::eTradeSymbol::TradeSymbol_GOLD:
        return U("GOLD");
    case TradeSymbol::eTradeSymbol::TradeSymbol_GOLD_ORE:
        return U("GOLD_ORE");
    case TradeSymbol::eTradeSymbol::TradeSymbol_PLATINUM:
        return U("PLATINUM");
    case TradeSymbol::eTradeSymbol::TradeSymbol_PLATINUM_ORE:
        return U("PLATINUM_ORE");
    case TradeSymbol::eTradeSymbol::TradeSymbol_DIAMONDS:
        return U("DIAMONDS");
    case TradeSymbol::eTradeSymbol::TradeSymbol_URANITE:
        return U("URANITE");
    case TradeSymbol::eTradeSymbol::TradeSymbol_URANITE_ORE:
        return U("URANITE_ORE");
    case TradeSymbol::eTradeSymbol::TradeSymbol_MERITIUM:
        return U("MERITIUM");
    case TradeSymbol::eTradeSymbol::TradeSymbol_MERITIUM_ORE:
        return U("MERITIUM_ORE");
    case TradeSymbol::eTradeSymbol::TradeSymbol_HYDROCARBON:
        return U("HYDROCARBON");
    case TradeSymbol::eTradeSymbol::TradeSymbol_ANTIMATTER:
        return U("ANTIMATTER");
    case TradeSymbol::eTradeSymbol::TradeSymbol_FAB_MATS:
        return U("FAB_MATS");
    case TradeSymbol::eTradeSymbol::TradeSymbol_FERTILIZERS:
        return U("FERTILIZERS");
    case TradeSymbol::eTradeSymbol::TradeSymbol_FABRICS:
        return U("FABRICS");
    case TradeSymbol::eTradeSymbol::TradeSymbol_FOOD:
        return U("FOOD");
    case TradeSymbol::eTradeSymbol::TradeSymbol_JEWELRY:
        return U("JEWELRY");
    case TradeSymbol::eTradeSymbol::TradeSymbol_MACHINERY:
        return U("MACHINERY");
    case TradeSymbol::eTradeSymbol::TradeSymbol_FIREARMS:
        return U("FIREARMS");
    case TradeSymbol::eTradeSymbol::TradeSymbol_ASSAULT_RIFLES:
        return U("ASSAULT_RIFLES");
    case TradeSymbol::eTradeSymbol::TradeSymbol_MILITARY_EQUIPMENT:
        return U("MILITARY_EQUIPMENT");
    case TradeSymbol::eTradeSymbol::TradeSymbol_EXPLOSIVES:
        return U("EXPLOSIVES");
    case TradeSymbol::eTradeSymbol::TradeSymbol_LAB_INSTRUMENTS:
        return U("LAB_INSTRUMENTS");
    case TradeSymbol::eTradeSymbol::TradeSymbol_AMMUNITION:
        return U("AMMUNITION");
    case TradeSymbol::eTradeSymbol::TradeSymbol_ELECTRONICS:
        return U("ELECTRONICS");
    case TradeSymbol::eTradeSymbol::TradeSymbol_SHIP_PLATING:
        return U("SHIP_PLATING");
    case TradeSymbol::eTradeSymbol::TradeSymbol_SHIP_PARTS:
        return U("SHIP_PARTS");
    case TradeSymbol::eTradeSymbol::TradeSymbol_EQUIPMENT:
        return U("EQUIPMENT");
    case TradeSymbol::eTradeSymbol::TradeSymbol_FUEL:
        return U("FUEL");
    case TradeSymbol::eTradeSymbol::TradeSymbol_MEDICINE:
        return U("MEDICINE");
    case TradeSymbol::eTradeSymbol::TradeSymbol_DRUGS:
        return U("DRUGS");
    case TradeSymbol::eTradeSymbol::TradeSymbol_CLOTHING:
        return U("CLOTHING");
    case TradeSymbol::eTradeSymbol::TradeSymbol_MICROPROCESSORS:
        return U("MICROPROCESSORS");
    case TradeSymbol::eTradeSymbol::TradeSymbol_PLASTICS:
        return U("PLASTICS");
    case TradeSymbol::eTradeSymbol::TradeSymbol_POLYNUCLEOTIDES:
        return U("POLYNUCLEOTIDES");
    case TradeSymbol::eTradeSymbol::TradeSymbol_BIOCOMPOSITES:
        return U("BIOCOMPOSITES");
    case TradeSymbol::eTradeSymbol::TradeSymbol_QUANTUM_STABILIZERS:
        return U("QUANTUM_STABILIZERS");
    case TradeSymbol::eTradeSymbol::TradeSymbol_NANOBOTS:
        return U("NANOBOTS");
    case TradeSymbol::eTradeSymbol::TradeSymbol_AI_MAINFRAMES:
        return U("AI_MAINFRAMES");
    case TradeSymbol::eTradeSymbol::TradeSymbol_QUANTUM_DRIVES:
        return U("QUANTUM_DRIVES");
    case TradeSymbol::eTradeSymbol::TradeSymbol_ROBOTIC_DRONES:
        return U("ROBOTIC_DRONES");
    case TradeSymbol::eTradeSymbol::TradeSymbol_CYBER_IMPLANTS:
        return U("CYBER_IMPLANTS");
    case TradeSymbol::eTradeSymbol::TradeSymbol_GENE_THERAPEUTICS:
        return U("GENE_THERAPEUTICS");
    case TradeSymbol::eTradeSymbol::TradeSymbol_NEURAL_CHIPS:
        return U("NEURAL_CHIPS");
    case TradeSymbol::eTradeSymbol::TradeSymbol_MOOD_REGULATORS:
        return U("MOOD_REGULATORS");
    case TradeSymbol::eTradeSymbol::TradeSymbol_VIRAL_AGENTS:
        return U("VIRAL_AGENTS");
    case TradeSymbol::eTradeSymbol::TradeSymbol_MICRO_FUSION_GENERATORS:
        return U("MICRO_FUSION_GENERATORS");
    case TradeSymbol::eTradeSymbol::TradeSymbol_SUPERGRAINS:
        return U("SUPERGRAINS");
    case TradeSymbol::eTradeSymbol::TradeSymbol_LASER_RIFLES:
        return U("LASER_RIFLES");
    case TradeSymbol::eTradeSymbol::TradeSymbol_HOLOGRAPHICS:
        return U("HOLOGRAPHICS");
    case TradeSymbol::eTradeSymbol::TradeSymbol_SHIP_SALVAGE:
        return U("SHIP_SALVAGE");
    case TradeSymbol::eTradeSymbol::TradeSymbol_RELIC_TECH:
        return U("RELIC_TECH");
    case TradeSymbol::eTradeSymbol::TradeSymbol_NOVEL_LIFEFORMS:
        return U("NOVEL_LIFEFORMS");
    case TradeSymbol::eTradeSymbol::TradeSymbol_BOTANICAL_SPECIMENS:
        return U("BOTANICAL_SPECIMENS");
    case TradeSymbol::eTradeSymbol::TradeSymbol_CULTURAL_ARTIFACTS:
        return U("CULTURAL_ARTIFACTS");
    case TradeSymbol::eTradeSymbol::TradeSymbol_FRAME_PROBE:
        return U("FRAME_PROBE");
    case TradeSymbol::eTradeSymbol::TradeSymbol_FRAME_DRONE:
        return U("FRAME_DRONE");
    case TradeSymbol::eTradeSymbol::TradeSymbol_FRAME_INTERCEPTOR:
        return U("FRAME_INTERCEPTOR");
    case TradeSymbol::eTradeSymbol::TradeSymbol_FRAME_RACER:
        return U("FRAME_RACER");
    case TradeSymbol::eTradeSymbol::TradeSymbol_FRAME_FIGHTER:
        return U("FRAME_FIGHTER");
    case TradeSymbol::eTradeSymbol::TradeSymbol_FRAME_FRIGATE:
        return U("FRAME_FRIGATE");
    case TradeSymbol::eTradeSymbol::TradeSymbol_FRAME_SHUTTLE:
        return U("FRAME_SHUTTLE");
    case TradeSymbol::eTradeSymbol::TradeSymbol_FRAME_EXPLORER:
        return U("FRAME_EXPLORER");
    case TradeSymbol::eTradeSymbol::TradeSymbol_FRAME_MINER:
        return U("FRAME_MINER");
    case TradeSymbol::eTradeSymbol::TradeSymbol_FRAME_LIGHT_FREIGHTER:
        return U("FRAME_LIGHT_FREIGHTER");
    case TradeSymbol::eTradeSymbol::TradeSymbol_FRAME_HEAVY_FREIGHTER:
        return U("FRAME_HEAVY_FREIGHTER");
    case TradeSymbol::eTradeSymbol::TradeSymbol_FRAME_TRANSPORT:
        return U("FRAME_TRANSPORT");
    case TradeSymbol::eTradeSymbol::TradeSymbol_FRAME_DESTROYER:
        return U("FRAME_DESTROYER");
    case TradeSymbol::eTradeSymbol::TradeSymbol_FRAME_CRUISER:
        return U("FRAME_CRUISER");
    case TradeSymbol::eTradeSymbol::TradeSymbol_FRAME_CARRIER:
        return U("FRAME_CARRIER");
    case TradeSymbol::eTradeSymbol::TradeSymbol_REACTOR_SOLAR_I:
        return U("REACTOR_SOLAR_I");
    case TradeSymbol::eTradeSymbol::TradeSymbol_REACTOR_FUSION_I:
        return U("REACTOR_FUSION_I");
    case TradeSymbol::eTradeSymbol::TradeSymbol_REACTOR_FISSION_I:
        return U("REACTOR_FISSION_I");
    case TradeSymbol::eTradeSymbol::TradeSymbol_REACTOR_CHEMICAL_I:
        return U("REACTOR_CHEMICAL_I");
    case TradeSymbol::eTradeSymbol::TradeSymbol_REACTOR_ANTIMATTER_I:
        return U("REACTOR_ANTIMATTER_I");
    case TradeSymbol::eTradeSymbol::TradeSymbol_ENGINE_IMPULSE_DRIVE_I:
        return U("ENGINE_IMPULSE_DRIVE_I");
    case TradeSymbol::eTradeSymbol::TradeSymbol_ENGINE_ION_DRIVE_I:
        return U("ENGINE_ION_DRIVE_I");
    case TradeSymbol::eTradeSymbol::TradeSymbol_ENGINE_ION_DRIVE_II:
        return U("ENGINE_ION_DRIVE_II");
    case TradeSymbol::eTradeSymbol::TradeSymbol_ENGINE_HYPER_DRIVE_I:
        return U("ENGINE_HYPER_DRIVE_I");
    case TradeSymbol::eTradeSymbol::TradeSymbol_MODULE_MINERAL_PROCESSOR_I:
        return U("MODULE_MINERAL_PROCESSOR_I");
    case TradeSymbol::eTradeSymbol::TradeSymbol_MODULE_GAS_PROCESSOR_I:
        return U("MODULE_GAS_PROCESSOR_I");
    case TradeSymbol::eTradeSymbol::TradeSymbol_MODULE_CARGO_HOLD_I:
        return U("MODULE_CARGO_HOLD_I");
    case TradeSymbol::eTradeSymbol::TradeSymbol_MODULE_CARGO_HOLD_II:
        return U("MODULE_CARGO_HOLD_II");
    case TradeSymbol::eTradeSymbol::TradeSymbol_MODULE_CARGO_HOLD_III:
        return U("MODULE_CARGO_HOLD_III");
    case TradeSymbol::eTradeSymbol::TradeSymbol_MODULE_CREW_QUARTERS_I:
        return U("MODULE_CREW_QUARTERS_I");
    case TradeSymbol::eTradeSymbol::TradeSymbol_MODULE_ENVOY_QUARTERS_I:
        return U("MODULE_ENVOY_QUARTERS_I");
    case TradeSymbol::eTradeSymbol::TradeSymbol_MODULE_PASSENGER_CABIN_I:
        return U("MODULE_PASSENGER_CABIN_I");
    case TradeSymbol::eTradeSymbol::TradeSymbol_MODULE_MICRO_REFINERY_I:
        return U("MODULE_MICRO_REFINERY_I");
    case TradeSymbol::eTradeSymbol::TradeSymbol_MODULE_SCIENCE_LAB_I:
        return U("MODULE_SCIENCE_LAB_I");
    case TradeSymbol::eTradeSymbol::TradeSymbol_MODULE_JUMP_DRIVE_I:
        return U("MODULE_JUMP_DRIVE_I");
    case TradeSymbol::eTradeSymbol::TradeSymbol_MODULE_JUMP_DRIVE_II:
        return U("MODULE_JUMP_DRIVE_II");
    case TradeSymbol::eTradeSymbol::TradeSymbol_MODULE_JUMP_DRIVE_III:
        return U("MODULE_JUMP_DRIVE_III");
    case TradeSymbol::eTradeSymbol::TradeSymbol_MODULE_WARP_DRIVE_I:
        return U("MODULE_WARP_DRIVE_I");
    case TradeSymbol::eTradeSymbol::TradeSymbol_MODULE_WARP_DRIVE_II:
        return U("MODULE_WARP_DRIVE_II");
    case TradeSymbol::eTradeSymbol::TradeSymbol_MODULE_WARP_DRIVE_III:
        return U("MODULE_WARP_DRIVE_III");
    case TradeSymbol::eTradeSymbol::TradeSymbol_MODULE_SHIELD_GENERATOR_I:
        return U("MODULE_SHIELD_GENERATOR_I");
    case TradeSymbol::eTradeSymbol::TradeSymbol_MODULE_SHIELD_GENERATOR_II:
        return U("MODULE_SHIELD_GENERATOR_II");
    case TradeSymbol::eTradeSymbol::TradeSymbol_MODULE_ORE_REFINERY_I:
        return U("MODULE_ORE_REFINERY_I");
    case TradeSymbol::eTradeSymbol::TradeSymbol_MODULE_FUEL_REFINERY_I:
        return U("MODULE_FUEL_REFINERY_I");
    case TradeSymbol::eTradeSymbol::TradeSymbol_MOUNT_GAS_SIPHON_I:
        return U("MOUNT_GAS_SIPHON_I");
    case TradeSymbol::eTradeSymbol::TradeSymbol_MOUNT_GAS_SIPHON_II:
        return U("MOUNT_GAS_SIPHON_II");
    case TradeSymbol::eTradeSymbol::TradeSymbol_MOUNT_GAS_SIPHON_III:
        return U("MOUNT_GAS_SIPHON_III");
    case TradeSymbol::eTradeSymbol::TradeSymbol_MOUNT_SURVEYOR_I:
        return U("MOUNT_SURVEYOR_I");
    case TradeSymbol::eTradeSymbol::TradeSymbol_MOUNT_SURVEYOR_II:
        return U("MOUNT_SURVEYOR_II");
    case TradeSymbol::eTradeSymbol::TradeSymbol_MOUNT_SURVEYOR_III:
        return U("MOUNT_SURVEYOR_III");
    case TradeSymbol::eTradeSymbol::TradeSymbol_MOUNT_SENSOR_ARRAY_I:
        return U("MOUNT_SENSOR_ARRAY_I");
    case TradeSymbol::eTradeSymbol::TradeSymbol_MOUNT_SENSOR_ARRAY_II:
        return U("MOUNT_SENSOR_ARRAY_II");
    case TradeSymbol::eTradeSymbol::TradeSymbol_MOUNT_SENSOR_ARRAY_III:
        return U("MOUNT_SENSOR_ARRAY_III");
    case TradeSymbol::eTradeSymbol::TradeSymbol_MOUNT_MINING_LASER_I:
        return U("MOUNT_MINING_LASER_I");
    case TradeSymbol::eTradeSymbol::TradeSymbol_MOUNT_MINING_LASER_II:
        return U("MOUNT_MINING_LASER_II");
    case TradeSymbol::eTradeSymbol::TradeSymbol_MOUNT_MINING_LASER_III:
        return U("MOUNT_MINING_LASER_III");
    case TradeSymbol::eTradeSymbol::TradeSymbol_MOUNT_LASER_CANNON_I:
        return U("MOUNT_LASER_CANNON_I");
    case TradeSymbol::eTradeSymbol::TradeSymbol_MOUNT_MISSILE_LAUNCHER_I:
        return U("MOUNT_MISSILE_LAUNCHER_I");
    case TradeSymbol::eTradeSymbol::TradeSymbol_MOUNT_TURRET_I:
        return U("MOUNT_TURRET_I");
    case TradeSymbol::eTradeSymbol::TradeSymbol_SHIP_PROBE:
        return U("SHIP_PROBE");
    case TradeSymbol::eTradeSymbol::TradeSymbol_SHIP_MINING_DRONE:
        return U("SHIP_MINING_DRONE");
    case TradeSymbol::eTradeSymbol::TradeSymbol_SHIP_SIPHON_DRONE:
        return U("SHIP_SIPHON_DRONE");
    case TradeSymbol::eTradeSymbol::TradeSymbol_SHIP_INTERCEPTOR:
        return U("SHIP_INTERCEPTOR");
    case TradeSymbol::eTradeSymbol::TradeSymbol_SHIP_LIGHT_HAULER:
        return U("SHIP_LIGHT_HAULER");
    case TradeSymbol::eTradeSymbol::TradeSymbol_SHIP_COMMAND_FRIGATE:
        return U("SHIP_COMMAND_FRIGATE");
    case TradeSymbol::eTradeSymbol::TradeSymbol_SHIP_EXPLORER:
        return U("SHIP_EXPLORER");
    case TradeSymbol::eTradeSymbol::TradeSymbol_SHIP_HEAVY_FREIGHTER:
        return U("SHIP_HEAVY_FREIGHTER");
    case TradeSymbol::eTradeSymbol::TradeSymbol_SHIP_LIGHT_SHUTTLE:
        return U("SHIP_LIGHT_SHUTTLE");
    case TradeSymbol::eTradeSymbol::TradeSymbol_SHIP_ORE_HOUND:
        return U("SHIP_ORE_HOUND");
    case TradeSymbol::eTradeSymbol::TradeSymbol_SHIP_REFINING_FREIGHTER:
        return U("SHIP_REFINING_FREIGHTER");
    case TradeSymbol::eTradeSymbol::TradeSymbol_SHIP_SURVEYOR:
        return U("SHIP_SURVEYOR");
    default:
        break;
    }
    return {};
}
}

TradeSymbol::TradeSymbol()
{
}

TradeSymbol::~TradeSymbol()
{
}

void TradeSymbol::validate()
{
    // TODO: implement validation
}

web::json::value TradeSymbol::toJson() const
{
    auto val = fromEnum(m_value);
    return web::json::value(val);
}

bool TradeSymbol::fromJson(const web::json::value& val)
{
    m_value = toEnum(val.as_string());
    return true;
}

void TradeSymbol::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }

    auto e = fromEnum(m_value);
    multipart->add(ModelBase::toHttpContent(namePrefix, e));
}

bool TradeSymbol::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }
    {
        EnumUnderlyingType e;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), e);
        if (ok)
        {
            auto v = toEnum(e);
            setValue(v);
        }
    }
    return ok;
}

TradeSymbol::eTradeSymbol TradeSymbol::getValue() const
{
   return m_value;
}

void TradeSymbol::setValue(TradeSymbol::eTradeSymbol const value)
{
   m_value = value;
}


}


