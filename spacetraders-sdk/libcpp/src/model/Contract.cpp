/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Contract.h"

namespace models {



Contract::Contract()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_FactionSymbol = utility::conversions::to_string_t("");
    m_FactionSymbolIsSet = false;
    m_Type = utility::conversions::to_string_t("");
    m_TypeIsSet = false;
    m_TermsIsSet = false;
    m_Accepted = false;
    m_AcceptedIsSet = false;
    m_Fulfilled = false;
    m_FulfilledIsSet = false;
    m_Expiration = utility::datetime();
    m_ExpirationIsSet = false;
    m_DeadlineToAccept = utility::datetime();
    m_DeadlineToAcceptIsSet = false;
}

Contract::~Contract()
{
}

void Contract::validate()
{
    // TODO: implement validation
}

web::json::value Contract::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_FactionSymbolIsSet)
    {
        val[utility::conversions::to_string_t(U("factionSymbol"))] = ModelBase::toJson(m_FactionSymbol);
    }
    if(m_TypeIsSet)
    {
        val[utility::conversions::to_string_t(U("type"))] = ModelBase::toJson(m_Type);
    }
    if(m_TermsIsSet)
    {
        val[utility::conversions::to_string_t(U("terms"))] = ModelBase::toJson(m_Terms);
    }
    if(m_AcceptedIsSet)
    {
        val[utility::conversions::to_string_t(U("accepted"))] = ModelBase::toJson(m_Accepted);
    }
    if(m_FulfilledIsSet)
    {
        val[utility::conversions::to_string_t(U("fulfilled"))] = ModelBase::toJson(m_Fulfilled);
    }
    if(m_ExpirationIsSet)
    {
        val[utility::conversions::to_string_t(U("expiration"))] = ModelBase::toJson(m_Expiration);
    }
    if(m_DeadlineToAcceptIsSet)
    {
        val[utility::conversions::to_string_t(U("deadlineToAccept"))] = ModelBase::toJson(m_DeadlineToAccept);
    }

    return val;
}

bool Contract::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("factionSymbol"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("factionSymbol")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setFactionSymbol;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFactionSymbol);
            setFactionSymbol(refVal_setFactionSymbol);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setType);
            setType(refVal_setType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("terms"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("terms")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ContractTerms> refVal_setTerms;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTerms);
            setTerms(refVal_setTerms);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("accepted"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("accepted")));
        if(!fieldValue.is_null())
        {
            bool refVal_setAccepted;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAccepted);
            setAccepted(refVal_setAccepted);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("fulfilled"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fulfilled")));
        if(!fieldValue.is_null())
        {
            bool refVal_setFulfilled;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFulfilled);
            setFulfilled(refVal_setFulfilled);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("expiration"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("expiration")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setExpiration;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExpiration);
            setExpiration(refVal_setExpiration);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("deadlineToAccept"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("deadlineToAccept")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setDeadlineToAccept;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDeadlineToAccept);
            setDeadlineToAccept(refVal_setDeadlineToAccept);
        }
    }
    return ok;
}

void Contract::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_FactionSymbolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("factionSymbol")), m_FactionSymbol));
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("type")), m_Type));
    }
    if(m_TermsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("terms")), m_Terms));
    }
    if(m_AcceptedIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("accepted")), m_Accepted));
    }
    if(m_FulfilledIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fulfilled")), m_Fulfilled));
    }
    if(m_ExpirationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("expiration")), m_Expiration));
    }
    if(m_DeadlineToAcceptIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("deadlineToAccept")), m_DeadlineToAccept));
    }
}

bool Contract::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("factionSymbol"))))
    {
        utility::string_t refVal_setFactionSymbol;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("factionSymbol"))), refVal_setFactionSymbol );
        setFactionSymbol(refVal_setFactionSymbol);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("type"))))
    {
        utility::string_t refVal_setType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("type"))), refVal_setType );
        setType(refVal_setType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("terms"))))
    {
        std::shared_ptr<ContractTerms> refVal_setTerms;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("terms"))), refVal_setTerms );
        setTerms(refVal_setTerms);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("accepted"))))
    {
        bool refVal_setAccepted;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("accepted"))), refVal_setAccepted );
        setAccepted(refVal_setAccepted);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("fulfilled"))))
    {
        bool refVal_setFulfilled;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fulfilled"))), refVal_setFulfilled );
        setFulfilled(refVal_setFulfilled);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("expiration"))))
    {
        utility::datetime refVal_setExpiration;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("expiration"))), refVal_setExpiration );
        setExpiration(refVal_setExpiration);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("deadlineToAccept"))))
    {
        utility::datetime refVal_setDeadlineToAccept;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("deadlineToAccept"))), refVal_setDeadlineToAccept );
        setDeadlineToAccept(refVal_setDeadlineToAccept);
    }
    return ok;
}

utility::string_t Contract::getId() const
{
    return m_Id;
}

void Contract::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool Contract::idIsSet() const
{
    return m_IdIsSet;
}

void Contract::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t Contract::getFactionSymbol() const
{
    return m_FactionSymbol;
}

void Contract::setFactionSymbol(const utility::string_t& value)
{
    m_FactionSymbol = value;
    m_FactionSymbolIsSet = true;
}

bool Contract::factionSymbolIsSet() const
{
    return m_FactionSymbolIsSet;
}

void Contract::unsetFactionSymbol()
{
    m_FactionSymbolIsSet = false;
}
utility::string_t Contract::getType() const
{
    return m_Type;
}

void Contract::setType(const utility::string_t& value)
{
    m_Type = value;
    m_TypeIsSet = true;
}

bool Contract::typeIsSet() const
{
    return m_TypeIsSet;
}

void Contract::unsetType()
{
    m_TypeIsSet = false;
}
std::shared_ptr<ContractTerms> Contract::getTerms() const
{
    return m_Terms;
}

void Contract::setTerms(const std::shared_ptr<ContractTerms>& value)
{
    m_Terms = value;
    m_TermsIsSet = true;
}

bool Contract::termsIsSet() const
{
    return m_TermsIsSet;
}

void Contract::unsetTerms()
{
    m_TermsIsSet = false;
}
bool Contract::isAccepted() const
{
    return m_Accepted;
}

void Contract::setAccepted(bool value)
{
    m_Accepted = value;
    m_AcceptedIsSet = true;
}

bool Contract::acceptedIsSet() const
{
    return m_AcceptedIsSet;
}

void Contract::unsetAccepted()
{
    m_AcceptedIsSet = false;
}
bool Contract::isFulfilled() const
{
    return m_Fulfilled;
}

void Contract::setFulfilled(bool value)
{
    m_Fulfilled = value;
    m_FulfilledIsSet = true;
}

bool Contract::fulfilledIsSet() const
{
    return m_FulfilledIsSet;
}

void Contract::unsetFulfilled()
{
    m_FulfilledIsSet = false;
}
utility::datetime Contract::getExpiration() const
{
    return m_Expiration;
}

void Contract::setExpiration(const utility::datetime& value)
{
    m_Expiration = value;
    m_ExpirationIsSet = true;
}

bool Contract::expirationIsSet() const
{
    return m_ExpirationIsSet;
}

void Contract::unsetExpiration()
{
    m_ExpirationIsSet = false;
}
utility::datetime Contract::getDeadlineToAccept() const
{
    return m_DeadlineToAccept;
}

void Contract::setDeadlineToAccept(const utility::datetime& value)
{
    m_DeadlineToAccept = value;
    m_DeadlineToAcceptIsSet = true;
}

bool Contract::deadlineToAcceptIsSet() const
{
    return m_DeadlineToAcceptIsSet;
}

void Contract::unsetDeadlineToAccept()
{
    m_DeadlineToAcceptIsSet = false;
}
}


