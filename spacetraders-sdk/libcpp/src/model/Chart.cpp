/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Chart.h"

namespace models {



Chart::Chart()
{
    m_WaypointSymbol = utility::conversions::to_string_t("");
    m_WaypointSymbolIsSet = false;
    m_SubmittedBy = utility::conversions::to_string_t("");
    m_SubmittedByIsSet = false;
    m_SubmittedOn = utility::datetime();
    m_SubmittedOnIsSet = false;
}

Chart::~Chart()
{
}

void Chart::validate()
{
    // TODO: implement validation
}

web::json::value Chart::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_WaypointSymbolIsSet)
    {
        val[utility::conversions::to_string_t(U("waypointSymbol"))] = ModelBase::toJson(m_WaypointSymbol);
    }
    if(m_SubmittedByIsSet)
    {
        val[utility::conversions::to_string_t(U("submittedBy"))] = ModelBase::toJson(m_SubmittedBy);
    }
    if(m_SubmittedOnIsSet)
    {
        val[utility::conversions::to_string_t(U("submittedOn"))] = ModelBase::toJson(m_SubmittedOn);
    }

    return val;
}

bool Chart::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("waypointSymbol"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("waypointSymbol")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setWaypointSymbol;
            ok &= ModelBase::fromJson(fieldValue, refVal_setWaypointSymbol);
            setWaypointSymbol(refVal_setWaypointSymbol);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("submittedBy"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("submittedBy")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSubmittedBy;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSubmittedBy);
            setSubmittedBy(refVal_setSubmittedBy);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("submittedOn"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("submittedOn")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setSubmittedOn;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSubmittedOn);
            setSubmittedOn(refVal_setSubmittedOn);
        }
    }
    return ok;
}

void Chart::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_WaypointSymbolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("waypointSymbol")), m_WaypointSymbol));
    }
    if(m_SubmittedByIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("submittedBy")), m_SubmittedBy));
    }
    if(m_SubmittedOnIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("submittedOn")), m_SubmittedOn));
    }
}

bool Chart::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("waypointSymbol"))))
    {
        utility::string_t refVal_setWaypointSymbol;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("waypointSymbol"))), refVal_setWaypointSymbol );
        setWaypointSymbol(refVal_setWaypointSymbol);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("submittedBy"))))
    {
        utility::string_t refVal_setSubmittedBy;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("submittedBy"))), refVal_setSubmittedBy );
        setSubmittedBy(refVal_setSubmittedBy);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("submittedOn"))))
    {
        utility::datetime refVal_setSubmittedOn;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("submittedOn"))), refVal_setSubmittedOn );
        setSubmittedOn(refVal_setSubmittedOn);
    }
    return ok;
}

utility::string_t Chart::getWaypointSymbol() const
{
    return m_WaypointSymbol;
}

void Chart::setWaypointSymbol(const utility::string_t& value)
{
    m_WaypointSymbol = value;
    m_WaypointSymbolIsSet = true;
}

bool Chart::waypointSymbolIsSet() const
{
    return m_WaypointSymbolIsSet;
}

void Chart::unsetWaypointSymbol()
{
    m_WaypointSymbolIsSet = false;
}
utility::string_t Chart::getSubmittedBy() const
{
    return m_SubmittedBy;
}

void Chart::setSubmittedBy(const utility::string_t& value)
{
    m_SubmittedBy = value;
    m_SubmittedByIsSet = true;
}

bool Chart::submittedByIsSet() const
{
    return m_SubmittedByIsSet;
}

void Chart::unsetSubmittedBy()
{
    m_SubmittedByIsSet = false;
}
utility::datetime Chart::getSubmittedOn() const
{
    return m_SubmittedOn;
}

void Chart::setSubmittedOn(const utility::datetime& value)
{
    m_SubmittedOn = value;
    m_SubmittedOnIsSet = true;
}

bool Chart::submittedOnIsSet() const
{
    return m_SubmittedOnIsSet;
}

void Chart::unsetSubmittedOn()
{
    m_SubmittedOnIsSet = false;
}
}


