/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Get_status_200_response.h"

namespace models {



Get_status_200_response::Get_status_200_response()
{
    m_Status = utility::conversions::to_string_t("");
    m_StatusIsSet = false;
    m_Version = utility::conversions::to_string_t("");
    m_VersionIsSet = false;
    m_ResetDate = utility::conversions::to_string_t("");
    m_ResetDateIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_StatsIsSet = false;
    m_LeaderboardsIsSet = false;
    m_ServerResetsIsSet = false;
    m_AnnouncementsIsSet = false;
    m_LinksIsSet = false;
}

Get_status_200_response::~Get_status_200_response()
{
}

void Get_status_200_response::validate()
{
    // TODO: implement validation
}

web::json::value Get_status_200_response::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t(U("status"))] = ModelBase::toJson(m_Status);
    }
    if(m_VersionIsSet)
    {
        val[utility::conversions::to_string_t(U("version"))] = ModelBase::toJson(m_Version);
    }
    if(m_ResetDateIsSet)
    {
        val[utility::conversions::to_string_t(U("resetDate"))] = ModelBase::toJson(m_ResetDate);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t(U("description"))] = ModelBase::toJson(m_Description);
    }
    if(m_StatsIsSet)
    {
        val[utility::conversions::to_string_t(U("stats"))] = ModelBase::toJson(m_Stats);
    }
    if(m_LeaderboardsIsSet)
    {
        val[utility::conversions::to_string_t(U("leaderboards"))] = ModelBase::toJson(m_Leaderboards);
    }
    if(m_ServerResetsIsSet)
    {
        val[utility::conversions::to_string_t(U("serverResets"))] = ModelBase::toJson(m_ServerResets);
    }
    if(m_AnnouncementsIsSet)
    {
        val[utility::conversions::to_string_t(U("announcements"))] = ModelBase::toJson(m_Announcements);
    }
    if(m_LinksIsSet)
    {
        val[utility::conversions::to_string_t(U("links"))] = ModelBase::toJson(m_Links);
    }

    return val;
}

bool Get_status_200_response::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("status")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatus);
            setStatus(refVal_setStatus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("version"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("version")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setVersion;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVersion);
            setVersion(refVal_setVersion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("resetDate"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("resetDate")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setResetDate;
            ok &= ModelBase::fromJson(fieldValue, refVal_setResetDate);
            setResetDate(refVal_setResetDate);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDescription);
            setDescription(refVal_setDescription);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("stats"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("stats")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Get_status_200_response_stats> refVal_setStats;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStats);
            setStats(refVal_setStats);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("leaderboards"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("leaderboards")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Get_status_200_response_leaderboards> refVal_setLeaderboards;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLeaderboards);
            setLeaderboards(refVal_setLeaderboards);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("serverResets"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("serverResets")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Get_status_200_response_serverResets> refVal_setServerResets;
            ok &= ModelBase::fromJson(fieldValue, refVal_setServerResets);
            setServerResets(refVal_setServerResets);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("announcements"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("announcements")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Get_status_200_response_announcements_inner>> refVal_setAnnouncements;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAnnouncements);
            setAnnouncements(refVal_setAnnouncements);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("links"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("links")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<Get_status_200_response_links_inner>> refVal_setLinks;
            ok &= ModelBase::fromJson(fieldValue, refVal_setLinks);
            setLinks(refVal_setLinks);
        }
    }
    return ok;
}

void Get_status_200_response::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("status")), m_Status));
    }
    if(m_VersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("version")), m_Version));
    }
    if(m_ResetDateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("resetDate")), m_ResetDate));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("description")), m_Description));
    }
    if(m_StatsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("stats")), m_Stats));
    }
    if(m_LeaderboardsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("leaderboards")), m_Leaderboards));
    }
    if(m_ServerResetsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("serverResets")), m_ServerResets));
    }
    if(m_AnnouncementsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("announcements")), m_Announcements));
    }
    if(m_LinksIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("links")), m_Links));
    }
}

bool Get_status_200_response::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("status"))))
    {
        utility::string_t refVal_setStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("status"))), refVal_setStatus );
        setStatus(refVal_setStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("version"))))
    {
        utility::string_t refVal_setVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("version"))), refVal_setVersion );
        setVersion(refVal_setVersion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("resetDate"))))
    {
        utility::string_t refVal_setResetDate;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("resetDate"))), refVal_setResetDate );
        setResetDate(refVal_setResetDate);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("description"))))
    {
        utility::string_t refVal_setDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("description"))), refVal_setDescription );
        setDescription(refVal_setDescription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("stats"))))
    {
        std::shared_ptr<Get_status_200_response_stats> refVal_setStats;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("stats"))), refVal_setStats );
        setStats(refVal_setStats);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("leaderboards"))))
    {
        std::shared_ptr<Get_status_200_response_leaderboards> refVal_setLeaderboards;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("leaderboards"))), refVal_setLeaderboards );
        setLeaderboards(refVal_setLeaderboards);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("serverResets"))))
    {
        std::shared_ptr<Get_status_200_response_serverResets> refVal_setServerResets;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("serverResets"))), refVal_setServerResets );
        setServerResets(refVal_setServerResets);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("announcements"))))
    {
        std::vector<std::shared_ptr<Get_status_200_response_announcements_inner>> refVal_setAnnouncements;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("announcements"))), refVal_setAnnouncements );
        setAnnouncements(refVal_setAnnouncements);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("links"))))
    {
        std::vector<std::shared_ptr<Get_status_200_response_links_inner>> refVal_setLinks;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("links"))), refVal_setLinks );
        setLinks(refVal_setLinks);
    }
    return ok;
}

utility::string_t Get_status_200_response::getStatus() const
{
    return m_Status;
}

void Get_status_200_response::setStatus(const utility::string_t& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}

bool Get_status_200_response::statusIsSet() const
{
    return m_StatusIsSet;
}

void Get_status_200_response::unsetStatus()
{
    m_StatusIsSet = false;
}
utility::string_t Get_status_200_response::getVersion() const
{
    return m_Version;
}

void Get_status_200_response::setVersion(const utility::string_t& value)
{
    m_Version = value;
    m_VersionIsSet = true;
}

bool Get_status_200_response::versionIsSet() const
{
    return m_VersionIsSet;
}

void Get_status_200_response::unsetVersion()
{
    m_VersionIsSet = false;
}
utility::string_t Get_status_200_response::getResetDate() const
{
    return m_ResetDate;
}

void Get_status_200_response::setResetDate(const utility::string_t& value)
{
    m_ResetDate = value;
    m_ResetDateIsSet = true;
}

bool Get_status_200_response::resetDateIsSet() const
{
    return m_ResetDateIsSet;
}

void Get_status_200_response::unsetResetDate()
{
    m_ResetDateIsSet = false;
}
utility::string_t Get_status_200_response::getDescription() const
{
    return m_Description;
}

void Get_status_200_response::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool Get_status_200_response::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void Get_status_200_response::unsetDescription()
{
    m_DescriptionIsSet = false;
}
std::shared_ptr<Get_status_200_response_stats> Get_status_200_response::getStats() const
{
    return m_Stats;
}

void Get_status_200_response::setStats(const std::shared_ptr<Get_status_200_response_stats>& value)
{
    m_Stats = value;
    m_StatsIsSet = true;
}

bool Get_status_200_response::statsIsSet() const
{
    return m_StatsIsSet;
}

void Get_status_200_response::unsetStats()
{
    m_StatsIsSet = false;
}
std::shared_ptr<Get_status_200_response_leaderboards> Get_status_200_response::getLeaderboards() const
{
    return m_Leaderboards;
}

void Get_status_200_response::setLeaderboards(const std::shared_ptr<Get_status_200_response_leaderboards>& value)
{
    m_Leaderboards = value;
    m_LeaderboardsIsSet = true;
}

bool Get_status_200_response::leaderboardsIsSet() const
{
    return m_LeaderboardsIsSet;
}

void Get_status_200_response::unsetLeaderboards()
{
    m_LeaderboardsIsSet = false;
}
std::shared_ptr<Get_status_200_response_serverResets> Get_status_200_response::getServerResets() const
{
    return m_ServerResets;
}

void Get_status_200_response::setServerResets(const std::shared_ptr<Get_status_200_response_serverResets>& value)
{
    m_ServerResets = value;
    m_ServerResetsIsSet = true;
}

bool Get_status_200_response::serverResetsIsSet() const
{
    return m_ServerResetsIsSet;
}

void Get_status_200_response::unsetServerResets()
{
    m_ServerResetsIsSet = false;
}
std::vector<std::shared_ptr<Get_status_200_response_announcements_inner>>& Get_status_200_response::getAnnouncements()
{
    return m_Announcements;
}

void Get_status_200_response::setAnnouncements(const std::vector<std::shared_ptr<Get_status_200_response_announcements_inner>>& value)
{
    m_Announcements = value;
    m_AnnouncementsIsSet = true;
}

bool Get_status_200_response::announcementsIsSet() const
{
    return m_AnnouncementsIsSet;
}

void Get_status_200_response::unsetAnnouncements()
{
    m_AnnouncementsIsSet = false;
}
std::vector<std::shared_ptr<Get_status_200_response_links_inner>>& Get_status_200_response::getLinks()
{
    return m_Links;
}

void Get_status_200_response::setLinks(const std::vector<std::shared_ptr<Get_status_200_response_links_inner>>& value)
{
    m_Links = value;
    m_LinksIsSet = true;
}

bool Get_status_200_response::linksIsSet() const
{
    return m_LinksIsSet;
}

void Get_status_200_response::unsetLinks()
{
    m_LinksIsSet = false;
}
}


