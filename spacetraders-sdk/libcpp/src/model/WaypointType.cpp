/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/WaypointType.h"

namespace models {


namespace
{
using EnumUnderlyingType = utility::string_t;

WaypointType::eWaypointType toEnum(const EnumUnderlyingType& val)
{
    if (val == utility::conversions::to_string_t(U("PLANET")))
        return WaypointType::eWaypointType::WaypointType_PLANET;
    if (val == utility::conversions::to_string_t(U("GAS_GIANT")))
        return WaypointType::eWaypointType::WaypointType_GAS_GIANT;
    if (val == utility::conversions::to_string_t(U("MOON")))
        return WaypointType::eWaypointType::WaypointType_MOON;
    if (val == utility::conversions::to_string_t(U("ORBITAL_STATION")))
        return WaypointType::eWaypointType::WaypointType_ORBITAL_STATION;
    if (val == utility::conversions::to_string_t(U("JUMP_GATE")))
        return WaypointType::eWaypointType::WaypointType_JUMP_GATE;
    if (val == utility::conversions::to_string_t(U("ASTEROID_FIELD")))
        return WaypointType::eWaypointType::WaypointType_ASTEROID_FIELD;
    if (val == utility::conversions::to_string_t(U("ASTEROID")))
        return WaypointType::eWaypointType::WaypointType_ASTEROID;
    if (val == utility::conversions::to_string_t(U("ENGINEERED_ASTEROID")))
        return WaypointType::eWaypointType::WaypointType_ENGINEERED_ASTEROID;
    if (val == utility::conversions::to_string_t(U("ASTEROID_BASE")))
        return WaypointType::eWaypointType::WaypointType_ASTEROID_BASE;
    if (val == utility::conversions::to_string_t(U("NEBULA")))
        return WaypointType::eWaypointType::WaypointType_NEBULA;
    if (val == utility::conversions::to_string_t(U("DEBRIS_FIELD")))
        return WaypointType::eWaypointType::WaypointType_DEBRIS_FIELD;
    if (val == utility::conversions::to_string_t(U("GRAVITY_WELL")))
        return WaypointType::eWaypointType::WaypointType_GRAVITY_WELL;
    if (val == utility::conversions::to_string_t(U("ARTIFICIAL_GRAVITY_WELL")))
        return WaypointType::eWaypointType::WaypointType_ARTIFICIAL_GRAVITY_WELL;
    if (val == utility::conversions::to_string_t(U("FUEL_STATION")))
        return WaypointType::eWaypointType::WaypointType_FUEL_STATION;
    return {};
}

EnumUnderlyingType fromEnum(WaypointType::eWaypointType e)
{
    switch (e)
    {
    case WaypointType::eWaypointType::WaypointType_PLANET:
        return U("PLANET");
    case WaypointType::eWaypointType::WaypointType_GAS_GIANT:
        return U("GAS_GIANT");
    case WaypointType::eWaypointType::WaypointType_MOON:
        return U("MOON");
    case WaypointType::eWaypointType::WaypointType_ORBITAL_STATION:
        return U("ORBITAL_STATION");
    case WaypointType::eWaypointType::WaypointType_JUMP_GATE:
        return U("JUMP_GATE");
    case WaypointType::eWaypointType::WaypointType_ASTEROID_FIELD:
        return U("ASTEROID_FIELD");
    case WaypointType::eWaypointType::WaypointType_ASTEROID:
        return U("ASTEROID");
    case WaypointType::eWaypointType::WaypointType_ENGINEERED_ASTEROID:
        return U("ENGINEERED_ASTEROID");
    case WaypointType::eWaypointType::WaypointType_ASTEROID_BASE:
        return U("ASTEROID_BASE");
    case WaypointType::eWaypointType::WaypointType_NEBULA:
        return U("NEBULA");
    case WaypointType::eWaypointType::WaypointType_DEBRIS_FIELD:
        return U("DEBRIS_FIELD");
    case WaypointType::eWaypointType::WaypointType_GRAVITY_WELL:
        return U("GRAVITY_WELL");
    case WaypointType::eWaypointType::WaypointType_ARTIFICIAL_GRAVITY_WELL:
        return U("ARTIFICIAL_GRAVITY_WELL");
    case WaypointType::eWaypointType::WaypointType_FUEL_STATION:
        return U("FUEL_STATION");
    default:
        break;
    }
    return {};
}
}

WaypointType::WaypointType()
{
}

WaypointType::~WaypointType()
{
}

void WaypointType::validate()
{
    // TODO: implement validation
}

web::json::value WaypointType::toJson() const
{
    auto val = fromEnum(m_value);
    return web::json::value(val);
}

bool WaypointType::fromJson(const web::json::value& val)
{
    m_value = toEnum(val.as_string());
    return true;
}

void WaypointType::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }

    auto e = fromEnum(m_value);
    multipart->add(ModelBase::toHttpContent(namePrefix, e));
}

bool WaypointType::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }
    {
        EnumUnderlyingType e;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), e);
        if (ok)
        {
            auto v = toEnum(e);
            setValue(v);
        }
    }
    return ok;
}

WaypointType::eWaypointType WaypointType::getValue() const
{
   return m_value;
}

void WaypointType::setValue(WaypointType::eWaypointType const value)
{
   m_value = value;
}


}


