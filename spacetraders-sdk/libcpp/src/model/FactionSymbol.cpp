/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/FactionSymbol.h"

namespace models {


namespace
{
using EnumUnderlyingType = utility::string_t;

FactionSymbol::eFactionSymbol toEnum(const EnumUnderlyingType& val)
{
    if (val == utility::conversions::to_string_t(U("COSMIC")))
        return FactionSymbol::eFactionSymbol::FactionSymbol_COSMIC;
    if (val == utility::conversions::to_string_t(U("VOID")))
        return FactionSymbol::eFactionSymbol::FactionSymbol_VOID;
    if (val == utility::conversions::to_string_t(U("GALACTIC")))
        return FactionSymbol::eFactionSymbol::FactionSymbol_GALACTIC;
    if (val == utility::conversions::to_string_t(U("QUANTUM")))
        return FactionSymbol::eFactionSymbol::FactionSymbol_QUANTUM;
    if (val == utility::conversions::to_string_t(U("DOMINION")))
        return FactionSymbol::eFactionSymbol::FactionSymbol_DOMINION;
    if (val == utility::conversions::to_string_t(U("ASTRO")))
        return FactionSymbol::eFactionSymbol::FactionSymbol_ASTRO;
    if (val == utility::conversions::to_string_t(U("CORSAIRS")))
        return FactionSymbol::eFactionSymbol::FactionSymbol_CORSAIRS;
    if (val == utility::conversions::to_string_t(U("OBSIDIAN")))
        return FactionSymbol::eFactionSymbol::FactionSymbol_OBSIDIAN;
    if (val == utility::conversions::to_string_t(U("AEGIS")))
        return FactionSymbol::eFactionSymbol::FactionSymbol_AEGIS;
    if (val == utility::conversions::to_string_t(U("UNITED")))
        return FactionSymbol::eFactionSymbol::FactionSymbol_UNITED;
    if (val == utility::conversions::to_string_t(U("SOLITARY")))
        return FactionSymbol::eFactionSymbol::FactionSymbol_SOLITARY;
    if (val == utility::conversions::to_string_t(U("COBALT")))
        return FactionSymbol::eFactionSymbol::FactionSymbol_COBALT;
    if (val == utility::conversions::to_string_t(U("OMEGA")))
        return FactionSymbol::eFactionSymbol::FactionSymbol_OMEGA;
    if (val == utility::conversions::to_string_t(U("ECHO")))
        return FactionSymbol::eFactionSymbol::FactionSymbol_ECHO;
    if (val == utility::conversions::to_string_t(U("LORDS")))
        return FactionSymbol::eFactionSymbol::FactionSymbol_LORDS;
    if (val == utility::conversions::to_string_t(U("CULT")))
        return FactionSymbol::eFactionSymbol::FactionSymbol_CULT;
    if (val == utility::conversions::to_string_t(U("ANCIENTS")))
        return FactionSymbol::eFactionSymbol::FactionSymbol_ANCIENTS;
    if (val == utility::conversions::to_string_t(U("SHADOW")))
        return FactionSymbol::eFactionSymbol::FactionSymbol_SHADOW;
    if (val == utility::conversions::to_string_t(U("ETHEREAL")))
        return FactionSymbol::eFactionSymbol::FactionSymbol_ETHEREAL;
    return {};
}

EnumUnderlyingType fromEnum(FactionSymbol::eFactionSymbol e)
{
    switch (e)
    {
    case FactionSymbol::eFactionSymbol::FactionSymbol_COSMIC:
        return U("COSMIC");
    case FactionSymbol::eFactionSymbol::FactionSymbol_VOID:
        return U("VOID");
    case FactionSymbol::eFactionSymbol::FactionSymbol_GALACTIC:
        return U("GALACTIC");
    case FactionSymbol::eFactionSymbol::FactionSymbol_QUANTUM:
        return U("QUANTUM");
    case FactionSymbol::eFactionSymbol::FactionSymbol_DOMINION:
        return U("DOMINION");
    case FactionSymbol::eFactionSymbol::FactionSymbol_ASTRO:
        return U("ASTRO");
    case FactionSymbol::eFactionSymbol::FactionSymbol_CORSAIRS:
        return U("CORSAIRS");
    case FactionSymbol::eFactionSymbol::FactionSymbol_OBSIDIAN:
        return U("OBSIDIAN");
    case FactionSymbol::eFactionSymbol::FactionSymbol_AEGIS:
        return U("AEGIS");
    case FactionSymbol::eFactionSymbol::FactionSymbol_UNITED:
        return U("UNITED");
    case FactionSymbol::eFactionSymbol::FactionSymbol_SOLITARY:
        return U("SOLITARY");
    case FactionSymbol::eFactionSymbol::FactionSymbol_COBALT:
        return U("COBALT");
    case FactionSymbol::eFactionSymbol::FactionSymbol_OMEGA:
        return U("OMEGA");
    case FactionSymbol::eFactionSymbol::FactionSymbol_ECHO:
        return U("ECHO");
    case FactionSymbol::eFactionSymbol::FactionSymbol_LORDS:
        return U("LORDS");
    case FactionSymbol::eFactionSymbol::FactionSymbol_CULT:
        return U("CULT");
    case FactionSymbol::eFactionSymbol::FactionSymbol_ANCIENTS:
        return U("ANCIENTS");
    case FactionSymbol::eFactionSymbol::FactionSymbol_SHADOW:
        return U("SHADOW");
    case FactionSymbol::eFactionSymbol::FactionSymbol_ETHEREAL:
        return U("ETHEREAL");
    default:
        break;
    }
    return {};
}
}

FactionSymbol::FactionSymbol()
{
}

FactionSymbol::~FactionSymbol()
{
}

void FactionSymbol::validate()
{
    // TODO: implement validation
}

web::json::value FactionSymbol::toJson() const
{
    auto val = fromEnum(m_value);
    return web::json::value(val);
}

bool FactionSymbol::fromJson(const web::json::value& val)
{
    m_value = toEnum(val.as_string());
    return true;
}

void FactionSymbol::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }

    auto e = fromEnum(m_value);
    multipart->add(ModelBase::toHttpContent(namePrefix, e));
}

bool FactionSymbol::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if (!namePrefix.empty() && namePrefix.back() != U('.'))
    {
        namePrefix.push_back(U('.'));
    }
    {
        EnumUnderlyingType e;
        ok = ModelBase::fromHttpContent(multipart->getContent(namePrefix), e);
        if (ok)
        {
            auto v = toEnum(e);
            setValue(v);
        }
    }
    return ok;
}

FactionSymbol::eFactionSymbol FactionSymbol::getValue() const
{
   return m_value;
}

void FactionSymbol::setValue(FactionSymbol::eFactionSymbol const value)
{
   m_value = value;
}


}


