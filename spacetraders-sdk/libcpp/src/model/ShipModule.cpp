/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/ShipModule.h"

namespace models {



ShipModule::ShipModule()
{
    m_Symbol = utility::conversions::to_string_t("");
    m_SymbolIsSet = false;
    m_Capacity = 0;
    m_CapacityIsSet = false;
    m_Range = 0;
    m_RangeIsSet = false;
    m_Name = utility::conversions::to_string_t("");
    m_NameIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_RequirementsIsSet = false;
}

ShipModule::~ShipModule()
{
}

void ShipModule::validate()
{
    // TODO: implement validation
}

web::json::value ShipModule::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_SymbolIsSet)
    {
        val[utility::conversions::to_string_t(U("symbol"))] = ModelBase::toJson(m_Symbol);
    }
    if(m_CapacityIsSet)
    {
        val[utility::conversions::to_string_t(U("capacity"))] = ModelBase::toJson(m_Capacity);
    }
    if(m_RangeIsSet)
    {
        val[utility::conversions::to_string_t(U("range"))] = ModelBase::toJson(m_Range);
    }
    if(m_NameIsSet)
    {
        val[utility::conversions::to_string_t(U("name"))] = ModelBase::toJson(m_Name);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t(U("description"))] = ModelBase::toJson(m_Description);
    }
    if(m_RequirementsIsSet)
    {
        val[utility::conversions::to_string_t(U("requirements"))] = ModelBase::toJson(m_Requirements);
    }

    return val;
}

bool ShipModule::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("symbol"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("symbol")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSymbol;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSymbol);
            setSymbol(refVal_setSymbol);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("capacity"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("capacity")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setCapacity;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCapacity);
            setCapacity(refVal_setCapacity);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("range"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("range")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setRange;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRange);
            setRange(refVal_setRange);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("name"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("name")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setName;
            ok &= ModelBase::fromJson(fieldValue, refVal_setName);
            setName(refVal_setName);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDescription);
            setDescription(refVal_setDescription);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("requirements"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("requirements")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ShipRequirements> refVal_setRequirements;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRequirements);
            setRequirements(refVal_setRequirements);
        }
    }
    return ok;
}

void ShipModule::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_SymbolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("symbol")), m_Symbol));
    }
    if(m_CapacityIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("capacity")), m_Capacity));
    }
    if(m_RangeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("range")), m_Range));
    }
    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("name")), m_Name));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("description")), m_Description));
    }
    if(m_RequirementsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("requirements")), m_Requirements));
    }
}

bool ShipModule::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("symbol"))))
    {
        utility::string_t refVal_setSymbol;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("symbol"))), refVal_setSymbol );
        setSymbol(refVal_setSymbol);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("capacity"))))
    {
        int32_t refVal_setCapacity;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("capacity"))), refVal_setCapacity );
        setCapacity(refVal_setCapacity);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("range"))))
    {
        int32_t refVal_setRange;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("range"))), refVal_setRange );
        setRange(refVal_setRange);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("name"))))
    {
        utility::string_t refVal_setName;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("name"))), refVal_setName );
        setName(refVal_setName);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("description"))))
    {
        utility::string_t refVal_setDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("description"))), refVal_setDescription );
        setDescription(refVal_setDescription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("requirements"))))
    {
        std::shared_ptr<ShipRequirements> refVal_setRequirements;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("requirements"))), refVal_setRequirements );
        setRequirements(refVal_setRequirements);
    }
    return ok;
}

utility::string_t ShipModule::getSymbol() const
{
    return m_Symbol;
}

void ShipModule::setSymbol(const utility::string_t& value)
{
    m_Symbol = value;
    m_SymbolIsSet = true;
}

bool ShipModule::symbolIsSet() const
{
    return m_SymbolIsSet;
}

void ShipModule::unsetSymbol()
{
    m_SymbolIsSet = false;
}
int32_t ShipModule::getCapacity() const
{
    return m_Capacity;
}

void ShipModule::setCapacity(int32_t value)
{
    m_Capacity = value;
    m_CapacityIsSet = true;
}

bool ShipModule::capacityIsSet() const
{
    return m_CapacityIsSet;
}

void ShipModule::unsetCapacity()
{
    m_CapacityIsSet = false;
}
int32_t ShipModule::getRange() const
{
    return m_Range;
}

void ShipModule::setRange(int32_t value)
{
    m_Range = value;
    m_RangeIsSet = true;
}

bool ShipModule::rangeIsSet() const
{
    return m_RangeIsSet;
}

void ShipModule::unsetRange()
{
    m_RangeIsSet = false;
}
utility::string_t ShipModule::getName() const
{
    return m_Name;
}

void ShipModule::setName(const utility::string_t& value)
{
    m_Name = value;
    m_NameIsSet = true;
}

bool ShipModule::nameIsSet() const
{
    return m_NameIsSet;
}

void ShipModule::unsetName()
{
    m_NameIsSet = false;
}
utility::string_t ShipModule::getDescription() const
{
    return m_Description;
}

void ShipModule::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool ShipModule::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void ShipModule::unsetDescription()
{
    m_DescriptionIsSet = false;
}
std::shared_ptr<ShipRequirements> ShipModule::getRequirements() const
{
    return m_Requirements;
}

void ShipModule::setRequirements(const std::shared_ptr<ShipRequirements>& value)
{
    m_Requirements = value;
    m_RequirementsIsSet = true;
}

bool ShipModule::requirementsIsSet() const
{
    return m_RequirementsIsSet;
}

void ShipModule::unsetRequirements()
{
    m_RequirementsIsSet = false;
}
}


