/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Agent.h"

namespace models {



Agent::Agent()
{
    m_AccountId = utility::conversions::to_string_t("");
    m_AccountIdIsSet = false;
    m_Symbol = utility::conversions::to_string_t("");
    m_SymbolIsSet = false;
    m_Headquarters = utility::conversions::to_string_t("");
    m_HeadquartersIsSet = false;
    m_Credits = 0L;
    m_CreditsIsSet = false;
    m_StartingFaction = utility::conversions::to_string_t("");
    m_StartingFactionIsSet = false;
    m_ShipCount = 0;
    m_ShipCountIsSet = false;
}

Agent::~Agent()
{
}

void Agent::validate()
{
    // TODO: implement validation
}

web::json::value Agent::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_AccountIdIsSet)
    {
        val[utility::conversions::to_string_t(U("accountId"))] = ModelBase::toJson(m_AccountId);
    }
    if(m_SymbolIsSet)
    {
        val[utility::conversions::to_string_t(U("symbol"))] = ModelBase::toJson(m_Symbol);
    }
    if(m_HeadquartersIsSet)
    {
        val[utility::conversions::to_string_t(U("headquarters"))] = ModelBase::toJson(m_Headquarters);
    }
    if(m_CreditsIsSet)
    {
        val[utility::conversions::to_string_t(U("credits"))] = ModelBase::toJson(m_Credits);
    }
    if(m_StartingFactionIsSet)
    {
        val[utility::conversions::to_string_t(U("startingFaction"))] = ModelBase::toJson(m_StartingFaction);
    }
    if(m_ShipCountIsSet)
    {
        val[utility::conversions::to_string_t(U("shipCount"))] = ModelBase::toJson(m_ShipCount);
    }

    return val;
}

bool Agent::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("accountId"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("accountId")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAccountId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAccountId);
            setAccountId(refVal_setAccountId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("symbol"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("symbol")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSymbol;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSymbol);
            setSymbol(refVal_setSymbol);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("headquarters"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("headquarters")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setHeadquarters;
            ok &= ModelBase::fromJson(fieldValue, refVal_setHeadquarters);
            setHeadquarters(refVal_setHeadquarters);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("credits"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("credits")));
        if(!fieldValue.is_null())
        {
            int64_t refVal_setCredits;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCredits);
            setCredits(refVal_setCredits);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("startingFaction"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("startingFaction")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStartingFaction;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStartingFaction);
            setStartingFaction(refVal_setStartingFaction);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("shipCount"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("shipCount")));
        if(!fieldValue.is_null())
        {
            int32_t refVal_setShipCount;
            ok &= ModelBase::fromJson(fieldValue, refVal_setShipCount);
            setShipCount(refVal_setShipCount);
        }
    }
    return ok;
}

void Agent::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_AccountIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("accountId")), m_AccountId));
    }
    if(m_SymbolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("symbol")), m_Symbol));
    }
    if(m_HeadquartersIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("headquarters")), m_Headquarters));
    }
    if(m_CreditsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("credits")), m_Credits));
    }
    if(m_StartingFactionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("startingFaction")), m_StartingFaction));
    }
    if(m_ShipCountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("shipCount")), m_ShipCount));
    }
}

bool Agent::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("accountId"))))
    {
        utility::string_t refVal_setAccountId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("accountId"))), refVal_setAccountId );
        setAccountId(refVal_setAccountId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("symbol"))))
    {
        utility::string_t refVal_setSymbol;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("symbol"))), refVal_setSymbol );
        setSymbol(refVal_setSymbol);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("headquarters"))))
    {
        utility::string_t refVal_setHeadquarters;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("headquarters"))), refVal_setHeadquarters );
        setHeadquarters(refVal_setHeadquarters);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("credits"))))
    {
        int64_t refVal_setCredits;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("credits"))), refVal_setCredits );
        setCredits(refVal_setCredits);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("startingFaction"))))
    {
        utility::string_t refVal_setStartingFaction;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("startingFaction"))), refVal_setStartingFaction );
        setStartingFaction(refVal_setStartingFaction);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("shipCount"))))
    {
        int32_t refVal_setShipCount;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("shipCount"))), refVal_setShipCount );
        setShipCount(refVal_setShipCount);
    }
    return ok;
}

utility::string_t Agent::getAccountId() const
{
    return m_AccountId;
}

void Agent::setAccountId(const utility::string_t& value)
{
    m_AccountId = value;
    m_AccountIdIsSet = true;
}

bool Agent::accountIdIsSet() const
{
    return m_AccountIdIsSet;
}

void Agent::unsetAccountId()
{
    m_AccountIdIsSet = false;
}
utility::string_t Agent::getSymbol() const
{
    return m_Symbol;
}

void Agent::setSymbol(const utility::string_t& value)
{
    m_Symbol = value;
    m_SymbolIsSet = true;
}

bool Agent::symbolIsSet() const
{
    return m_SymbolIsSet;
}

void Agent::unsetSymbol()
{
    m_SymbolIsSet = false;
}
utility::string_t Agent::getHeadquarters() const
{
    return m_Headquarters;
}

void Agent::setHeadquarters(const utility::string_t& value)
{
    m_Headquarters = value;
    m_HeadquartersIsSet = true;
}

bool Agent::headquartersIsSet() const
{
    return m_HeadquartersIsSet;
}

void Agent::unsetHeadquarters()
{
    m_HeadquartersIsSet = false;
}
int64_t Agent::getCredits() const
{
    return m_Credits;
}

void Agent::setCredits(int64_t value)
{
    m_Credits = value;
    m_CreditsIsSet = true;
}

bool Agent::creditsIsSet() const
{
    return m_CreditsIsSet;
}

void Agent::unsetCredits()
{
    m_CreditsIsSet = false;
}
utility::string_t Agent::getStartingFaction() const
{
    return m_StartingFaction;
}

void Agent::setStartingFaction(const utility::string_t& value)
{
    m_StartingFaction = value;
    m_StartingFactionIsSet = true;
}

bool Agent::startingFactionIsSet() const
{
    return m_StartingFactionIsSet;
}

void Agent::unsetStartingFaction()
{
    m_StartingFactionIsSet = false;
}
int32_t Agent::getShipCount() const
{
    return m_ShipCount;
}

void Agent::setShipCount(int32_t value)
{
    m_ShipCount = value;
    m_ShipCountIsSet = true;
}

bool Agent::shipCountIsSet() const
{
    return m_ShipCountIsSet;
}

void Agent::unsetShipCount()
{
    m_ShipCountIsSet = false;
}
}


