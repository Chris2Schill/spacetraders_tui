/**
 * SpaceTraders API
 * SpaceTraders is an open-universe game and learning platform that offers a set of HTTP endpoints to control a fleet of ships and explore a multiplayer universe.  The API is documented using [OpenAPI](https://github.com/SpaceTradersAPI/api-docs). You can send your first request right here in your browser to check the status of the game server.  ```json http {   \"method\": \"GET\",   \"url\": \"https://api.spacetraders.io/v2\", } ```  Unlike a traditional game, SpaceTraders does not have a first-party client or app to play the game. Instead, you can use the API to build your own client, write a script to automate your ships, or try an app built by the community.  We have a [Discord channel](https://discord.com/invite/jh6zurdWk5) where you can share your projects, ask questions, and get help from other players.   
 *
 * The version of the OpenAPI document: 2.0.0
 * Contact: joel@spacetraders.io
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.2.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/Ship.h"

namespace models {



Ship::Ship()
{
    m_Symbol = utility::conversions::to_string_t("");
    m_SymbolIsSet = false;
    m_RegistrationIsSet = false;
    m_NavIsSet = false;
    m_CrewIsSet = false;
    m_FrameIsSet = false;
    m_ReactorIsSet = false;
    m_EngineIsSet = false;
    m_CooldownIsSet = false;
    m_ModulesIsSet = false;
    m_MountsIsSet = false;
    m_CargoIsSet = false;
    m_FuelIsSet = false;
}

Ship::~Ship()
{
}

void Ship::validate()
{
    // TODO: implement validation
}

web::json::value Ship::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_SymbolIsSet)
    {
        val[utility::conversions::to_string_t(U("symbol"))] = ModelBase::toJson(m_Symbol);
    }
    if(m_RegistrationIsSet)
    {
        val[utility::conversions::to_string_t(U("registration"))] = ModelBase::toJson(m_Registration);
    }
    if(m_NavIsSet)
    {
        val[utility::conversions::to_string_t(U("nav"))] = ModelBase::toJson(m_Nav);
    }
    if(m_CrewIsSet)
    {
        val[utility::conversions::to_string_t(U("crew"))] = ModelBase::toJson(m_Crew);
    }
    if(m_FrameIsSet)
    {
        val[utility::conversions::to_string_t(U("frame"))] = ModelBase::toJson(m_Frame);
    }
    if(m_ReactorIsSet)
    {
        val[utility::conversions::to_string_t(U("reactor"))] = ModelBase::toJson(m_Reactor);
    }
    if(m_EngineIsSet)
    {
        val[utility::conversions::to_string_t(U("engine"))] = ModelBase::toJson(m_Engine);
    }
    if(m_CooldownIsSet)
    {
        val[utility::conversions::to_string_t(U("cooldown"))] = ModelBase::toJson(m_Cooldown);
    }
    if(m_ModulesIsSet)
    {
        val[utility::conversions::to_string_t(U("modules"))] = ModelBase::toJson(m_Modules);
    }
    if(m_MountsIsSet)
    {
        val[utility::conversions::to_string_t(U("mounts"))] = ModelBase::toJson(m_Mounts);
    }
    if(m_CargoIsSet)
    {
        val[utility::conversions::to_string_t(U("cargo"))] = ModelBase::toJson(m_Cargo);
    }
    if(m_FuelIsSet)
    {
        val[utility::conversions::to_string_t(U("fuel"))] = ModelBase::toJson(m_Fuel);
    }

    return val;
}

bool Ship::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("symbol"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("symbol")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSymbol;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSymbol);
            setSymbol(refVal_setSymbol);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("registration"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("registration")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ShipRegistration> refVal_setRegistration;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRegistration);
            setRegistration(refVal_setRegistration);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("nav"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("nav")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ShipNav> refVal_setNav;
            ok &= ModelBase::fromJson(fieldValue, refVal_setNav);
            setNav(refVal_setNav);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("crew"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("crew")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ShipCrew> refVal_setCrew;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCrew);
            setCrew(refVal_setCrew);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("frame"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("frame")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ShipFrame> refVal_setFrame;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFrame);
            setFrame(refVal_setFrame);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("reactor"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("reactor")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ShipReactor> refVal_setReactor;
            ok &= ModelBase::fromJson(fieldValue, refVal_setReactor);
            setReactor(refVal_setReactor);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("engine"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("engine")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ShipEngine> refVal_setEngine;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEngine);
            setEngine(refVal_setEngine);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cooldown"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cooldown")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<Cooldown> refVal_setCooldown;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCooldown);
            setCooldown(refVal_setCooldown);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("modules"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("modules")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<ShipModule>> refVal_setModules;
            ok &= ModelBase::fromJson(fieldValue, refVal_setModules);
            setModules(refVal_setModules);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("mounts"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("mounts")));
        if(!fieldValue.is_null())
        {
            std::vector<std::shared_ptr<ShipMount>> refVal_setMounts;
            ok &= ModelBase::fromJson(fieldValue, refVal_setMounts);
            setMounts(refVal_setMounts);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("cargo"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("cargo")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ShipCargo> refVal_setCargo;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCargo);
            setCargo(refVal_setCargo);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("fuel"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("fuel")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<ShipFuel> refVal_setFuel;
            ok &= ModelBase::fromJson(fieldValue, refVal_setFuel);
            setFuel(refVal_setFuel);
        }
    }
    return ok;
}

void Ship::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_SymbolIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("symbol")), m_Symbol));
    }
    if(m_RegistrationIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("registration")), m_Registration));
    }
    if(m_NavIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("nav")), m_Nav));
    }
    if(m_CrewIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("crew")), m_Crew));
    }
    if(m_FrameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("frame")), m_Frame));
    }
    if(m_ReactorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("reactor")), m_Reactor));
    }
    if(m_EngineIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("engine")), m_Engine));
    }
    if(m_CooldownIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cooldown")), m_Cooldown));
    }
    if(m_ModulesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("modules")), m_Modules));
    }
    if(m_MountsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("mounts")), m_Mounts));
    }
    if(m_CargoIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("cargo")), m_Cargo));
    }
    if(m_FuelIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("fuel")), m_Fuel));
    }
}

bool Ship::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("symbol"))))
    {
        utility::string_t refVal_setSymbol;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("symbol"))), refVal_setSymbol );
        setSymbol(refVal_setSymbol);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("registration"))))
    {
        std::shared_ptr<ShipRegistration> refVal_setRegistration;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("registration"))), refVal_setRegistration );
        setRegistration(refVal_setRegistration);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("nav"))))
    {
        std::shared_ptr<ShipNav> refVal_setNav;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("nav"))), refVal_setNav );
        setNav(refVal_setNav);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("crew"))))
    {
        std::shared_ptr<ShipCrew> refVal_setCrew;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("crew"))), refVal_setCrew );
        setCrew(refVal_setCrew);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("frame"))))
    {
        std::shared_ptr<ShipFrame> refVal_setFrame;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("frame"))), refVal_setFrame );
        setFrame(refVal_setFrame);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("reactor"))))
    {
        std::shared_ptr<ShipReactor> refVal_setReactor;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("reactor"))), refVal_setReactor );
        setReactor(refVal_setReactor);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("engine"))))
    {
        std::shared_ptr<ShipEngine> refVal_setEngine;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("engine"))), refVal_setEngine );
        setEngine(refVal_setEngine);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cooldown"))))
    {
        std::shared_ptr<Cooldown> refVal_setCooldown;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cooldown"))), refVal_setCooldown );
        setCooldown(refVal_setCooldown);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("modules"))))
    {
        std::vector<std::shared_ptr<ShipModule>> refVal_setModules;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("modules"))), refVal_setModules );
        setModules(refVal_setModules);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("mounts"))))
    {
        std::vector<std::shared_ptr<ShipMount>> refVal_setMounts;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("mounts"))), refVal_setMounts );
        setMounts(refVal_setMounts);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("cargo"))))
    {
        std::shared_ptr<ShipCargo> refVal_setCargo;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("cargo"))), refVal_setCargo );
        setCargo(refVal_setCargo);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("fuel"))))
    {
        std::shared_ptr<ShipFuel> refVal_setFuel;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("fuel"))), refVal_setFuel );
        setFuel(refVal_setFuel);
    }
    return ok;
}

utility::string_t Ship::getSymbol() const
{
    return m_Symbol;
}

void Ship::setSymbol(const utility::string_t& value)
{
    m_Symbol = value;
    m_SymbolIsSet = true;
}

bool Ship::symbolIsSet() const
{
    return m_SymbolIsSet;
}

void Ship::unsetSymbol()
{
    m_SymbolIsSet = false;
}
std::shared_ptr<ShipRegistration> Ship::getRegistration() const
{
    return m_Registration;
}

void Ship::setRegistration(const std::shared_ptr<ShipRegistration>& value)
{
    m_Registration = value;
    m_RegistrationIsSet = true;
}

bool Ship::registrationIsSet() const
{
    return m_RegistrationIsSet;
}

void Ship::unsetRegistration()
{
    m_RegistrationIsSet = false;
}
std::shared_ptr<ShipNav> Ship::getNav() const
{
    return m_Nav;
}

void Ship::setNav(const std::shared_ptr<ShipNav>& value)
{
    m_Nav = value;
    m_NavIsSet = true;
}

bool Ship::navIsSet() const
{
    return m_NavIsSet;
}

void Ship::unsetNav()
{
    m_NavIsSet = false;
}
std::shared_ptr<ShipCrew> Ship::getCrew() const
{
    return m_Crew;
}

void Ship::setCrew(const std::shared_ptr<ShipCrew>& value)
{
    m_Crew = value;
    m_CrewIsSet = true;
}

bool Ship::crewIsSet() const
{
    return m_CrewIsSet;
}

void Ship::unsetCrew()
{
    m_CrewIsSet = false;
}
std::shared_ptr<ShipFrame> Ship::getFrame() const
{
    return m_Frame;
}

void Ship::setFrame(const std::shared_ptr<ShipFrame>& value)
{
    m_Frame = value;
    m_FrameIsSet = true;
}

bool Ship::frameIsSet() const
{
    return m_FrameIsSet;
}

void Ship::unsetFrame()
{
    m_FrameIsSet = false;
}
std::shared_ptr<ShipReactor> Ship::getReactor() const
{
    return m_Reactor;
}

void Ship::setReactor(const std::shared_ptr<ShipReactor>& value)
{
    m_Reactor = value;
    m_ReactorIsSet = true;
}

bool Ship::reactorIsSet() const
{
    return m_ReactorIsSet;
}

void Ship::unsetReactor()
{
    m_ReactorIsSet = false;
}
std::shared_ptr<ShipEngine> Ship::getEngine() const
{
    return m_Engine;
}

void Ship::setEngine(const std::shared_ptr<ShipEngine>& value)
{
    m_Engine = value;
    m_EngineIsSet = true;
}

bool Ship::engineIsSet() const
{
    return m_EngineIsSet;
}

void Ship::unsetEngine()
{
    m_EngineIsSet = false;
}
std::shared_ptr<Cooldown> Ship::getCooldown() const
{
    return m_Cooldown;
}

void Ship::setCooldown(const std::shared_ptr<Cooldown>& value)
{
    m_Cooldown = value;
    m_CooldownIsSet = true;
}

bool Ship::cooldownIsSet() const
{
    return m_CooldownIsSet;
}

void Ship::unsetCooldown()
{
    m_CooldownIsSet = false;
}
std::vector<std::shared_ptr<ShipModule>>& Ship::getModules()
{
    return m_Modules;
}

void Ship::setModules(const std::vector<std::shared_ptr<ShipModule>>& value)
{
    m_Modules = value;
    m_ModulesIsSet = true;
}

bool Ship::modulesIsSet() const
{
    return m_ModulesIsSet;
}

void Ship::unsetModules()
{
    m_ModulesIsSet = false;
}
std::vector<std::shared_ptr<ShipMount>>& Ship::getMounts()
{
    return m_Mounts;
}

void Ship::setMounts(const std::vector<std::shared_ptr<ShipMount>>& value)
{
    m_Mounts = value;
    m_MountsIsSet = true;
}

bool Ship::mountsIsSet() const
{
    return m_MountsIsSet;
}

void Ship::unsetMounts()
{
    m_MountsIsSet = false;
}
std::shared_ptr<ShipCargo> Ship::getCargo() const
{
    return m_Cargo;
}

void Ship::setCargo(const std::shared_ptr<ShipCargo>& value)
{
    m_Cargo = value;
    m_CargoIsSet = true;
}

bool Ship::cargoIsSet() const
{
    return m_CargoIsSet;
}

void Ship::unsetCargo()
{
    m_CargoIsSet = false;
}
std::shared_ptr<ShipFuel> Ship::getFuel() const
{
    return m_Fuel;
}

void Ship::setFuel(const std::shared_ptr<ShipFuel>& value)
{
    m_Fuel = value;
    m_FuelIsSet = true;
}

bool Ship::fuelIsSet() const
{
    return m_FuelIsSet;
}

void Ship::unsetFuel()
{
    m_FuelIsSet = false;
}
}


